{
  "Skill": {
    "Node.js ": {
      "description": "Step by step guide to becoming a modern Node.js developer in 2023 ",
      "Backend roadmap till Language Selection": {
        "order": 1,
        "name": "Backend Developer ",
        "link": "https://roadmap.sh/backend"
      },
      "JavaScript Roadmap": {
        "order": 2,
        "name": "JavaScript ",
        "link": "https://roadmap.sh/javascript"
      },
      "Node.js Introduction": {
        "description": "Node.js is an open-source, cross-platform runtime environment and library used for running web applications outside the client’s browser. It is primarily deployed for non-blocking, event-driven servers, such as traditional websites and back-end API services. Every browser has its own version of a JS engine, and node.js is built on Google Chrome’s V8 JavaScript engine.",
        "resources": [
          {
            "name": "Official Website",
            "link": "https://nodejs.org/en/"
          },
          {
            "name": "Official Documentation",
            "link": "https://nodejs.org/en/docs/"
          }
        ],
        "order": 3,
        "options": [
          {
            "name": "Nodejs vs Browser",
            "recommendation-type": "opinion",
            "description": "Both the browser and Node.js use JavaScript as their programming language. Building apps that run in the browser is entirely different than building a Node.js application. Explore the key differences in the provided resources.",
            "resources": [
              {
                "name": "Differences between Node.js and the Browser",
                "link": "https://nodejs.org/en/learn/getting-started/differences-between-nodejs-and-the-browser/"
              }
            ]
          },
          {
            "name": "Running Node.js Code",
            "recommendation-type": "opinion",
            "description": "The usual way to run a Node.js program is to run the globally available node command and pass the name of the file you want to execute. Learn more about running Node.js code in the provided resources.",
            "resources": [
              {
                "name": "Run Node.js from Command Line",
                "link": "https://nodejs.org/en/learn/command-line/run-nodejs-scripts-from-the-command-line/"
              }
            ]
          },
          {
            "name": "What is Node.js",
            "recommendation-type": "opinion",
            "description": "Node.js is an open-source and cross-platform JavaScript runtime environment. It runs the V8 JavaScript engine outside the browser, providing high performance. Explore more about Node.js and how it works in the provided resources.",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://nodejs.org/en/about/"
              },
              {
                "name": "Node.JS Introduction",
                "link": "https://www.w3schools.com/nodejs/nodejs_intro.asp"
              },
              {
                "name": "What is Node.js?",
                "link": "https://nodejs.dev/en/learn/"
              },
              {
                "name": "How Node.js Works?",
                "link": "https://www.youtube.com/watch?v=jOupHNvDIq8"
              }
            ]
          },
          {
            "name": "Why Node.js",
            "recommendation-type": "opinion",
            "description": "Node.js is a cross-platform runtime known for its scalability, maintainability, and speed. Its event-driven, non-blocking I/O model makes it suitable for data-intensive and real-time applications. Explore the advantages of Node.js in the provided resources.",
            "resources": [
              {
                "name": "Pros of Node.js",
                "link": "https://www.freecodecamp.org/news/what-are-the-advantages-of-node-js/"
              },
              {
                "name": "Learn Node.js",
                "link": "https://nodejs.dev/en/learn/"
              },
              {
                "name": "Why Choose Node.js?",
                "link": "https://medium.com/selleo/why-choose-node-js-b0091ad6c3fc"
              },
              {
                "name": "5 Reasons to Choose Node.js",
                "link": "https://www.bitovi.com/blog/5-reasons-to-choose-nodejs"
              }
            ]
          },
          {
            "name": "History of Node.js",
            "recommendation-type": "opinion",
            "description": "Node.js was written by Ryan Dahl in 2009, focusing on server-side JavaScript. Explore the timeline of Node.js and how it came about in the provided resources.",
            "resources": [
              {
                "name": "Rising Stack - History of Node.js on a Timeline",
                "link": "https://blog.risingstack.com/history-of-node-js/"
              },
              {
                "name": "SAP Press - How Did Node.js Come About?",
                "link": "https://blog.sap-press.com/how-did-node.js-come-about"
              }
            ]
          }
        ]
      },
      "Modules": {
        "description": "Node.js uses a module system to split, maintain, organize, and reuse code. Explore the built-in modules and learn more about using modules in Node.js in the provided resources.",
        "resources": [
          {
            "name": "Modules: CommonJS modules",
            "link": "https://nodejs.org/api/modules.html#modules-commonjs-modules"
          },
          {
            "name": "CommonJS vs. ES modules in Node.js",
            "link": "https://blog.logrocket.com/commonjs-vs-es-modules-node-js/"
          },
          {
            "name": "More about modules",
            "link": "https://www.geeksforgeeks.org/node-js-modules/"
          },
          {
            "name": "Using Modules",
            "link": "https://www.freecodecamp.org/news/modular-programming-nodejs-npm-modules/"
          },
          {
            "name": "Modules in Node.js",
            "link": "https://www.youtube.com/watch?v=9Amxzvq5LY8&"
          }
        ],
        "order": 4,
        "options": [
          {
            "name": "Custom Modules",
            "recommendation-type": "opinion",
            "description": "Modules in Node.js are collections of JavaScript code in separate logical files. Learn about creating custom modules using CommonJS or ESM in the provided resources.",
            "resources": [
              {
                "name": "How to Create Modules in Node.js?",
                "link": "https://www.geeksforgeeks.org/how-to-create-modules-in-node-js/"
              },
              {
                "name": "Creating a Module in Node.js",
                "link": "https://www.youtube.com/watch?v=Cxo4UKpHv5s"
              },
              {
                "name": "CommonJS vs ESM in Node.js",
                "link": "https://blog.logrocket.com/commonjs-vs-es-modules-node-js/"
              },
              {
                "name": "Modules and Imports in Node.js",
                "link": "https://reflectoring.io/nodejs-modules-imports/"
              }
            ]
          },
          {
            "name": "global keyword",
            "recommendation-type": "opinion",
            "description": "In Node.js, the top-level scope is not the global scope. Learn more about the global keyword in Node.js and how it differs from browsers in the provided resources.",
            "resources": [
              {
                "name": "global Keyword in Node.js",
                "link": "https://nodejs.org/api/globals.html#global"
              },
              {
                "name": "What is Global Object?",
                "link": "https://www.youtube.com/watch?v=jn8PZNBmKm0"
              },
              {
                "name": "Global Object in Node",
                "link": "https://www.youtube.com/watch?v=PY-AycMkEAg"
              }
            ]
          },
          {
            "name": "CommonJS vs ESM",
            "recommendation-type": "opinion",
            "description": "CommonJS and ES (EcmaScript) are module systems used in Node.js. Explore the differences between CommonJS and ESM in NodeJS in the provided resources.",
            "resources": [
              {
                "name": "CommonJS vs ESM",
                "link": "https://blog.logrocket.com/commonjs-vs-es-modules-node-js/"
              },
              {
                "name": "Using CommonJS",
                "link": "https://www.javascripttutorial.net/nodejs-tutorial/nodejs-modules/"
              },
              {
                "name": "Using ES Modules",
                "link": "https://www.youtube.com/watch?v=pP4kjXykbio"
              },
              {
                "name": "Using Modules",
                "link": "https://www.youtube.com/watch?v=pP4kjXykbio"
              },
              {
                "name": "CommonJS vs. ES Modules: Modules and Imports in NodeJS",
                "link": "https://reflectoring.io/nodejs-modules-imports/"
              }
            ],
            "options": [
              {
                "name": "CommonJS ",
                "recommendation-type": "opinion",
                "description": "CommonJS and ES (EcmaScript) are module systems used in Node. Explore the differences between CommonJS and ESM in NodeJS in the provided resources.",
                "resources": [
                  {
                    "name": "CommonJS vs ESM",
                    "link": "https://blog.logrocket.com/commonjs-vs-es-modules-node-js/"
                  },
                  {
                    "name": "Using CommonJS",
                    "link": "https://www.javascripttutorial.net/nodejs-tutorial/nodejs-modules/"
                  },
                  {
                    "name": "Using ES Modules",
                    "link": "https://www.youtube.com/watch?v=pP4kjXykbio"
                  },
                  {
                    "name": "Using Modules",
                    "link": "https://www.youtube.com/watch?v=pP4kjXykbio"
                  },
                  {
                    "name": "CommonJS vs. ES Modules: Modules and Imports in NodeJS",
                    "link": "https://reflectoring.io/nodejs-modules-imports/"
                  }
                ]
              },
              {
                "name": " ESM",
                "recommendation-type": "opinion",
                "description": "CommonJS and ES (EcmaScript) are module systems used in Node. Explore the differences between CommonJS and ESM in NodeJS in the provided resources.",
                "resources": [
                  {
                    "name": "CommonJS vs ESM",
                    "link": "https://blog.logrocket.com/commonjs-vs-es-modules-node-js/"
                  },
                  {
                    "name": "Using CommonJS",
                    "link": "https://www.javascripttutorial.net/nodejs-tutorial/nodejs-modules/"
                  },
                  {
                    "name": "Using ES Modules",
                    "link": "https://www.youtube.com/watch?v=pP4kjXykbio"
                  },
                  {
                    "name": "Using Modules",
                    "link": "https://www.youtube.com/watch?v=pP4kjXykbio"
                  },
                  {
                    "name": "CommonJS vs. ES Modules: Modules and Imports in NodeJS",
                    "link": "https://reflectoring.io/nodejs-modules-imports/"
                  }
                ]
              }
            ]
          }
        ]
      },
      "npm": {
        "description": "npm is the standard package manager for Node.js. It serves as an online repository for open-source Node.js projects and provides a command-line utility for package installation, version management, and dependency management.",
        "resources": [
          {
            "name": "What is npm?",
            "link": "https://nodejs.dev/en/learn/an-introduction-to-the-npm-package-manager/"
          },
          {
            "name": "An introduction to the npm package manager",
            "link": "https://nodejs.dev/en/learn/an-introduction-to-the-npm-package-manager/"
          },
          {
            "name": "Official Website",
            "link": "https://www.npmjs.com/"
          },
          {
            "name": "Official Documentation",
            "link": "https://docs.npmjs.com/"
          },
          {
            "name": "NPM Crash Course",
            "link": "https://www.youtube.com/watch?v=jHDhaSSKmB0"
          }
        ],
        "order": 5,
        "options": [
          {
            "name": "npx",
            "recommendation-type": "opinion",
            "description": "npx is a powerful command in npm that allows you to run code built with Node.js and published through the npm registry. Learn more about npx in the provided resources.",
            "resources": [
              {
                "name": "Introduction to the npx Node.js Package Runner",
                "link": "https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b"
              },
              {
                "name": "npm vs npx — What’s the Difference?",
                "link": "https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/"
              },
              {
                "name": "Official Documentation",
                "link": "https://docs.npmjs.com/cli/v7/commands/npx/"
              }
            ]
          },
          {
            "name": " Installing package",
            "recommendation-type": "opinion",
            "description": "NodeJS and NPM allow two methods of installing dependencies/packages: Local and Global. This is mainly used when adding a package or dependency as part of a specific project you’re working on. The package would be installed (with its dependencies) in node_modules folder under your project. In addition, in package.json file there will be a new line added for the installed dependency under the label dependencies. At this point - you can start using the package in your NodeJS code by importing the package. Unlike the local install, you can install packages and dependencies globally. This would install it in a system path, and these packages would be available to any program which runs on this specific computer. This method is often used for installing command line tools (for example, even npm program is a Globally installed npm package).",
            "resources": [
              {
                "name": "Downloading and installing packages locally",
                "link": "https://docs.npmjs.com/downloading-and-installing-packages-locally"
              },
              {
                "name": "Downloading and installing packages globally",
                "link": "https://docs.npmjs.com/downloading-and-installing-packages-globally"
              },
              {
                "name": "NPM Install Docs",
                "link": "https://docs.npmjs.com/cli/v8/commands/npm-install"
              },
              {
                "name": "What is global installation of dependencies in Node.js?",
                "link": "https://www.geeksforgeeks.org/what-is-global-installation-of-dependencies-in-node-js/"
              }
            ],
            "options": [
              {
                "name": "Global Installation ",
                "recommendation-type": "opinion",
                "description": "NodeJS and NPM allow two methods of installing dependencies/packages: Local and Global. This is mainly used when adding a package or dependency as part of a specific project you’re working on. The package would be installed (with its dependencies) in node_modules folder under your project. In addition, in package.json file there will be a new line added for the installed dependency under the label dependencies. At this point - you can start using the package in your NodeJS code by importing the package. Unlike the local install, you can install packages and dependencies globally. This would install it in a system path, and these packages would be available to any program which runs on this specific computer. This method is often used for installing command line tools (for example, even npm program is a Globally installed npm package).",
                "resources": [
                  {
                    "name": "Downloading and installing packages locally",
                    "link": "https://docs.npmjs.com/downloading-and-installing-packages-locally"
                  },
                  {
                    "name": "Downloading and installing packages globally",
                    "link": "https://docs.npmjs.com/downloading-and-installing-packages-globally"
                  },
                  {
                    "name": "NPM Install Docs",
                    "link": "https://docs.npmjs.com/cli/v8/commands/npm-install"
                  },
                  {
                    "name": "What is global installation of dependencies in Node.js?",
                    "link": "https://www.geeksforgeeks.org/what-is-global-installation-of-dependencies-in-node-js/"
                  }
                ]
              },
              {
                "name": " Local Installation",
                "recommendation-type": "opinion",
                "description": "NodeJS and NPM allow two methods of installing dependencies/packages: Local and Global. This is mainly used when adding a package or dependency as part of a specific project you’re working on. The package would be installed (with its dependencies) in node_modules folder under your project. In addition, in package.json file there will be a new line added for the installed dependency under the label dependencies. At this point - you can start using the package in your NodeJS code by importing the package. Unlike the local install, you can install packages and dependencies globally. This would install it in a system path, and these packages would be available to any program which runs on this specific computer. This method is often used for installing command line tools (for example, even npm program is a Globally installed npm package).",
                "resources": [
                  {
                    "name": "Downloading and installing packages locally",
                    "link": "https://docs.npmjs.com/downloading-and-installing-packages-locally"
                  },
                  {
                    "name": "Downloading and installing packages globally",
                    "link": "https://docs.npmjs.com/downloading-and-installing-packages-globally"
                  },
                  {
                    "name": "NPM Install Docs",
                    "link": "https://docs.npmjs.com/cli/v8/commands/npm-install"
                  },
                  {
                    "name": "What is global installation of dependencies in Node.js?",
                    "link": "https://www.geeksforgeeks.org/what-is-global-installation-of-dependencies-in-node-js/"
                  }
                ]
              }
            ]
          },
          {
            "name": "Updating Packages",
            "recommendation-type": "opinion",
            "description": "npm provides features to help install and maintain project dependencies. Explore how to update packages using npm commands in the provided resources.",
            "resources": [
              {
                "name": "How to update?",
                "link": "https://www.freecodecamp.org/news/how-to-update-npm-dependencies/"
              },
              {
                "name": "Updating dependencies",
                "link": "https://www.youtube.com/watch?v=Ghdfdq17JAY"
              },
              {
                "name": "Updating packages downloaded from the registry",
                "link": "https://docs.npmjs.com/updating-packages-downloaded-from-the-registry"
              }
            ]
          },
          {
            "name": "Using Packages",
            "recommendation-type": "opinion",
            "description": "Open source Node modules are powerful, providing instant access to functionality. Explore how to use npm modules with CommonJS or ESM in the provided resources.",
            "resources": [
              {
                "name": "How to import and use npm modules",
                "link": "https://learn.coderslang.com/0014-how-to-import-and-use-npm-modules/"
              }
            ]
          },
          {
            "name": "Running Scripts",
            "recommendation-type": "opinion",
            "description": "In Node.js, npm scripts are used to initiate a server, start project builds, and run tests. Learn more about defining and running npm scripts in the provided resources.",
            "resources": [
              {
                "name": "Example of Running Scripts",
                "link": "https://riptutorial.com/node-js/example/4592/running-scripts"
              },
              {
                "name": "Introduction to NPM Scripts",
                "link": "https://www.geeksforgeeks.org/introduction-to-npm-scripts/"
              },
              {
                "name": "Running Scripts",
                "link": "https://docs.npmjs.com/downloading-and-installing-packages-locally"
              }
            ]
          },
          {
            "name": "npm workspaces",
            "recommendation-type": "opinion",
            "description": "npm workspaces refer to a set of npm CLI features that support managing multiple packages from your local file system within a singular top-level root package.",
            "resources": [
              {
                "name": "npm workspaces",
                "link": "https://docs.npmjs.com/cli/v8/using-npm/workspaces"
              },
              {
                "name": "Getting Started with Npm Workspaces",
                "link": "https://ruanmartinelli.com/posts/npm-7-workspaces-1"
              }
            ]
          },
          {
            "name": "Creating Packages",
            "recommendation-type": "opinion",
            "description": "npm packages allow you to bundle some specific functionality into a reusable package which can then be uploaded to some package registry such as npm or GitHub packages and then be installed and reused in projects using npm.",
            "resources": [
              {
                "name": "How to make a tiny npm package and publish it",
                "link": "https://www.freecodecamp.org/news/how-to-make-a-beautiful-tiny-npm-package-and-publish-it-2881d4307f78/"
              },
              {
                "name": "Best practices for creating a modern npm package",
                "link": "https://snyk.io/blog/best-practices-create-modern-npm-package/"
              }
            ],
            "options": [
              {
                "name": "Private Packages",
                "recommendation-type": "opinion",
                "description": "npm packages allow you to bundle some specific functionality into a reusable package which can then be uploaded to some package registry such as npm or GitHub packages and then be installed and reused in projects using npm.",
                "resources": [
                  {
                    "name": "How to make a tiny npm package and publish it",
                    "link": "https://www.freecodecamp.org/news/how-to-make-a-beautiful-tiny-npm-package-and-publish-it-2881d4307f78/"
                  },
                  {
                    "name": "Best practices for creating a modern npm package",
                    "link": "https://snyk.io/blog/best-practices-create-modern-npm-package/"
                  }
                ]
              },
              {
                "name": "Public Packages",
                "recommendation-type": "opinion",
                "description": "npm packages allow you to bundle some specific functionality into a reusable package which can then be uploaded to some package registry such as npm or GitHub packages and then be installed and reused in projects using npm.",
                "resources": [
                  {
                    "name": "How to make a tiny npm package and publish it",
                    "link": "https://www.freecodecamp.org/news/how-to-make-a-beautiful-tiny-npm-package-and-publish-it-2881d4307f78/"
                  },
                  {
                    "name": "Best practices for creating a modern npm package",
                    "link": "https://snyk.io/blog/best-practices-create-modern-npm-package/"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Error Handling": {
        "name": "Error Handling",
        "recommendation-type": "opinion",
        "description": "Error handling in Node.js is crucial for identifying and resolving bugs efficiently. Explore best practices and techniques for handling different types of errors in Node.js.",
        "resources": [
          {
            "name": "Node.js Error Handling Best Practices",
            "link": "https://sematext.com/blog/node-js-error-handling"
          },
          {
            "name": "Error handling in Node.js",
            "link": "https://blog.logrocket.com/error-handling-node-js/"
          }
        ],
        "order": 6,
        "options": [
          {
            "name": "Uncaught Exceptions",
            "recommendation-type": "opinion",
            "description": "Handling uncaught exceptions in Node.js is crucial for maintaining application stability. Learn best practices and resources for dealing with uncaught exceptions in Node.js.",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://nodejs.org/api/process.html#event-uncaughtexception"
              },
              {
                "name": "Let It Crash: Best Practices for Handling Node.js Errors on Shutdown",
                "link": "https://blog.heroku.com/best-practices-nodejs-errors"
              },
              {
                "name": "Uncaught Exceptions in Node.js",
                "link": "https://shapeshed.com/uncaught-exceptions-in-node/"
              }
            ]
          },
          {
            "name": "Error types",
            "recommendation-type": "opinion",
            "description": "Understanding different types of errors in Node.js is crucial for effective debugging. Explore resources to learn about various error types and how to identify and resolve them.",
            "resources": [
              {
                "name": "Node.js Errors",
                "link": "https://nodejs.org/api/errors.html"
              },
              {
                "name": "MDN: JavaScript Error Object",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"
              }
            ],
            "options": [
              {
                "name": "Javascript Errors",
                "recommendation-type": "opinion",
                "description": "JavaScript errors are essential for developers to identify and troubleshoot issues in scripts. Learn about the six types of JavaScript errors and how to handle them.",
                "resources": [
                  {
                    "name": "Error Types in JavaScript",
                    "link": "https://blog.bitsrc.io/types-of-native-errors-in-javascript-you-must-know-b8238d40e492"
                  }
                ]
              },
              {
                "name": "System Errors",
                "recommendation-type": "opinion",
                "description": "Node.js generates system errors when exceptions occur within its runtime environment. Explore common system errors and how to handle them in your Node.js program.",
                "resources": [
                  {
                    "name": "Node.js Errors - Official Docs",
                    "link": "https://nodejs.org/api/errors.html#errors_class_systemerror"
                  }
                ]
              },
              {
                "name": "User Specified Errors",
                "recommendation-type": "opinion",
                "description": "Creating user-specified errors in Node.js involves extending the base Error object. Learn how to create and handle custom errors to improve error reporting and debugging.",
                "resources": [
                  {
                    "name": "A Comprehensive Guide To Error Handling In Node.js",
                    "link": "https://www.honeybadger.io/blog/errors-nodejs/"
                  }
                ]
              },
              {
                "name": "Assertion Errors",
                "recommendation-type": "opinion",
                "description": "AssertionErrors in Node.js occur when the assert module determines that a given expression is not truthy. Explore resources on Node.js assertions and error handling.",
                "resources": [
                  {
                    "name": "Node.js Assert",
                    "link": "https://nodejs.org/api/assert.html#new-assertassertionerroroptions"
                  },
                  {
                    "name": "Node.js Error Handling - AssertionError",
                    "link": "https://blog.airbrake.io/blog/nodejs-error-handling/assertionerror-nodejs"
                  }
                ]
              }
            ]
          },
          {
            "name": "Stack Trace",
            "recommendation-type": "opinion",
            "description": "A stack trace helps trace active stack frames during program execution, aiding in debugging. Learn more about stack traces and how to use them in Node.js.",
            "resources": [
              {
                "name": "What is Stack trace?",
                "link": "https://www.geeksforgeeks.org/what-is-stacktrace-and-how-to-print-in-node-js/"
              },
              {
                "name": "What is stacktrace and how to print in node.js?",
                "link": "https://www.geeksforgeeks.org/what-is-stacktrace-and-how-to-print-in-node-js/"
              },
              {
                "name": "Multiple ways to log the stack trace in node.js",
                "link": "https://www.cloudhadoop.com/nodejs-print-stack-trace-error/"
              }
            ]
          },
          {
            "name": "Using debugger",
            "recommendation-type": "opinion",
            "description": "Node.js includes a command-line debugging utility. Explore how to use the Node.js debugger to inspect and debug your code effectively.",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://nodejs.org/api/debugger.html"
              },
              {
                "name": "Node.js Debugging",
                "link": "https://www.geeksforgeeks.org/node-js-debugging/"
              }
            ]
          },
          {
            "name": "Async errors",
            "recommendation-type": "opinion",
            "description": "Handling errors in asynchronous programming is crucial. Explore how to handle async errors effectively and ensure the robustness of your Node.js applications.",
            "resources": [
              {
                "name": "Async Errors",
                "link": "https://www.mariokandut.com/handling-errors-in-asynchronous-functions-node-js/"
              }
            ]
          }
        ]
      },
      "Async Programming": {
        "description": "Understanding asynchronous programming is crucial for developing efficient and responsive Node.js applications. Explore resources to grasp the concepts of async programming in JavaScript.",
        "resources": [
          {
            "name": "Introduction to Async JS",
            "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing/"
          },
          {
            "name": "Asynchronous Vs Synchronous Programming",
            "link": "https://www.youtube.com/watch?v=Kpn2ajSa92c"
          }
        ],
        "order": 7,
        "options": [
          {
            "name": "Event Emitter",
            "recommendation-type": "opinion",
            "description": "In Node.js, the Event Emitter allows the implementation of the observer pattern. Learn how to use Event Emitters to handle events and build scalable and modular applications.",
            "resources": [
              {
                "name": "What are Event Emitters?",
                "link": "https://nodejs.dev/en/learn/the-nodejs-event-emitter/"
              },
              {
                "name": "Using Event Emitters in Node.js",
                "link": "https://www.digitalocean.com/community/tutorials/using-event-emitters-in-node-js"
              }
            ]
          },
          {
            "name": "Event Loop",
            "recommendation-type": "opinion",
            "description": "The Event Loop is a fundamental concept in Node.js, enabling asynchronous and non-blocking I/O. Explore resources to deepen your understanding of the Node.js Event Loop.",
            "resources": [
              {
                "name": "The Node.JS Event Loop",
                "link": "https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop"
              },
              {
                "name": "JavaScript Visualized: Event Loop",
                "link": "https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif"
              },
              {
                "name": "The Complete Node js: The Node js Event Loop",
                "link": "https://www.coursera.org/lecture/secure-full-stack-mean-developer/the-node-js-event-loop-j5fbT"
              },
              {
                "name": "The NodeJS Event loop",
                "link": "https://nodejs.dev/en/learn/the-nodejs-event-loop/"
              }
            ]
          },
          {
            "Writing Async Code": {
              "options": [
                {
                  "name": "Promises",
                  "recommendation-type": "opinion",
                  "description": "Promises are a crucial part of asynchronous JavaScript, providing a clean and structured way to handle asynchronous operations. Explore resources to master the use of promises in Node.js.",
                  "resources": [
                    {
                      "name": "Promise Methods",
                      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
                    },
                    {
                      "name": "Official Website",
                      "link": "https://www.promisejs.org/"
                    },
                    {
                      "name": "JavaScript Promises for Beginners",
                      "link": "https://www.freecodecamp.org/news/javascript-promises-for-beginners/"
                    },
                    {
                      "name": "Asynchronous JavaScript - Promises",
                      "link": "https://www.youtube.com/watch?v=a_8nrslImo4/"
                    }
                  ]
                },
                {
                  "name": "Async/Await",
                  "recommendation-type": "opinion",
                  "description": "Async/Await is a powerful syntax in JavaScript for handling promises, providing a more straightforward and readable way to work with asynchronous code. Explore resources to master Async/Await.",
                  "resources": [
                    {
                      "name": "Official Documentation",
                      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
                    },
                    {
                      "name": "More on async await",
                      "link": "https://javascript.info/async-await"
                    },
                    {
                      "name": "Using async await",
                      "link": "https://www.youtube.com/watch?v=V_Kr9OSfDeU"
                    },
                    {
                      "name": "W3Docs Async/Await",
                      "link": "https://www.w3docs.com/learn-javascript/async-await.html"
                    },
                    {
                      "name": "Difference between Promise and Async/Await",
                      "link": "https://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/"
                    }
                  ]
                },
                {
                  "name": "Callbacks",
                  "recommendation-type": "opinion",
                  "description": "In the asynchronous nature of Node.js, callbacks play a crucial role in executing tasks without blocking the main program flow. Explore resources to understand the use of callbacks in Node.js.",
                  "resources": [
                    {
                      "name": "What are callbacks?",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Callback_function"
                    },
                    {
                      "name": "Asynchronicity in Programming Languages",
                      "link": "https://nodejs.dev/en/learn/javascript-asynchronous-programming-and-callbacks/"
                    }
                  ]
                },
                {
                  "name": "setTimeout",
                  "recommendation-type": "opinion",
                  "description": "The setTimeout function in JavaScript allows the scheduling of the execution of a function after a specified delay. Explore resources to understand and use setTimeout effectively.",
                  "resources": [
                    {
                      "name": "JavaScript MDN Docs",
                      "link": "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout"
                    },
                    {
                      "name": "W3Schools - JavaScript - setTimeOut",
                      "link": "https://www.w3schools.com/jsref/met_win_settimeout.asp"
                    },
                    {
                      "name": "setInterval and setTimeout: timing events",
                      "link": "https://www.youtube.com/watch?v=kOcFZV3c75I"
                    },
                    {
                      "name": "setTimeout EXPLAINED in 5 minutes!",
                      "link": "https://www.youtube.com/watch?v=z9lJb4D3nJY"
                    }
                  ]
                },
                {
                  "name": "setInterval",
                  "recommendation-type": "opinion",
                  "description": "The setInterval() method in JavaScript enables the repeated execution of a function at fixed intervals. Explore resources to grasp the usage of setInterval() in Node.js and JavaScript.",
                  "resources": [
                    {
                      "name": "Scheduling: setTimeout and setInterval",
                      "link": "https://javascript.info/settimeout-setinterval"
                    },
                    {
                      "name": "What is the use of setInterval() method in Node.js?",
                      "link": "https://www.geeksforgeeks.org/what-is-setinterval-in-javascript/"
                    }
                  ]
                },
                {
                  "name": "setImmediate",
                  "recommendation-type": "opinion",
                  "description": "The setImmediate function in Node.js delays the execution of a function until the current event loop finishes. Explore resources to understand and effectively use setImmediate.",
                  "resources": [
                    {
                      "name": "Understanding setImmediate",
                      "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate"
                    },
                    {
                      "name": "Understanding setImmediate",
                      "link": "https://nodejs.dev/en/learn/understanding-setimmediate/"
                    }
                  ]
                },
                {
                  "name": "process.nextTick()",
                  "recommendation-type": "opinion",
                  "description": "The process.nextTick() function in Node.js is used to defer the execution of a function until the next tick of the event loop. Explore resources to understand and leverage process.nextTick() effectively.",
                  "resources": [
                    {
                      "name": "Understanding Process.NextTick()",
                      "link": "https://nodejs.dev/en/learn/understanding-processnexttick/"
                    },
                    {
                      "name": "The Node.js process.nextTick()",
                      "link": "https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"
                    },
                    {
                      "name": "The process.nextTick Function",
                      "link": "https://www.youtube.com/watch?v=-niA5XOlCWI"
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "Working with Files": {
        "description": "Learn how to programmatically manipulate files in Node.js using the built-in fs module. Explore resources to understand file system operations and interactions.",
        "resources": [
          {
            "name": "How To Work with Files using the fs Module in Node.js",
            "link": "https://www.digitalocean.com/community/tutorials/how-to-work-with-files-using-the-fs-module-in-node-js"
          }
        ],
        "order": 8,
        "options": [
          {
            "name": "process.cwd()",
            "recommendation-type": "opinion",
            "description": "Explore the process.cwd() method in Node.js, which returns the current working directory of the Node.js process. Learn more about its usage and differences compared to __dirname.",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://nodejs.org/api/process.html#processcwd"
              },
              {
                "name": "What's the difference between process.cwd() vs __dirname?",
                "link": "https://stackoverflow.com/questions/9874382/whats-the-difference-between-process-cwd-vs-dirname"
              }
            ]
          },
          {
            "name": "path module",
            "recommendation-type": "opinion",
            "description": "Discover the path module in Node.js, a built-in module providing utilities for working with file and directory paths. Learn how to use it for effective path manipulation.",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://nodejs.org/api/path.html"
              },
              {
                "name": "Path Module in Node.js",
                "link": "https://youtu.be/j95Lwxvi9JY"
              }
            ]
          },
          {
            "name": "Fs module",
            "recommendation-type": "opinion",
            "description": "Understand the File System (fs) module in Node.js, a built-in module that enables interaction with the file system using JavaScript. Explore its functions and use cases.",
            "resources": [
              {
                "name": "Official Documentation",
                "link": "https://nodejs.org/api/fs.html"
              },
              {
                "name": "More about fs module",
                "link": "https://www.w3schools.com/nodejs/nodejs_filesystem.asp"
              },
              {
                "name": "Using fs",
                "link": "https://www.youtube.com/watch?v=ZySsdm576wE"
              }
            ]
          },
          {
            "OpenSource Packages": {
              "options": [
                {
                  "name": "Glob",
                  "recommendation-type": "opinion",
                  "description": "Learn about the glob pattern, commonly used to specify filenames and strings for wildcard matching. Explore its usage and benefits in file matching.",
                  "resources": [
                    {
                      "name": "NPM Glob",
                      "link": "https://www.npmjs.com/package/glob"
                    }
                  ]
                },
                {
                  "name": "Globby",
                  "recommendation-type": "opinion",
                  "description": "Explore Globby, a user-friendly glob matching library based on fast-glob. Learn about its features and how it enhances glob pattern matching in Node.js.",
                  "resources": [
                    {
                      "name": "NPM Globby",
                      "link": "https://www.npmjs.com/package/globby"
                    },
                    {
                      "name": "Github Globby",
                      "link": "https://github.com/sindresorhus/globby"
                    }
                  ]
                },
                {
                  "name": "fs-extra",
                  "recommendation-type": "opinion",
                  "description": "Discover fs-extra, a module that adds file system methods not included in the native fs module. It also adds promise support to fs methods, serving as a drop-in replacement for fs.",
                  "resources": [
                    {
                      "name": "Official Website",
                      "link": "https://www.npmjs.com/package/fs-extra"
                    },
                    {
                      "name": "fs-extra vs fs",
                      "link": "https://ar.al/2021/03/07/fs-extra-to-fs/"
                    }
                  ]
                },
                {
                  "name": "Chokidar",
                  "recommendation-type": "opinion",
                  "description": "Learn about Chokidar, a fast open-source file watcher for Node.js. Explore its capabilities in monitoring file changes and notifying users.",
                  "resources": [
                    {
                      "name": "NPM Docs",
                      "link": "https://www.npmjs.com/package/chokidar"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "__dirname",
            "recommendation-type": "opinion",
            "description": "Understand the usage of __dirname in a Node.js script, which returns the path of the folder where the current JavaScript file resides. Explore its role and learn how to use it effectively.",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://nodejs.org/docs/latest/api/modules.html#__dirname"
              },
              {
                "name": "How to use __dirname",
                "link": "https://www.digitalocean.com/community/tutorials/nodejs-how-to-use__dirname"
              }
            ]
          },
          {
            "name": "__filename",
            "recommendation-type": "opinion",
            "description": "Explore the usage of __filename in Node.js, which returns the filename of the executed code. Understand its purpose and learn how to implement it in a Node.js project.",
            "resources": [
              {
                "name": "Official Docs",
                "link": "https://nodejs.org/docs/latest/api/modules.html#__filename"
              }
            ]
          }
        ]
      },
      "Command Line Applications": {
        "description": "Explore the world of Command Line Applications (CLI) and their significance. Learn how to build CLI applications with Node.js, and discover their applications in automation and tool development.",
        "resources": [
          {
            "name": "Intro To CLI Applications",
            "link": "https://learn.co/lessons/intro-to-cli-applications"
          },
          {
            "name": "Build a Command Line Application with Node.js",
            "link": "https://developer.okta.com/blog/2019/06/18/command-line-app-with-nodejs"
          },
          {
            "name": "5-Minute Node.js CLI Project",
            "link": "https://www.youtube.com/watch?v=_oHByo8tiEY"
          }
        ],
        "order": 9,
        "options": [
          {
            "name": "Environment variables",
            "recommendation-type": "opinion",
            "description": "Learn about environment variables and their role in Node.js applications. Explore resources to understand how to read environment variables in Node.js.",
            "resources": [
              {
                "name": "Reading Environment Variables From Node.js",
                "link": "https://www.geeksforgeeks.org/reading-environment-variables-from-node-js/"
              }
            ],
            "options": [
              {
                "name": "dotenv",
                "recommendation-type": "opinion",
                "description": "Discover dotenv, a zero-dependency module that loads environment variables from a .env file into process.env. Learn about its usage and its alignment with The Twelve-Factor App methodology.",
                "resources": [
                  {
                    "name": "dotenv Docs",
                    "link": "https://github.com/motdotla/dotenv#readme"
                  },
                  {
                    "name": "Dotenv package",
                    "link": "https://www.npmjs.com/package/dotenv"
                  },
                  {
                    "name": "Dotenv tutorial",
                    "link": "https://zetcode.com/javascript/dotenv/"
                  },
                  {
                    "name": "How to Use Node Environment Variables with a DotEnv File for Node.js and npm",
                    "link": "https://www.freecodecamp.org/news/how-to-use-node-environment-variables-with-a-dotenv-file-for-node-js-and-npm/"
                  }
                ]
              },
              {
                "name": "process.env",
                "recommendation-type": "opinion",
                "description": "Understand the global variable process.env in Node.js, which represents the state of system environment variables. Learn how to set and access environment variables during runtime.",
                "resources": [
                  {
                    "name": "Process.env Node",
                    "link": "https://www.knowledgehut.com/blog/web-development/node-environment-variables"
                  },
                  {
                    "name": "Node.js process.env Property",
                    "link": "https://www.geeksforgeeks.org/node-js-process-env-property/"
                  }
                ]
              }
            ]
          },
          {
            "name": "Command line args",
            "recommendation-type": "opinion",
            "description": "Learn how to handle command-line arguments in Node.js scripts. Explore resources, including Node documentation, to enhance your understanding of command-line arguments.",
            "resources": [
              {
                "name": "How To Handle Command-line Arguments in Node.js Scripts",
                "link": "https://www.digitalocean.com/community/tutorials/nodejs-command-line-arguments-node-scripts"
              },
              {
                "name": "Node Documentation",
                "link": "https://nodejs.org/docs/latest/api/process.html#processargv"
              },
              {
                "name": "Command Line Arguments",
                "link": "https://youtu.be/5d7eltp0-xm"
              }
            ],
            "options": [
              {
                "name": "process.argv",
                "recommendation-type": "opinion",
                "description": "Explore process.argv, an array of parameters sent when running a Node.js file or process. Learn how to use it to access command-line arguments and enhance your command-line applications.",
                "resources": [
                  {
                    "name": "Node.js Docs on process.argv",
                    "link": "https://nodejs.org/docs/latest/api/process.html"
                  },
                  {
                    "name": "Node.js process.argv Property",
                    "link": "https://www.geeksforgeeks.org/node-js-process-argv-property/"
                  }
                ]
              },
              {
                "name": "Commander.js",
                "recommendation-type": "opinion",
                "description": "Discover Commander.js, a light-weight, expressive, and powerful command-line framework for Node.js. Learn how to use Commander.js to create your own command-line interface (CLI).",
                "resources": [
                  {
                    "name": "Official Documentation",
                    "link": "https://www.npmjs.com/package/commander"
                  }
                ]
              }
            ]
          },
          {
            "name": "Exiting and exit codes",
            "recommendation-type": "opinion",
            "description": "Explore the process of terminating a Node.js process using the process module. Learn about exit codes and find resources to help you understand the exiting process in Node.js.",
            "resources": [
              {
                "name": "Node.js Docs on exit",
                "link": "https://nodejs.org/docs/latest/api/process.html"
              },
              {
                "name": "How to Exit a Process in Node.js",
                "link": "https://www.knowledgehut.com/blog/web-development/node-js-process-exit"
              }
            ]
          },
          {
            "name": "Printing output",
            "recommendation-type": "opinion",
            "description": "",
            "resources": [],
            "options": [
              {
                "name": "Process stdout",
                "recommendation-type": "opinion",
                "description": "Explore the process.stdout property in Node.js, an API in the process module used for sending data out of a program. Learn about its role as a Writable Stream and its write() method.",
                "resources": [
                  {
                    "name": "process.stdout",
                    "link": "https://nodejs.org/api/process.html#processstdout"
                  }
                ]
              },
              {
                "name": "Process stderr",
                "recommendation-type": "opinion",
                "description": "Understand the process.stderr property in Node.js, an API in the process module that returns a stream connected to stderr. Explore its applications and functionality.",
                "resources": [
                  {
                    "name": "process.stderr",
                    "link": "https://nodejs.org/api/process.html#processstderr"
                  }
                ]
              },
              {
                "name": "Chalk",
                "recommendation-type": "opinion",
                "description": "Discover Chalk, a library for string styling in terminal applications. Learn how to use Chalk to print styled messages to the console, including changing font colors, boldness, opacity, and background.",
                "resources": [
                  {
                    "name": "Chalk Docs",
                    "link": "https://github.com/chalk/chalk#readme"
                  },
                  {
                    "name": "Style Command Line Output with Chalk Package in Node.js",
                    "link": "https://www.positronx.io/style-command-line-output-with-chalk-library-in-node-js/"
                  }
                ]
              },
              {
                "name": "Figlet",
                "recommendation-type": "opinion",
                "description": "Explore Figlet, a package that fully implements the FIGfont spec in JavaScript. Learn about its applications in representing graphical arrangements of characters, both in the browser and with Node.js.",
                "resources": [
                  {
                    "name": "GitHub Repository",
                    "link": "https://github.com/patorjk/figlet.js"
                  }
                ]
              },
              {
                "name": "CLI-Progress",
                "recommendation-type": "opinion",
                "description": "Discover CLI-Progress, a package providing a custom progress bar for CLI applications. Learn how to use CLI-Progress to enhance the user experience in command-line interfaces.",
                "resources": [
                  {
                    "name": "CLI-Progress Documentation",
                    "link": "https://www.npmjs.com/package/cli-progress"
                  }
                ]
              }
            ]
          },
          {
            "name": "Taking input",
            "recommendation-type": "opinion",
            "description": "Explore different ways to take inputs in Node.js, including built-in modules like process.stdin and readline. Discover third-party packages like prompts and Enquirer for a more user-friendly interface.",
            "resources": [
              {
                "name": "How to read from stdin line by line in Node",
                "link": "https://stackoverflow.com/questions/20086849/how-to-read-from-stdin-line-by-line-in-node"
              }
            ],
            "options": [
              {
                "name": "Process stdin",
                "recommendation-type": "opinion",
                "description": "Understand process.stdin, a standard Readable stream in Node.js that listens for user input. Learn about its use in accessing user inputs via the process module and its on() function for handling input events.",
                "resources": [
                  {
                    "name": "Official Documentation",
                    "link": "https://nodejs.org/api/process.html#processstdin"
                  },
                  {
                    "name": "Node.js process.stdin Property",
                    "link": "https://www.geeksforgeeks.org/node-js-process-stdin-property"
                  }
                ]
              },
              {
                "name": "Prompts",
                "recommendation-type": "opinion",
                "description": "Explore Prompts, a user-friendly interface built on top of Node.js's Readline module. Learn about the different types of prompts it supports, such as text, password, autocomplete, date, and more.",
                "resources": [
                  {
                    "name": "Official Documentation",
                    "link": "https://www.npmjs.com/package/prompts"
                  }
                ]
              },
              {
                "name": "Inquirer",
                "recommendation-type": "opinion",
                "description": "Discover Inquirer.js, a collection of common interactive command-line interfaces for taking inputs from users. Learn about its promise-based nature and support for various input types.",
                "resources": [
                  {
                    "name": "Official Docs",
                    "link": "https://github.com/SBoudrias/Inquirer.js#readme"
                  },
                  {
                    "name": "How To Create Interactive Command-line Prompts with Inquirer.js",
                    "link": "https://www.digitalocean.com/community/tutorials/nodejs-interactive-command-line-prompts"
                  },
                  {
                    "name": "How to make a CLI in Node.js with Inquirer",
                    "link": "https://www.youtube.com/watch?v=0xjfkl9nODQ"
                  },
                  {
                    "name": "Create an Interactive Node.js Command Line Tool using Inquirer",
                    "link": "https://egghead.io/lessons/node-js-create-an-interactive-node-js-command-line-tool-using-inquirer"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Working With APIs": {
        "description": "API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other. ",
        "resources": [
          {
            "name": "What is an API?",
            "link": "https://aws.amazon.com/what-is/api/"
          }
        ],
        "order": 10,
        "options": [
          {
            "HTP Server": {
              "options": [
                {
                  "name": "Fastify",
                  "recommendation-type": "opinion",
                  "description": "Explore Fastify, a web framework focused on providing the best developer experience with minimal overhead. Learn about its powerful plugin architecture and find resources for getting started.",
                  "resources": [
                    {
                      "name": "Fastify Website",
                      "link": "https://www.fastify.io/"
                    },
                    {
                      "name": "Fastify Official Documentations",
                      "link": "https://www.fastify.io/docs/latest/"
                    },
                    {
                      "name": "Beginner Fastify Tutorial",
                      "link": "https://www.youtube.com/watch?v=Lk-uVEVGxOA"
                    }
                  ]
                },
                {
                  "name": "NestJS",
                  "recommendation-type": "opinion",
                  "description": "Discover NestJS, a progressive Node.js framework for creating efficient and scalable server-side applications. Explore its features and benefits, and find resources for beginners.",
                  "resources": [
                    {
                      "name": "NestJS Website",
                      "link": "https://nestjs.com/"
                    },
                    {
                      "name": "NestJS Official Documentations",
                      "link": "https://docs.nestjs.com/"
                    },
                    {
                      "name": "Beginner NestJS Tutorial",
                      "link": "https://www.youtube.com/watch?v=GHTA143_b-s"
                    }
                  ]
                },
                {
                  "name": "Express.js",
                  "recommendation-type": "opinion",
                  "description": "Learn about Express.js, a Node.js web application framework with broad features for building web and mobile applications. Explore official resources, guides, and sample projects.",
                  "resources": [
                    {
                      "name": "Express.js Official Website",
                      "link": "https://expressjs.com/"
                    },
                    {
                      "name": "Official Getting Started Guide",
                      "link": "https://expressjs.com/en/starter/installing.html"
                    },
                    {
                      "name": "Express Full Guide",
                      "link": "https://www.tutorialspoint.com/nodejs/nodejs_express_framework.html"
                    },
                    {
                      "name": "Sample Project",
                      "link": "https://auth0.com/blog/create-a-simple-and-stylish-node-express-app/"
                    },
                    {
                      "name": "Express Explained with Examples",
                      "link": "https://www.freecodecamp.org/news/express-explained-with-examples-installation-routing-middleware-and-more/"
                    }
                  ]
                },
                {
                  "name": "Http module",
                  "recommendation-type": "opinion",
                  "description": "Understand the HTTP module in Node.js for making HTTP requests and creating HTTP servers. Explore resources to learn how to create a web server and make API calls with the HTTP module.",
                  "resources": [
                    {
                      "name": "How To Create a Web Server in Node.js with the HTTP Module",
                      "link": "https://www.digitalocean.com/community/tutorials/how-to-create-a-web-server-in-node-js-with-the-http-module"
                    },
                    {
                      "name": "Node.js Http Module",
                      "link": "https://www.geeksforgeeks.org/node-js-http-module/"
                    },
                    {
                      "name": "The Node.js Http Module",
                      "link": "https://nodejs.dev/en/learn/the-nodejs-http-module/"
                    }
                  ]
                }
              ]
            }
          },
          {
            "Making API Calls": {
              "options": [
                {
                  "name": "HTTP module",
                  "recommendation-type": "opinion",
                  "description": "Learn how to make API calls using the HTTP module in Node.js. Explore http.get() and http.request() methods for making GET requests and other types of HTTP requests.",
                  "resources": [
                    {
                      "name": "Node.js http.get() documentation",
                      "link": "https://nodejs.org/docs/latest-v16.x/api/http.html#httpgeturl-options-callback"
                    },
                    {
                      "name": "Node http.request() documentation",
                      "link": "https://nodejs.org/docs/latest-v16.x/api/http.html#httprequesturl-options-callback"
                    },
                    {
                      "name": "How To Create an HTTP Client with Core HTTP in Node.js",
                      "link": "https://www.digitalocean.com/community/tutorials/how-to-create-an-http-client-with-core-http-in-node-js"
                    }
                  ]
                },
                {
                  "name": "Axios",
                  "recommendation-type": "opinion",
                  "description": "Discover Axios, a promise-based HTTP client for Node.js and the browser. Learn how to make requests to web servers using Axios, which supports both server-side and client-side implementations.",
                  "resources": [
                    {
                      "name": "Axios Official Documentations",
                      "link": "https://axios-http.com/docs/intro"
                    },
                    {
                      "name": "Axios Tutorial",
                      "link": "https://www.youtube.com/watch?v=6LyagkoRWYA"
                    }
                  ]
                },
                {
                  "name": "unfetch",
                  "recommendation-type": "opinion",
                  "description": "Explore unfetch, a tiny 500b fetch \"barely-polyfill\". Find resources to understand its usage and how it can be beneficial in handling fetch operations.",
                  "resources": [
                    {
                      "name": "unfetch Docs",
                      "link": "https://github.com/developit/unfetch#readme"
                    }
                  ]
                },
                {
                  "name": "Got",
                  "recommendation-type": "opinion",
                  "description": "Discover Got, a lighter, human-friendly, and powerful HTTP request library designed for Node.js. Explore its features, including pagination, caching, automatic request retries, and more.",
                  "resources": [
                    {
                      "name": "Official Documentation",
                      "link": "https://www.npmjs.com/package/got"
                    },
                    {
                      "name": "How to consume APIs using GOT in Node.js?",
                      "link": "https://rapidapi.com/guides/call-apis-got"
                    }
                  ]
                }
              ]
            }
          },
          {
            "Authentication": {
              "options": [
                {
                  "name": "JSON Web Token",
                  "recommendation-type": "opinion",
                  "description": "Learn about JSON Web Tokens (JWT), an open standard for secure information exchange between a client and a server. Explore resources for understanding and implementing JWTs.",
                  "resources": [
                    {
                      "name": "Package Documentation",
                      "link": "https://www.npmjs.com/package/jsonwebtoken"
                    },
                    {
                      "name": "What is JWT",
                      "link": "https://www.akana.com/blog/what-is-jwt"
                    },
                    {
                      "name": "JWT Implementation",
                      "link": "https://www.youtube.com/watch?v=mbsmsi7l3r4"
                    }
                  ]
                },
                {
                  "name": "Passport.js",
                  "recommendation-type": "opinion",
                  "description": "Discover Passport.js, an authentication middleware for Node.js. Learn how it simplifies the implementation of authentication in Express apps, supporting various strategies for authentication.",
                  "resources": [
                    {
                      "name": "PassportJS Website",
                      "link": "https://www.passportjs.org/"
                    },
                    {
                      "name": "PassportJS Official Documentation",
                      "link": "https://www.passportjs.org/docs/"
                    },
                    {
                      "name": "Implementation of OAuth using passportjs",
                      "link": "https://www.youtube.com/watch?v=sakQbeRjgwg&list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x"
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "Keep App Running": {
        "description": " In Node.js, you need to restart the process to make changes take effect. This adds an extra step to your workflow. You can eliminate this extra step by using nodemon to restart the process automatically.Since Node.js 18.11.0, you can run Node with the --watch flag to reload your app every time a file is changed. So you don’t need to use nodemon anymore.",
        "resources": [
          {
            "name": "Node.js 18.11.0 Changelog.",
            "link": "https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V18.md#18.11.0"
          }
        ],
        "order": 11,
        "options": [
          {
            "name": "Nodemon",
            "recommendation-type": "opinion",
            "description": "Learn about nodemon, a utility for Node.js that automatically restarts the process when changes are made, eliminating the need to manually restart. Discover how to use nodemon to enhance your development workflow.",
            "resources": [
              {
                "name": "How To Restart Your Node.js Apps Automatically with nodemon",
                "link": "https://www.digitalocean.com/community/tutorials/workflow-nodemon"
              }
            ]
          }
        ]
      },
      "Template Engines": {
        "description": "Template engine helps us to create an HTML template with minimal code. Also, it can inject data into HTML template at client side and produce the final HTML.Some examples of template engines in Nodare: NunjucksJade Vash EJSHandlebars HAML",
        "resources": [],
        "order": 12,
        "options": [
          {
            "name": "EJS",
            "recommendation-type": "opinion",
            "description": "Explore EJS, a templating language for Node.js that allows you to generate HTML markup with pure JavaScript. Learn how to embed JavaScript into your HTML templates and find resources for getting started with EJS.",
            "resources": [
              {
                "name": "Ejs website",
                "link": "https://ejs.co/"
              },
              {
                "name": "Ejs Official Documentations",
                "link": "https://ejs.co/#docs"
              },
              {
                "name": "Ejs Official Package",
                "link": "https://www.npmjs.com/package/ejs"
              },
              {
                "name": "Try EJS Online",
                "link": "https://ionicabizau.github.io/ejs-playground/"
              },
              {
                "name": "How to use EJS",
                "link": "https://www.digitalocean.com/community/tutorials/how-to-use-ejs-to-template-your-node-application"
              },
              {
                "name": "Step-by-Step EJS Guide",
                "link": "https://codeforgeek.com/ejs-template-engine-in-nodejs/"
              }
            ]
          },
          {
            "name": "Pug",
            "recommendation-type": "opinion",
            "description": "Discover Pug, a JavaScript template engine influenced by Haml. Learn about its implementation with JavaScript for Node.js and browsers. Find resources for getting started with Pug.",
            "resources": [
              {
                "name": "Getting started with PugJs",
                "link": "https://pugjs.org/api/getting-started.html"
              },
              {
                "name": "How to Build a Node Application Using a Pug Template",
                "link": "https://blog.bitsrc.io/how-to-build-a-node-application-using-a-pug-template-7319ab1bba69?gi=40b338891148"
              },
              {
                "name": "Node.js + Express - Tutorial - PugJS Templating Engine",
                "link": "https://www.youtube.com/watch?v=DSp9ExFw3Ig"
              },
              {
                "name": "Pug.js tutorial",
                "link": "https://zetcode.com/javascript/pugjs/"
              }
            ]
          },
          {
            "name": "Marko",
            "recommendation-type": "opinion",
            "description": "Explore Marko, a fast and lightweight HTML-based templating engine for building dynamic and reactive user interfaces. Learn about its features, including CommonJS module compilation, streaming, and async rendering.",
            "resources": [
              {
                "name": "Marko Documentation",
                "link": "https://markojs.com/docs/guides-overview/"
              }
            ]
          }
        ]
      },
      "What is Database": {
        "description": "A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a database management system (DBMS). ",
        "resources": [],
        "order": 13,
        "options": [
          {
            "name": "Relational",
            "recommendation-type": "opinion",
            "description": "Understand relational databases, which are based on the relational model of data proposed by E. F. Codd. Learn about relational database management systems (RDBMS) and their use of SQL for querying and maintenance.",
            "resources": [],
            "options": [
              {
                "name": "Knex",
                "recommendation-type": "opinion",
                "description": "Explore Knex.js, a 'batteries included' SQL query builder for various databases. Knex.js is designed to be flexible, portable, and enjoyable to use, supporting databases like PostgreSQL, CockroachDB, MSSQL, MySQL, MariaDB, SQLite3, Better-SQLite3, Oracle, and Amazon Redshift.",
                "resources": [
                  {
                    "name": "Knex.js Docs",
                    "link": "https://knexjs.org/"
                  }
                ]
              },
              {
                "name": "TypeORM",
                "recommendation-type": "opinion",
                "description": "Discover TypeORM, an ORM for Node.js that supports multiple platforms and databases. Learn about its features, including Active Record and Data Mapper patterns, and find resources for getting started.",
                "resources": [
                  {
                    "name": "TypeORM Docs",
                    "link": "https://typeorm.io/"
                  },
                  {
                    "name": "TypeORM Crash Course",
                    "link": "https://www.youtube.com/watch?v=JaTbzPcyiOE"
                  }
                ]
              },
              {
                "name": "Sequelize",
                "recommendation-type": "opinion",
                "description": "Explore Sequelize, an easy-to-use and promise-based Node.js ORM tool. Learn about its support for multiple databases, solid transaction support, relations, eager and lazy loading, and more.\nWhat is an ORM ?\nAn ORM is known as Object Relational Mapper. This is a tool or a level of abstraction which maps(converts) data in a relational database into programmatic objects that can be manipulated by a programmer using a programming language(usually an OOP language). ORMs solely exist to map the details between two data sources which due to a mismatch cannot coexist together.",
                "resources": [
                  {
                    "name": "Sequelize Website",
                    "link": "https://sequelize.org/"
                  },
                  {
                    "name": "Sequelize - NPM Package",
                    "link": "https://www.npmjs.com/package/sequelize"
                  },
                  {
                    "name": "Official Sequelize Docs",
                    "link": "https://sequelize.org/docs/v6/getting-started/"
                  },
                  {
                    "name": "Getting started with Sequelize",
                    "link": "https://levelup.gitconnected.com/the-ultimate-guide-to-get-started-with-sequelize-orm-238588d3516e"
                  },
                  {
                    "name": "Sequelize in Node.js",
                    "link": "https://www.geeksforgeeks.org/how-to-use-sequelize-in-node-js/"
                  }
                ]
              },
              {
                "name": "Prisma",
                "recommendation-type": "opinion",
                "description": "Learn about Prisma, an ORM that helps app developers build faster and make fewer errors. Explore its features and how it enhances reliability and visibility when working with databases.",
                "resources": [
                  {
                    "name": "Prisma Website",
                    "link": "https://www.prisma.io/"
                  },
                  {
                    "name": "Prisma Official Documentations",
                    "link": "https://www.prisma.io/docs/"
                  }
                ]
              },
              {
                "name": "Native drivers",
                "recommendation-type": "opinion",
                "description": "Understand NativeDriver, an implementation of the WebDriver API for driving the UI of native applications. Explore its support for various databases, including MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, and Oracle.",
                "resources": []
              }
            ]
          }
        ]
      },
      "Testing": {
        "description": "Software testing is the process of verifying that what we create is doing exactly what we expect it to do. The tests are created to prevent bugs and improve code quality.The two most common testing approaches are unit testing and end-to-end testing. In the first, we examine small snippets of code, in the second, we test an entire user flow. ",
        "resources": [
          {
            "name": "Differences between end-to-end testing and unit testing",
            "link": "https://www.geeksforgeeks.org/difference-between-end-to-end-testing-and-unit-testing/"
          }
        ],
        "order": 14,
        "options": [
          {
            "name": "Jest",
            "recommendation-type": "opinion",
            "description": "Discover Jest, a delightful JavaScript Testing Framework with a focus on simplicity. Learn about its compatibility with various projects and find resources to enhance your testing workflow.",
            "resources": [
              {
                "name": "Jest Website",
                "link": "https://jestjs.io/"
              },
              {
                "name": "Jest Documentation",
                "link": "https://jestjs.io/docs/getting-started"
              }
            ]
          },
          {
            "name": "Mocha",
            "recommendation-type": "opinion",
            "description": "Explore Mocha, an open-source JavaScript test framework for Node.js and browsers. Learn how it simplifies asynchronous testing and its suitability for Behavior Driven Development (BDD).",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://www.npmjs.com/package/mocha"
              },
              {
                "name": "Mocha Documentation",
                "link": "https://mochajs.org/"
              },
              {
                "name": "Mocha Tutorial",
                "link": "https://youtube.com/playlist?list=PLgbtO1Bcz4C-vU0JLfDBsZGbSUdNX4mQ8"
              }
            ]
          },
          {
            "name": "Cypress",
            "recommendation-type": "opinion",
            "description": "Learn about Cypress, a modern front-end testing tool designed for the modern web. Discover how it enables faster, easier, and more reliable tests, and find resources for getting started.",
            "resources": [
              {
                "name": "Cypress Website",
                "link": "https://www.cypress.io/"
              },
              {
                "name": "Cypress Documentation",
                "link": "https://docs.cypress.io/"
              }
            ]
          }
        ]
      },
      "Logging": {
        "description": " Logging is an essential part of understanding the complete application life cycle of the Node.js application. We can much more easily and quickly fix errors by looking at logs throughout the development process, from creating to debugging to designing new features. Error, warn, info, and debug are the four basic logging levels in Node.js. Logging involves persistently collecting information about an application’s runtime behaviour.",
        "resources": [
          {
            "name": "Morgan",
            "recommendation-type": "opinion",
            "description": "Explore Morgan, a Node.js and Express.js middleware for logging HTTP requests and errors. Learn how it simplifies the debugging process and provides flexibility in log message formatting.",
            "resources": [
              {
                "name": "Official Website",
                "link": "https://www.npmjs.com/package/morgan"
              },
              {
                "name": "How to use Morgan|DigitalOcean",
                "link": "https://www.digitalocean.com/community/tutorials/nodejs-getting-started-morgan"
              }
            ]
          },
          {
            "name": "Winston",
            "recommendation-type": "opinion",
            "description": "Discover Winston, a simple and universal logging library for Node.js. Learn about its support for multiple transports, allowing logs to be stored in various locations based on configured levels.",
            "resources": [
              {
                "name": "Winston Website",
                "link": "https://github.com/winstonjs/winston"
              }
            ]
          }
        ],
        "order": 15,
        "options": [
          {
            "name": "Node.js Logging",
            "link": "https://stackify.com/node-js-logging/"
          },
          {
            "name": "Logging best practices",
            "link": "https://blog.appsignal.com/2021/09/01/best-practices-for-logging-in-nodejs.html"
          },
          {
            "name": "Logging",
            "link": "https://stackify.com/node-js-logging/"
          }
        ]
      },
      "Keep your app running": {
        "description": "PM2 lets you run your nodejs scripts forever. In the event that your application crashes, PM2 will also restart it for you. ",
        "resources": [
          {
            "name": "Keep a node application constantly running",
            "link": "https://devtut.github.io/nodejs/keep-a-node-application-constantly-running.html#use-pm2-as-a-process-manager"
          }
        ],
        "order": 16,
        "options": [
          {
            "name": "Pm2",
            "recommendation-type": "opinion",
            "description": "Learn about PM2, a production process manager for Node.js applications with a built-in load balancer. Explore its capabilities in keeping applications alive, reloading them without downtime, and simplifying system admin tasks.",
            "resources": [
              {
                "name": "Pm2 Website",
                "link": "https://pm2.keymetrics.io/"
              },
              {
                "name": "Pm2 Official Documentations",
                "link": "https://pm2.keymetrics.io/docs/usage/quick-start/"
              }
            ]
          },
          {
            "name": "Forever",
            "recommendation-type": "opinion",
            "description": "Explore Forever, a Node.js package designed to ensure continuous running of a given script, even in the event of server crashes or stops. It serves as a CLI tool for managing Node applications and their processes in a production environment.",
            "resources": [
              {
                "name": "Forever package documentation",
                "link": "https://www.npmjs.com/package/forever"
              }
            ]
          },
          {
            "name": "Nohup",
            "recommendation-type": "opinion",
            "description": "Learn about Nohup, a command in Linux systems that prevents processes from hanging up. Discover how it keeps processes running, ignoring the SIGHUP signal even after exiting the shell or terminal.",
            "resources": [
              {
                "name": "Nohup command",
                "link": "https://www.digitalocean.com/community/tutorials/nohup-command-in-linux"
              },
              {
                "name": "geekforgeeks Nohup example",
                "link": "https://www.geeksforgeeks.org/nohup-command-in-linux-with-examples/"
              }
            ]
          }
        ]
      },
      "Threads": {
        "description": " Node.js is a single-threaded language and gives us ways to work parallelly to our main process. Taking note of nowadays multicore system single threading is very memory efficient.",
        "resources": [
          {
            "name": "Single Thread vs Child Process vs Worker Threads vs Clutster in Node.js",
            "link": "https://alvinlal.netlify.app/blog/single-thread-vs-child-process-vs-worker-threads-vs-cluster-in-nodejs"
          }
        ],
        "order": 17,
        "options": [
          {
            "name": "Child Process",
            "recommendation-type": "opinion",
            "description": "Understand the child_process module in Node.js, providing the ability to run child processes with IPC (inter-process communication) by accessing operating system commands. Explore the main methods: child_process.spawn(), child_process.fork(), and child_process.exec().",
            "resources": [
              {
                "name": "Child Process Docs",
                "link": "https://nodejs.org/api/child_process.html#child-process"
              }
            ]
          },
          {
            "name": "Cluster",
            "recommendation-type": "opinion",
            "description": "Discover the Cluster module, allowing easy creation of child processes that run simultaneously on their own single thread. Learn how it helps distribute workloads among application threads.",
            "resources": [
              {
                "name": "Cluster Docs",
                "link": "https://nodejs.org/api/cluster.html#cluster"
              }
            ]
          },
          {
            "name": "Worker Threads",
            "recommendation-type": "opinion",
            "description": "Explore worker threads, continuous parallel threads in Node.js that run and accept messages until explicitly closed or terminated. Learn how worker threads contribute to more efficient applications without creating deadlock situations.",
            "resources": [
              {
                "name": "Worker Threads Docs",
                "link": "https://nodejs.org/api/worker_threads.html#worker-threads"
              }
            ]
          }
        ]
      },
      "streams": {
        "description": "Streams are a type of data handling methods and are used to read, write or transform chunks of data piece by piece without keeping it in memory all at once. There are four types of streams in NodReadable: streams from which data can be read.Writable: streams to which we can write data.Duplex: streams that are both Readable and Writable.Transform: streams that can modify or transform the data as it is wriand read.",
        "resources": [
          {
            "name": "Stream API Official Documentation",
            "link": "https://nodejs.org/api/stream.html"
          },
          {
            "name": "Node.js Streams tutorial",
            "link": "https://www.youtube.com/watch?v=GlybFFMXXmQ"
          },
          {
            "name": "Understanding Streams in Node.js",
            "link": "https://nodesource.com/blog/understanding-streams-in-nodejs"
          }
        ],
        "order": 18,
        "options": []
      },
      "More Debugging": {
        "description": "Debugging is a concept to identify and remove errors from software applications. Here, we will learn about the technique to debug a Node.js application.\nWhy not to use console.log() for debugging?\n Using console.log to debug the code generally dives into an infinite loop of “stopping the app and adding a console.log, and start the app again” operations. Besides slowing down the development of the app, it also makes the writing dirty and creates unnecessary code. Finally, trying to log out variables alongside with the noise of other potential logging operations, may make the process of debugging difficult when attempting to find the values you are debugging.",
        "resources": [],
        "order": 19,
        "options": [
          {
            "name": "Memory Leaks",
            "recommendation-type": "opinion",
            "description": "Understand memory leaks in Node.js, which occur when CPU and memory usage increase over time without apparent reason. Explore the causes, detection, and prevention of memory leaks.",
            "resources": [
              {
                "name": "Memory leaks in Node.js",
                "link": "https://sematext.com/blog/nodejs-memory-leaks/"
              },
              {
                "name": "Memory leaks causes",
                "link": "https://sematext.com/blog/nodejs-memory-leaks/#what-causes-them-common-node-js-memory-leaks"
              },
              {
                "name": "Memory leaks detectors",
                "link": "https://sematext.com/blog/nodejs-memory-leaks/#node-js-memory-leak-detectors"
              }
            ],
            "options": [
              {
                "name": "Garbage Collection",
                "recommendation-type": "opinion",
                "description": "Learn about memory management in JavaScript, where memory is managed automatically. Explore the concept of reachability and how garbage collection helps reclaim memory.",
                "resources": [
                  {
                    "name": "JavaScript Garbage Collection",
                    "link": "https://javascript.info/garbage-collection"
                  },
                  {
                    "name": "Memory Management in JavaScript",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management"
                  }
                ]
              }
            ]
          },
          {
            "name": "Node Inspect",
            "recommendation-type": "opinion",
            "description": "Discover Node.js's built-in DevTools-based debugger, Node Inspect, which allows debugging Node.js applications. Learn how to use Chrome DevTools for debugging.",
            "resources": [
              {
                "name": "Debugging Node.js with Chrome DevTools",
                "link": "https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27"
              }
            ]
          },
          {
            "name": "Using APM",
            "recommendation-type": "opinion",
            "description": "As much fun as it is to intercept your container requests with inspect and step through your code, you won’t have this option in production. This is why it makes a lot of sense to try and debug your application locally in the same way as you would in production.In production, one of your tools would be to login to your remote server to view the console logs, just as you would on local. But this can be a tedious approach. Luckily, there are tools out there that perform what is called log aggregation, such as Stackify.These tools send your logs from your running application into a single location. They often come with high-powered search and query utilities so that you can easily parse your logs and visualize them.",
            "resources": [
              {
                "name": "Debugging using APM",
                "link": "https://stackify.com/node-js-debugging-tips/"
              }
            ]
          }
        ]
      },
      "common modules": {
        "description": "These are the common modules that come with Node.js out of the box. This module provides tools or APIs for performing out certain standard Node.js operations. like interacting with the file system, url parsing, or logging information to the console. ",
        "resources": [
          {
            "name": "Node.js Debugging",
            "link": "https://www.geeksforgeeks.org/node-js-debugging/"
          }
        ],
        "order": 20,
        "options": [
          {
            "name": "Builtin modules",
            "recommendation-type": "opinion",
            "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
            "resources": [
              {
                "name": "API documentation of Built-in modules",
                "link": "https://nodejs.org/api/modules.html"
              },
              {
                "name": "Built-in modules - w3schools",
                "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
              }
            ],
            "options": [
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              },
              {
                "name": "Builtin modules",
                "recommendation-type": "opinion",
                "description": "Discover built-in modules in Node.js, modules that come pre-installed and do not require additional package manager installation. Explore various modules like path: to handle file paths.url: help in parsing URL strings.http: making Node.js transfer data over HTTP.console: to log information in the console.assert: provides a set of assertion tests.process: provides information about, and control over, the current process.cluster: able to creating child processes that runs simultaneously and share the same server portperf_hooks: provides APIs for performance measuremen tcrypto: to handle OpenSSL cryptographic functions.Buffer: provides APIs to handling streams of binary data.DNS: enables name resolution.events: for handling existing events and creating custeventschild_processes: provides the ability to spawn subprocessesREPL: provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications.readline: provides an interface for reading data from a Readable stream one line at a timeutil: supports the needs of Node.js internal APIs.querystring: provides utilities for parsing and formatting URL query strings.string_decoder: provides an API for decoding Buffer objects into strings.tls: provides an implementation of the Transport Layer Security (TLS) and Secure Socket Laye protocol",
                "resources": [
                  {
                    "name": "API documentation of Built-in modules",
                    "link": "https://nodejs.org/api/modules.html"
                  },
                  {
                    "name": "Built-in modules - w3schools",
                    "link": "https://www.w3schools.com/nodejs/ref_modules.asp"
                  }
                ],
                "options": []
              }
            ]
          }
        ]
      },
      "Backend roadmap after Language Selection": {
        "order": 21,
        "name": "Backend Developer ",
        "link": "https://roadmap.sh/backend"
      }
    }
  }
}
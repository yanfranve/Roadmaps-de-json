{
    "Skill": {
        "React": {
            "description": " ",
            "CLI Tools": {
                "description": "Here is the list of most common CLI tools for React development:",
                "resources": [
                    {
                        "name": "create-react-app",
                        "link": "https://create-react-app.dev/"
                    },
                    {
                        "name": "vite",
                        "link": "https://vitejs.dev/"
                    }
                ],
                "order": 1,
                "options": [
                    {
                        "name": "Vite",
                        "recommendation-type": "opinion",
                        "description": "Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects.",
                        "resources": [
                            {
                                "name": "Vite Website",
                                "link": "https://vitejs.dev/"
                            },
                            {
                                "name": "Vite Documentation",
                                "link": "https://vitejs.dev/guide"
                            },
                            {
                                "name": "Vite Crash Course",
                                "link": "https://youtu.be/LQQ3CR2JTX8"
                            },
                            {
                                "name": "Vite Crash Course | Faster Alternative To CRA | 2023",
                                "link": "https://www.youtube.com/watch?v=89NJdbYTgJ8"
                            }
                        ]
                    },
                    {
                        "name": "Create React App",
                        "recommendation-type": "Pick this or purple",
                        "description": "Create React App is the CLI based tool and is the best way to start building a new single-page application in React.It sets up your development environment so that you can use the latest JavaScript features, provides a nice developer experience, and optimizes your app for production. You’ll need to have Node >= 14.0.0 and npm >= 5.6 on your machine.\nVisit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "Official Docs",
                                "link": "https://react.dev/learn/start-a-new-react-project"
                            },
                            {
                                "name": "Advanced: Custom Setup with Webpack",
                                "link": "https://www.robinwieruch.de/minimal-react-webpack-babel-setup/"
                            }
                        ]
                    }
                ]
            },
            "Components": {
                "description": "Components are the building blocks of React applications. They let us split the UI into independent, reusable pieces, and think about each piece in isolation\nVisit the following resources to learn more:",
                "resources": [
                    {
                        "name": "Basic Prompting Guide",
                        "link": "https://learnprompting.org/docs/basics/intro"
                    }
                ],
                "order": 2,
                "options": [
                    {
                        "name": "Class Components",
                        "recommendation-type": "wouidn't",
                        "description": "Components can either be created using the class based approach or a functional approach. These components are simple classes (made up of multiple functions that add functionality to the application). All class based components are child classes for the Component class of ReactJS. Although the class components are supported in React, it is encouraged to write functional components and make use of hooks in modern React applications.",
                        "resources": [
                            {
                                "name": "Components and Props",
                                "link": "https://react.dev/learn/thinking-in-react#props-vs-state"
                            },
                            {
                                "name": "Is There Any Reason to Still Use React Class Components?",
                                "link": "https://medium.com/geekculture/is-there-any-reason-to-still-use-react-class-components-9b6a1e6aa9ef"
                            },
                            {
                                "name": "Functional Components vs Class Components in React",
                                "link": "https://www.freecodecamp.org/news/functional-components-vs-class-components-in-react"
                            },
                            {
                                "name": "Migrate Class Components to Functional Components with Hooks in React",
                                "link": "https://www.robinwieruch.de/react-hooks-migration/"
                            }
                        ]
                    },
                    {
                        "name": "Functional Components",
                        "recommendation-type": "opinion",
                        "description": "Functional components are some of the more common components that you will come across while working in React. These are simply JavaScript functions. We can create a functional component in React by writing a JavaScript function. These functions may or may not receive data as parameters. In functional components, the return value is the JSX code to render to the DOM tree. Functional components can also have state, which is managed using React hooks.",
                        "resources": [
                            {
                                "name": "Functional Components and Props",
                                "link": "https://react.dev/reference/react/Component"
                            },
                            {
                                "name": "Your first component",
                                "link": "https://react.dev/learn/your-first-component"
                            },
                            {
                                "name": "Passing props to a component",
                                "link": "https://react.dev/learn/passing-props-to-a-component"
                            },
                            {
                                "name": "Functional Components in React",
                                "link": "https://www.robinwieruch.de/react-function-component/"
                            }
                        ]
                    },
                    {
                        "Components Basics": {
                            "options": [
                                {
                                    "name": "JSX",
                                    "recommendation-type": "opinion",
                                    "description": "JSX stands for JavaScript XML. It allows writing HTML in JavaScript and converts the HTML tags into React elements.",
                                    "resources": [
                                        {
                                            "name": "Writing markup with JSX",
                                            "link": "https://react.dev/learn/writing-markup-with-jsx"
                                        },
                                        {
                                            "name": "JavaScript in JSX with Curly Braces",
                                            "link": "https://react.dev/learn/javascript-in-jsx-with-curly-braces"
                                        },
                                        {
                                            "name": "JSX in React - Explained with Examples",
                                            "link": "https://www.freecodecamp.org/news/jsx-in-react-introduction/"
                                        },
                                        {
                                            "name": "JSX in React on w3school",
                                            "link": "https://www.w3schools.com/react/react_jsx.asp"
                                        }
                                    ]
                                },
                                {
                                    "name": "Props vs State",
                                    "recommendation-type": "opinion",
                                    "description": "Props (short for 'properties') and state are both plain JavaScript objects. While both hold information that influences the output of component render, they are different in one important way: props get passed to the component (similar to function parameters) whereas state is managed within the component (similar to variables declared within a function).",
                                    "resources": [
                                        {
                                            "name": "State: A Component’s Memory",
                                            "link": "https://react.dev/learn/state-a-components-memory"
                                        },
                                        {
                                            "name": "How to use Props in React",
                                            "link": "https://www.robinwieruch.de/react-pass-props-to-component/"
                                        },
                                        {
                                            "name": "What is the difference between state and props in React?",
                                            "link": "https://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react"
                                        },
                                        {
                                            "name": "How to update state from props in React",
                                            "link": "https://www.robinwieruch.de/react-derive-state-props/"
                                        }
                                    ]
                                },
                                {
                                    "name": "Conditional Rendering",
                                    "recommendation-type": "opinion",
                                    "description": "In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application. Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and let React update the UI to match them.",
                                    "resources": [
                                        {
                                            "name": "Conditional Rendering",
                                            "link": "https://react.dev/learn/conditional-rendering"
                                        },
                                        {
                                            "name": "Different techniques for conditional rendering in React",
                                            "link": "https://www.robinwieruch.de/conditional-rendering-react/"
                                        }
                                    ]
                                },
                                {
                                    "name": "Composition vs Inheritance",
                                    "recommendation-type": "opinion",
                                    "description": "React has a powerful composition model, and it is recommended to use composition instead of inheritance to reuse code between components.",
                                    "resources": [
                                        {
                                            "name": "Composition vs Inheritance",
                                            "link": "https://reactjs.org/docs/composition-vs-inheritance.html"
                                        },
                                        {
                                            "name": "How to perform component composition in React",
                                            "link": "https://www.robinwieruch.de/react-component-composition/"
                                        },
                                        {
                                            "name": "Achieving Reusability With React Composition",
                                            "link": "https://formidable.com/blog/2021/react-composition/"
                                        },
                                        {
                                            "name": "Passing JSX as children",
                                            "link": "https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Rendering": {
                "description": "React follows a declarative approach to rendering components, which means that developers specify what a component should look like, and React takes care of rendering the component to the screen. This is in contrast to an imperative approach, where developers would write code to manually manipulate the DOM (Document Object Model) to update the UI. The virtual DOM (VDOM) is an important aspect of how React works, and it is used to optimize the rendering of components in a React application.",
                "resources": [
                    {
                        "name": "React.js under the Hood",
                        "link": "https://www.freecodecamp.org/news/react-under-the-hood/"
                    }
                ],
                "order": 3,
                "options": [
                    {
                        "name": "Component Life Cycle",
                        "recommendation-type": "opinion",
                        "description": "React components have a lifecycle consisting of three phases: Mounting, Updating, and Unmounting, along with several 'lifecycle methods' that you can override to run code at particular times in the process. It is not recommended to use lifecycle methods manually. Instead, use the useEffect hook with functional components.",
                        "resources": [
                            {
                                "name": "Class Component",
                                "link": "https://react.dev/reference/react/Component"
                            },
                            {
                                "name": "Lifecycle of Reactive Effects",
                                "link": "https://react.dev/learn/lifecycle-of-reactive-effects"
                            }
                        ]
                    },
                    {
                        "name": "Lists and Keys",
                        "recommendation-type": "opinion",
                        "description": "When you render lists in React, you can use the key prop to specify a unique key for each item. This key is used to identify which item to update when you want to update a specific item.",
                        "resources": [
                            {
                                "name": "Lists and Keys",
                                "link": "https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key"
                            },
                            {
                                "name": "Rendering Lists",
                                "link": "https://react.dev/learn/rendering-lists"
                            },
                            {
                                "name": "List components in React by Example",
                                "link": "https://www.robinwieruch.de/react-list-component/"
                            },
                            {
                                "name": "Why do we need the key prop in React?",
                                "link": "https://www.robinwieruch.de/react-list-key/"
                            }
                        ]
                    },
                    {
                        "name": "Render Props",
                        "recommendation-type": "opinion",
                        "description": "The term ‘render props’ refers to a technique for sharing code between React components using a prop whose value is a function. A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.",
                        "resources": [
                            {
                                "name": "Render Props in React",
                                "link": "https://react.dev/learn/passing-props-to-a-component"
                            },
                            {
                                "name": "How to create a Render Prop Component",
                                "link": "https://www.robinwieruch.de/react-render-props/"
                            },
                            {
                                "name": "Render Props Pattern",
                                "link": "https://www.patterns.dev/posts/render-props-pattern/"
                            }
                        ]
                    },
                    {
                        "name": "Refs",
                        "recommendation-type": "opinion",
                        "description": "Refs provide a way to access DOM nodes or React elements created in the render method. In the typical React dataflow, props are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.",
                        "resources": [
                            {
                                "name": "Referencing Values with Refs",
                                "link": "https://react.dev/learn/referencing-values-with-refs"
                            },
                            {
                                "name": "Manipulating the DOM with Refs",
                                "link": "https://react.dev/learn/manipulating-the-dom-with-refs"
                            },
                            {
                                "name": "Examples of using refs in React",
                                "link": "https://www.robinwieruch.de/react-ref/"
                            },
                            {
                                "name": "The Complete Guide to useRef() and Refs in React",
                                "link": "https://dmitripavlutin.com/react-useref-guide/"
                            },
                            {
                                "name": "Learn useRef in 11 Minutes - Web Dev Simplified",
                                "link": "https://www.youtube.com/watch?v=t2ypzz6gJm0"
                            }
                        ]
                    },
                    {
                        "name": "Events",
                        "recommendation-type": "opinion",
                        "description": "Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:\n\n- React events are named using camelCase, rather than lowercase.\n- With JSX you pass a function as the event handler, rather than a string.",
                        "resources": [
                            {
                                "name": "Responding to Events",
                                "link": "https://react.dev/learn/responding-to-events"
                            },
                            {
                                "name": "React Event Object (Synthetic Event)",
                                "link": "https://react.dev/reference/react-dom/components/common#react-event-object"
                            },
                            {
                                "name": "React Event Handler",
                                "link": "https://www.robinwieruch.de/react-event-handler/"
                            }
                        ]
                    },
                    {
                        "name": "High Order Components",
                        "recommendation-type": "opinion",
                        "description": "A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature. Concretely, a higher-order component is a function that takes a component and returns a new component. Higher-order components are not commonly used in modern React code. In order to reuse logic, React hooks are mainly used now.",
                        "resources": [
                            {
                                "name": "High-Order Components",
                                "link": "https://reactjs.org/docs/higher-order-components.html"
                            },
                            {
                                "name": "How to create a Higher-Order Component",
                                "link": "https://www.robinwieruch.de/react-higher-order-components/"
                            }
                        ]
                    }
                ]
            },
            "Hooks": {
                "description": "Hooks were introduced in React 16.8 and they let us use React’s features, like managing your component's state and performing an after effect when certain changes occur in state(s) without writing a class.",
                "resources": [
                    {
                        "name": "Hooks Reference",
                        "link": "https://react.dev/reference/react"
                    }
                ],
                "order": 4,
                "options": [
                    {
                        "Basics Hooks ": {
                            "description": "Hooks were introduced in React 16.8 and they let us use React’s features, like managing your component's state and performing an after effect when certain changes occur in state(s) without writing a class.",
                            "resources": [
                                {
                                    "name": "Hooks Reference",
                                    "link": "https://react.dev/reference/react"
                                }
                            ],
                            "options": [
                                {
                                    "name": "useState Hook",
                                    "recommendation-type": "opinion",
                                    "description": "useState hook is used to manage the state of a component in functional components. Calling useState returns an array with two elements: the current state value and a function to update the state.",
                                    "resources": [
                                        {
                                            "name": "Using the State Hook",
                                            "link": "https://react.dev/reference/react/useState"
                                        },
                                        {
                                            "name": "React useState Hook by Example",
                                            "link": "https://www.robinwieruch.de/react-usestate-hook/"
                                        }
                                    ]
                                },
                                {
                                    "name": "useEffect Hook",
                                    "recommendation-type": "opinion",
                                    "description": "useEffect is a special hook that lets you run side effects in React. It is similar to componentDidMount and componentDidUpdate, but it only runs when the component (or some of its props) changes and during the initial mount.",
                                    "resources": [
                                        {
                                            "name": "Using the Effect Hook",
                                            "link": "https://react.dev/reference/react/useEffect"
                                        },
                                        {
                                            "name": "React useEffect Hook by Example",
                                            "link": "https://www.robinwieruch.de/react-useeffect-hook/"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "Common Hooks ": {
                            "description": "Hooks were introduced in React 16.8 and they let us use React’s features, like managing your component's state and performing an after effect when certain changes occur in state(s) without writing a class.",
                            "resources": [
                                {
                                    "name": "Hooks Reference",
                                    "link": "https://react.dev/reference/react"
                                }
                            ],
                            "options": [
                                {
                                    "name": "useState Hook",
                                    "recommendation-type": "opinion",
                                    "description": "useState hook is used to manage the state of a component in functional components. Calling useState returns an array with two elements: the current state value and a function to update the state.",
                                    "resources": [
                                        {
                                            "name": "Using the State Hook",
                                            "link": "https://react.dev/reference/react/useState"
                                        },
                                        {
                                            "name": "React useState Hook by Example",
                                            "link": "https://www.robinwieruch.de/react-usestate-hook/"
                                        }
                                    ]
                                },
                                {
                                    "name": "useEffect Hook",
                                    "recommendation-type": "opinion",
                                    "description": "useEffect is a special hook that lets you run side effects in React. It is similar to componentDidMount and componentDidUpdate, but it only runs when the component (or some of its props) changes and during the initial mount.",
                                    "resources": [
                                        {
                                            "name": "Using the Effect Hook",
                                            "link": "https://react.dev/reference/react/useEffect"
                                        },
                                        {
                                            "name": "React useEffect Hook by Example",
                                            "link": "React useEffect Hook by Exam"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Routers": {
                "description": "Routing is an essential concept in Single Page Applications (SPA). When your application is divided into separated logical sections, and all of them are under their own URL, your users can easily share links among each other.",
                "resources": [
                    {
                        "name": "How to use Routing in React JS: A Comprehensive Guide",
                        "link": "https://teachingbee.in/how-to-use-routing-in-react-js/"
                    },
                    {
                        "name": "React Router 6 - Tutorial for Beginners",
                        "link": "https://www.youtube.com/watch?v=59IXY5IDrBA"
                    }
                ],
                "order": 5,
                "options": [
                    {
                        "name": "React Router",
                        "recommendation-type": "opinion",
                        "description": "React Router is the most famous library when it comes to implementing routing in React applications.",
                        "resources": [
                            {
                                "name": "React Router — Official Website",
                                "link": "https://reactrouter.com/"
                            },
                            {
                                "name": "Getting Started Guide",
                                "link": "https://reactrouter.com/en/main/start/tutorial"
                            },
                            {
                                "name": "React Router v6 in 1 hour",
                                "link": "https://youtu.be/0cSVuySEB0A"
                            },
                            {
                                "name": "How to use React Router v6",
                                "link": "https://www.robinwieruch.de/react-router/"
                            },
                            {
                                "name": "React Router Cheat Sheet",
                                "link": "https://stackdiary.com/guides/react-router-cheat-sheet-reference/"
                            }
                        ]
                    },
                    {
                        "name": "Reach Router",
                        "recommendation-type": "Pick this or purple",
                        "description": "Reach Router is a small, simple router for React that borrows from React Router, Ember, and Preact Router. Reach Router has a small footprint, supports only simple route patterns by design, and has strong (but experimental) accessibility features.",
                        "resources": [
                            {
                                "name": "Reach Router — Official Website",
                                "link": "https://reach.tech/router/"
                            },
                            {
                                "name": "Getting Started Guide",
                                "link": "https://reach.tech/router/tutorial/01-intro"
                            }
                        ]
                    }
                ]
            },
            "State Management": {
                "description": "Application state management is the process of maintaining knowledge of an application’s inputs across multiple related data flows that form a complete business transaction — or a session — to understand the condition of the app at any given moment. In computer science, an input is information put into the program by the user, and state refers to the condition of an application according to its stored inputs — saved as variables or constants. State can also be described as the collection of preserved information that forms a complete session.",
                "resources": [
                    {
                        "name": "What is State Management?",
                        "link": "https://www.techtarget.com/searchapparchitecture/definition/state-management"
                    },
                    {
                        "name": "Overview of State in React",
                        "link": "https://www.robinwieruch.de/react-state/"
                    }
                ],
                "order": 6,
                "options": [
                    {
                        "name": "Context",
                        "recommendation-type": "opinion",
                        "description": "Context provides a way to pass data through the component tree without having to pass props down manually at every level. In a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.",
                        "resources": [
                            {
                                "name": "Passing Data Deeply with Context",
                                "link": "https://react.dev/learn/passing-data-deeply-with-context"
                            },
                            {
                                "name": "State with useContext and useState/useReducer",
                                "link": "https://www.robinwieruch.de/react-state-usereducer-usestate-usecontext/"
                            }
                        ]
                    },
                    {
                        "name": "Zustand",
                        "recommendation-type": "opinion",
                        "description": "Zustand is a small, fast, and scalable barebones state-management solution using simplified flux principles. It has a comfy API based on hooks, isn’t boilerplatey or opinionated. Zustand is often used as an alternative to other state management libraries, such as Redux and MobX, because of its simplicity and small size. It is particularly well-suited for small to medium-sized applications, where the complexity of larger state management libraries is not required.",
                        "resources": [
                            {
                                "name": "Zustand - Official Website",
                                "link": "https://github.com/pmndrs/zustand"
                            },
                            {
                                "name": "Working with Zustand",
                                "link": "https://tkdodo.eu/blog/working-with-zustand"
                            },
                            {
                                "name": "Zustand - Official Documentation",
                                "link": "https://docs.pmnd.rs/zustand/getting-started/introduction"
                            },
                            {
                                "name": "pmndrs/zustand",
                                "link": "https://github.com/pmndrs/zustand"
                            }
                        ]
                    },
                    {
                        "name": "Redux",
                        "recommendation-type": "Pick this or purple",
                        "description": "Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time-traveling debugger. Redux Toolkit (RTK) is a library for managing state in JavaScript applications. It is an opinionated set of tools and utilities for building Redux applications and is designed to make it easier and faster to build Redux applications. RTK is often used as an alternative to writing Redux applications from scratch, as it provides a set of conventions and utilities that can make it easier and faster to build Redux applications.",
                        "resources": [
                            {
                                "name": "Redux Toolkit - ReduxJS",
                                "link": "https://redux-toolkit.js.org/"
                            },
                            {
                                "name": "Official Website",
                                "link": "https://redux.js.org/"
                            },
                            {
                                "name": "Official Getting Started to Redux",
                                "link": "https://redux.js.org/introduction/getting-started"
                            },
                            {
                                "name": "Redux Toolkit Official Website",
                                "link": "https://redux-toolkit.js.org/"
                            },
                            {
                                "name": "Official Tutorial to Learn Redux",
                                "link": "https://redux.js.org/tutorials/essentials/part-1-overview-concepts"
                            },
                            {
                                "name": "Fundamentals of Redux Course from Dan Abramov",
                                "link": "https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867"
                            },
                            {
                                "name": "Redux Tutorial - Beginner to Advanced",
                                "link": "https://youtube.com/watch?v=zrs7u6bdbUw"
                            }
                        ]
                    },
                    {
                        "name": "MobX",
                        "recommendation-type": "Pick this or purple",
                        "description": "MobX is an open source state management tool. MobX, a simple, scalable, and standalone state management library, follows functional reactive programming (FRP) implementation and prevents inconsistent state by ensuring that all derivations are performed automatically.",
                        "resources": [
                            {
                                "name": "MobX Official Website",
                                "link": "https://mobx.js.org/"
                            },
                            {
                                "name": "Intro to MobX Tutorial",
                                "link": "https://www.youtube.com/watch?v=WQQq1QbYlAw"
                            }
                        ]
                    },
                    {
                        "name": "Events",
                        "recommendation-type": "Pick this or purple",
                        "description": "Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:\n\n- React events are named using camelCase, rather than lowercase.\n- With JSX you pass a function as the event handler, rather than a string.",
                        "resources": [
                            {
                                "name": "Responding to Events",
                                "link": "Responding to Events"
                            },
                            {
                                "name": "React Event Object (Synthetic Event)",
                                "link": "https://react.dev/reference/react-dom/components/common#react-event-object"
                            },
                            {
                                "name": "React Event Handler",
                                "link": "https://www.robinwieruch.de/react-event-handler/"
                            }
                        ]
                    }
                ]
            },
            "Styling": {
                "description": "While 'CSS in JS' is the most predominant way of styling modern frontend applications, there are several different ways to style your React applications, whether it is vanilla CSS, CSS Modules, or CSS in JS, etc., and each has several frameworks available.",
                "resources": [
                    {
                        "name": "Ways to CSS style a React application",
                        "link": "https://www.robinwieruch.de/react-css-styling/"
                    }
                ],
                "order": 7,
                "options": [
                    {
                        "name": "Emotion",
                        "recommendation-type": "Pick this or purple",
                        "description": "Emotion is a library designed for writing CSS styles with JavaScript. It provides powerful and predictable style composition in addition to a great developer experience with features such as source maps, labels, and testing utilities. Both string and object styles are supported.",
                        "resources": [
                            {
                                "name": "Official Website and Docs",
                                "link": "https://emotion.sh/docs/introduction"
                            },
                            {
                                "name": "Styled components using emotion in React",
                                "link": "https://www.youtube.com/watch?v=yO3JU2bMLGA"
                            }
                        ]
                    },
                    {
                        "name": "Styled components",
                        "recommendation-type": "Pick this or purple",
                        "description": "Styled-components is a CSS-in-JS library that enables you to write regular CSS and attach it to JavaScript components. With styled-components, you can use the CSS you're already familiar with instead of having to learn a new styling structure.",
                        "resources": [
                            {
                                "name": "Official Website",
                                "link": "https://styled-components.com/"
                            },
                            {
                                "name": "Official Docs",
                                "link": "https://styled-components.com/docs"
                            },
                            {
                                "name": "Styled Components Crash Course & Project",
                                "link": "https://www.youtube.com/watch?v=02zO0hZmwnw"
                            },
                            {
                                "name": "Best Practices for Styled Components",
                                "link": "https://www.robinwieruch.de/styled-components/"
                            }
                        ]
                    },
                    {
                        "name": "Tailwind CSS",
                        "recommendation-type": "opinion",
                        "description": "CSS Framework that provides atomic CSS classes to help you style components e.g. flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.",
                        "resources": [
                            {
                                "name": "Tailwhttps://tailwindcss.com/ind Website",
                                "link": "INSERT_TAILWIND_WEBSITE_LINK_HERE"
                            },
                            {
                                "name": "Tailwind CSS Full Course for Beginners",
                                "link": "https://www.youtube.com/watch?v=lCxcTsOHrjo"
                            },
                            {
                                "name": "Tailwind CSS Crash Course",
                                "link": "https://www.youtube.com/watch?v=UBOj6rqRUME"
                            },
                            {
                                "name": "Should You Use Tailwind CSS?",
                                "link": "https://www.youtube.com/watch?v=hdGsFpZ0J2E"
                            },
                            {
                                "name": "Official Screencasts",
                                "link": "https://www.youtube.com/c/TailwindLabs/videos"
                            }
                        ]
                    },
                    {
                        "name": "Material UI",
                        "recommendation-type": "opinion",
                        "description": "Material-UI is an open-source framework that features React components that implement Google's Material Design.",
                        "resources": [
                            {
                                "name": "Official Website",
                                "link": "https://mui.com/"
                            },
                            {
                                "name": "Official Documentation",
                                "link": "https://mui.com/getting-started/installation/"
                            },
                            {
                                "name": "Material UI React Tutorial",
                                "link": "https://www.youtube.com/watch?v=vyJU9efvUtQ"
                            }
                        ]
                    },
                    {
                        "name": "Mantine",
                        "recommendation-type": "Pick this or purple",
                        "description": "Mantine is a React components library with more than 100 customizable components and 40 hooks to cover you in any situation.",
                        "resources": [
                            {
                                "name": "Mantine Website",
                                "link": "https://mantine.dev/"
                            },
                            {
                                "name": "Usage with Create React App",
                                "link": "https://mantine.dev/guides/cra/"
                            },
                            {
                                "name": "5 Mantine Hooks for UI management",
                                "link": "https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/"
                            }
                        ]
                    },
                    {
                        "name": "Chakra UI",
                        "recommendation-type": "Pick this or purple",
                        "description": "Chakra UI is a simple, modular and accessible component library that gives you the building blocks you need to build your React applications.",
                        "resources": [
                            {
                                "name": "Chakra UI Website",
                                "link": "https://chakra-ui.com/"
                            },
                            {
                                "name": "Chakra UI Official Getting Started",
                                "link": "https://chakra-ui.com/docs/getting-started"
                            },
                            {
                                "name": "Build a Modern User Interface with Chakra UI",
                                "link": "https://egghead.io/courses/build-a-modern-user-interface-with-chakra-ui-fac68106"
                            },
                            {
                                "name": "Official Getting Started Video",
                                "link": "https://youtu.be/wI2vqXsjsIo"
                            },
                            {
                                "name": "Chakra UI Crash Course",
                                "link": "https://youtu.be/s-bIsz-NR3c"
                            },
                            {
                                "name": "Why You Should Start Using Chakra UI",
                                "link": "Why You Should Start Using Chakra UI "
                            }
                        ]
                    },
                    {
                        "name": "CSS Modules",
                        "recommendation-type": "Pick this or purple",
                        "description": "CSS files in which all class names and animation names are scoped locally by default.",
                        "resources": [
                            {
                                "name": "Project GitHub Repository",
                                "link": "https://github.com/css-modules/css-modules"
                            },
                            {
                                "name": "Using CSS Modules In React App",
                                "link": "https://medium.com/@ralph1786/using-css-modules-in-react-app-c2079eadbb87"
                            },
                            {
                                "name": "CSS Modules: Why are they great?",
                                "link": "https://www.youtube.com/watch?v=pKMWU9OrA2s"
                            }
                        ]
                    }
                ]
            },
            "API Calls": {
                "description": "APIs, short for Application Programming Interfaces, are software-to-software interfaces. Meaning, they allow different applications to talk to each other and exchange information or functionality. This allows businesses to access another business’s data, piece of code, software, or services in order to extend the functionality of their own products — all while saving time and money. There are several options available to make API calls from your React.js applications.",
                "resources": [
                    {
                        "name": "AJAX and APIs",
                        "link": "https://reactjs.org/docs/faq-ajax.html"
                    },
                    {
                        "name": "How to fetch data in React",
                        "link": "https://www.robinwieruch.de/react-hooks-fetch-data/"
                    }
                ],
                "order": 8,
                "options": [
                    {
                        "Rest": {
                            "options": [
                                {
                                    "name": "SWR",
                                    "recommendation-type": "opinion",
                                    "description": "SWR is a React Hooks library for data fetching. The name “SWR” is derived from stale-while-revalidate, a cache invalidation strategy popularized by HTTP RFC 5861. SWR first returns the data from cache (stale), then sends the request (revalidate), and finally comes with the up-to-date data again. With just one hook, you can significantly simplify the data fetching logic in your project.",
                                    "resources": [
                                        {
                                            "name": "SWR: React Hooks for Data Fetching",
                                            "link": "https://swr.vercel.app/"
                                        }
                                    ]
                                },
                                {
                                    "name": "React Query",
                                    "recommendation-type": "opinion",
                                    "description": "Powerful asynchronous state management, server-state utilities and data fetching for TS/JS, React, Solid, Svelte and Vue.",
                                    "resources": [
                                        {
                                            "name": "TanStack Query",
                                            "link": "https://github.com/TanStack/query"
                                        },
                                        {
                                            "name": "React Query in 100 Seconds",
                                            "link": "https://www.youtube.com/watch?v=novnyCaa7To"
                                        },
                                        {
                                            "name": "React Query Tutorial for Beginners - Complete Playlist",
                                            "link": "https://www.youtube.com/playlist?list=PLC3y8-rFHvwjTELCrPrcZlo6blLBUspd2"
                                        }
                                    ]
                                },
                                {
                                    "name": "Axios",
                                    "recommendation-type": "Pick this or purple",
                                    "description": "Visit the following resources to learn more:",
                                    "resources": [
                                        {
                                            "name": "How to Use Axios with React",
                                            "link": "https://www.freecodecamp.org/news/how-to-use-axios-with-react/"
                                        }
                                    ]
                                },
                                {
                                    "name": "Superagent",
                                    "recommendation-type": "Pick this or purple",
                                    "description": "Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features",
                                    "resources": [
                                        {
                                            "name": "Official Website",
                                            "link": "https://visionmedia.github.io/superagent/"
                                        },
                                        {
                                            "name": "GitHub Repository",
                                            "link": "https://github.com/visionmedia/superagent"
                                        }
                                    ]
                                },
                                {
                                    "name": "rtk-query",
                                    "recommendation-type": "Pick this or purple",
                                    "description": "RTK Query is a data fetching and caching tool that is included in the Redux Toolkit package. It is designed to simplify common use cases for fetching data, including caching, polling, and invalidation.",
                                    "resources": [
                                        {
                                            "name": "RTK Query - Official Website",
                                            "link": "https://redux-toolkit.js.org/rtk-query/overview"
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "GraphQL": {
                            "options": [
                                {
                                    "name": "urql",
                                    "recommendation-type": "Pick this or purple",
                                    "description": "urql (Universal React Query Library) is a library for managing GraphQL data in React applications. It is developed and maintained by Formidable Labs and is available as open-source software. urql is designed to be easy to use and flexible, with a simple API for performing GraphQL queries and mutations. It is often used as an alternative to other GraphQL libraries, such as Apollo Client, because of its simplicity and lightweight size. It is particularly well-suited for small to medium-sized React applications where the complexity of other GraphQL libraries may not be required.",
                                    "resources": [
                                        {
                                            "name": "urql - Formidable Labs",
                                            "link": "https://formidable.com/open-source/urql/"
                                        }
                                    ]
                                },
                                {
                                    "name": "Relay",
                                    "recommendation-type": "Pick this or purple",
                                    "description": "Relay is a JavaScript client used in the browser to fetch GraphQL data. It’s a JavaScript framework developed by Facebook for managing and fetching data in React applications. It is built with scalability in mind in order to power complex applications like Facebook. The ultimate goal of GraphQL and Relay is to deliver instant UI-response interactions.",
                                    "resources": [
                                        {
                                            "name": "Official Website",
                                            "link": "https://relay.dev/"
                                        },
                                        {
                                            "name": "Introduction to Relay modern",
                                            "link": "https://relay.dev/docs/"
                                        }
                                    ]
                                },
                                {
                                    "name": "Apollo",
                                    "recommendation-type": "opinion",
                                    "description": "Apollo is a platform for building a unified graph, a communication layer that helps you manage the flow of data between your application clients (such as web and native apps) and your back-end services.",
                                    "resources": [
                                        {
                                            "name": "Apollo Website",
                                            "link": "https://www.apollographql.com/"
                                        },
                                        {
                                            "name": "Official Docs",
                                            "link": "https://www.apollographql.com/docs/"
                                        },
                                        {
                                            "name": "Official YouTube Channel",
                                            "link": "https://www.youtube.com/c/ApolloGraphQL/"
                                        },
                                        {
                                            "name": "GraphQL With React Tutorial - Apollo Client",
                                            "link": "https://www.youtube.com/watch?v=YyUWW04HwKY"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Testing": {
                "description": "A key to building software that meets requirements without defects is testing. Software testing helps developers know they are building the right software. When tests are run as part of the development process (often with continuous integration tools), they build confidence and prevent regressions in the code.",
                "resources": [
                    {
                        "name": "What is Software Testing?",
                        "link": "https://www.guru99.com/software-testing-introduction-importance.html"
                    },
                    {
                        "name": "Testing Pyramid",
                        "link": "https://www.browserstack.com/guide/testing-pyramid-for-test-automation"
                    }
                ],
                "order": 9,
                "options": [
                    {
                        "name": "React Testing Library",
                        "recommendation-type": "opinion",
                        "description": "The React Testing Library is a very lightweight solution for testing React components. It provides light utility functions on top of react-dom and react-dom/test-utils, in a way that encourages better testing practices. Its primary guiding principle is: The more your tests resemble the way your software is used, the more confidence they can give you.",
                        "resources": [
                            {
                                "name": "React Testing Library",
                                "link": "https://testing-library.com/docs/react-testing-library/intro/"
                            },
                            {
                                "name": "How to use React Testing Library",
                                "link": "https://www.robinwieruch.de/react-testing-library/"
                            }
                        ]
                    },
                    {
                        "name": "Jest",
                        "recommendation-type": "opinion",
                        "description": "Jest is a delightful JavaScript Testing Framework with a focus on simplicity. It works with projects using: Babel, TypeScript, Node, React, Angular, Vue, and more!",
                        "resources": [
                            {
                                "name": "Jest Website",
                                "link": "https://jestjs.io/"
                            }
                        ]
                    },
                    {
                        "name": "Vitest",
                        "recommendation-type": "Pick this or purple",
                        "description": "Vitest is a fast Vite-native unit test framework with out-of-box ESM, TypeScript, and JSX support. Works on React, Vue, Svelte, and more projects created with Vite",
                        "resources": [
                            {
                                "name": "Vitest Website",
                                "link": "https://vitest.dev/"
                            },
                            {
                                "name": "Testing with Vitest",
                                "link": "https://www.youtube.com/watch?v=cM_AeQHzlGg"
                            }
                        ]
                    },
                    {
                        "name": "Cypress",
                        "recommendation-type": "Pick this or purple",
                        "description": "Cypress framework is a JavaScript-based end-to-end testing framework built on top of Mocha – a feature-rich JavaScript test framework running on and in the browser, making asynchronous testing simple and convenient. It also uses a BDD/TDD assertion library and a browser to pair with any JavaScript testing framework.",
                        "resources": [
                            {
                                "name": "Official Website",
                                "link": "https://www.cypress.io/"
                            },
                            {
                                "name": "Official Documentation",
                                "link": "https://docs.cypress.io/guides/overview/why-cypress#Other"
                            },
                            {
                                "name": "Cypress End-to-End Testing",
                                "link": "https://www.youtube.com/watch?v=7N63cMKosIE"
                            }
                        ]
                    },
                    {
                        "name": "Playwright",
                        "recommendation-type": "opinion",
                        "description": "Playwright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari. Playwright leverages the DevTools protocol to write powerful, stable automated tests. Playwright can actually see into and control the browser rather than relying on a middle translation layer, it allows for the simulation of more insightful and relevant user scenarios.",
                        "resources": [
                            {
                                "name": "Official Website: Playwright",
                                "link": "https://playwright.dev/"
                            },
                            {
                                "name": "Playwright Tutorial",
                                "link": "https://www.browserstack.com/guide/playwright-tutorial"
                            }
                        ]
                    }
                ]
            },
            "Frameworks": {
                "description": "Server-side rendering (SSR) is a technique for rendering a JavaScript application on the server, rather than in the browser. This can improve the performance and user experience of a web application, as the initial render of the application is done on the server and the content is sent to the browser as a fully-rendered HTML page. There are several frameworks and libraries available for server-side rendering React applications, most common being:",
                "resources": [
                    {
                        "name": "Next.js",
                        "link": "https://nextjs.org/"
                    },
                    {
                        "name": "Remix",
                        "link": "https://remix.run/"
                    }
                ],
                "order": 9,
                "options": [
                    {
                        "name": "Next.js",
                        "recommendation-type": "opinion",
                        "description": "Next.js is an open-source development framework built on top of Node.js enabling React-based web application functionalities such as server-side rendering and generating static websites.",
                        "resources": [
                            {
                                "name": "Official Website",
                                "link": "ehttps://nextjs.org/"
                            },
                            {
                                "name": "Official Docs for Getting Started",
                                "link": "https://nextjs.org/docs/getting-started"
                            },
                            {
                                "name": "Next.js Full course",
                                "link": "https://www.youtube.com/watch?v=9P8mASSREYM&list=PLC3y8-rFHvwgC9mj0qv972IO5DmD-H0ZH"
                            },
                            {
                                "name": "Mastering Next.js",
                                "link": "https://masteringnextjs.com/"
                            },
                            {
                                "name": "Next.js for Beginners - freeCodeCamp",
                                "link": "https://youtu.be/1WmNXEVia8I"
                            },
                            {
                                "name": "The Next.js Handbook — freeCodeCamp",
                                "link": "https://www.freecodecamp.org/news/the-next-js-handbook/"
                            }
                        ]
                    },
                    {
                        "name": "Remix",
                        "recommendation-type": "Pick this or purple",
                        "description": "Remix is a full stack web framework that lets you focus on the user interface and work back through web standards to deliver a fast, slick, and resilient user experience. People are gonna love using your stuff.",
                        "resources": [
                            {
                                "name": "Official Website",
                                "link": "https://remix.run/"
                            },
                            {
                                "name": "Official Docs for Getting Started",
                                "link": "https://remix.run/docs/en/v1#getting-started"
                            }
                        ]
                    }
                ]
            },
            "Forms": {
                "description": "Although you can build forms using vanilla React, it normally requires a lot of boilerplate code. This is because the form is built using a combination of state and props. To make it easier to manage forms, we use some sort of library.",
                "resources": [
                    {
                        "name": "How to use Forms in React",
                        "link": "https://www.robinwieruch.de/react-form/"
                    }
                ],
                "order": 9,
                "options": [
                    {
                        "name": "React Hook Form",
                        "recommendation-type": "opinion",
                        "description": "React hook form is an open-source form library for react. Performant, flexible and extensible forms with easy-to-use validation.",
                        "resources": [
                            {
                                "name": "React Hook Form: Official Website",
                                "link": "https://react-hook-form.com/"
                            },
                            {
                                "name": "react-hook-form/react-hook-form",
                                "link": "https://github.com/react-hook-form/react-hook-form"
                            }
                        ]
                    },
                    {
                        "name": "Formik",
                        "recommendation-type": "Pick this or purple",
                        "description": "Formik is another famous open-source form library that helps with getting values in and out of form state, validation and error messages, and handling form submissions.",
                        "resources": [
                            {
                                "name": "Official Website — Formik",
                                "link": "https://formik.org/"
                            },
                            {
                                "name": "Getting Started",
                                "link": "https://formik.org/docs/overview"
                            },
                            {
                                "name": "formik/formik",
                                "link": "https://github.com/formik/formik"
                            }
                        ]
                    },
                    {
                        "name": "Final Form",
                        "recommendation-type": "Pick this or purple",
                        "description": "High-performance subscription-based form state management for React.",
                        "resources": [
                            {
                                "name": "Final Form — Official Website",
                                "link": "https://final-form.org/react"
                            },
                            {
                                "name": "final-form / react-final-form",
                                "link": "https://github.com/final-form/react-final-form"
                            }
                        ]
                    },
                    {
                        "name": "Suspense",
                        "recommendation-type": "opinion",
                        "description": "React Suspense is a feature in React that allows components to “suspend” rendering while they are waiting for something to happen, such as data to be fetched from an API or an image to be loaded. Suspense allows developers to create a more seamless user experience by rendering a placeholder or fallback component while the component is waiting for the required data to be available.",
                        "resources": [
                            {
                                "name": "React Suspense",
                                "link": "https://react.dev/reference/react/Suspense"
                            }
                        ]
                    },
                    {
                        "name": "Portals",
                        "recommendation-type": "opinion",
                        "description": "Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.",
                        "resources": [
                            {
                                "name": "Portals in React",
                                "link": "https://react.dev/reference/react-dom/createPortal"
                            }
                        ]
                    },
                    {
                        "name": "Error Boundaries",
                        "recommendation-type": "opinion",
                        "description": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.",
                        "resources": [
                            {
                                "name": "Error Boundaries in React",
                                "link": "https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary"
                            }
                        ]
                    },
                    {
                        "name": "Fiber Architecture",
                        "recommendation-type": "opinion",
                        "description": "React 16.0 was released with an update to the React core algorithm. This new core architecture is named “Fiber.” Facebook has completely rewritten the internals of React from the ground-up while keeping the public API essentially unchanged; in simple terms, it means only changing the engine of a running car.",
                        "resources": [
                            {
                                "name": "React Fiber Architecture",
                                "link": "https://github.com/acdlite/react-fiber-architecture"
                            },
                            {
                                "name": "Understanding React Fiber Architecture",
                                "link": "https://dzone.com/articles/understanding-of-react-fiber-architecture"
                            }
                        ]
                    }
                ]
            },
            "Mobile": {
                "description": "React Native is an open-source UI software framework created by Meta Platforms, Inc. It is used to develop applications for Android, Android TV, iOS, macOS, tvOS, Web, Windows, and UWP by enabling developers to use the React framework along with native platform capabilities.",
                "resources": [],
                "order": 9,
                "options": [
                    {
                        "name": "React Native",
                        "recommendation-type": "opinion",
                        "description": "React Native is an open-source UI software framework created by Meta Platforms, Inc. It is used to develop applications for Android, Android TV, iOS, macOS, tvOS, Web, Windows, and UWP by enabling developers to use the React framework along with native platform capabilities.",
                        "resources": [
                            {
                                "name": "React Native: Official Website",
                                "link": "https://reactnative.dev/"
                            },
                            {
                                "name": "Official Getting Started",
                                "link": "https://reactnative.dev/docs/getting-started"
                            }
                        ]
                    }
                ]
            }
        }
    }
}
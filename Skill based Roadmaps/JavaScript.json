{
  "SKill": {
    "JavaScript": {
      "description": "Step by step guide to learn JavaScript in 2023 ",
      "Introduction to JavaScript": {
        "description": "JavaScript, often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSSIt lets us add interactivity to pages e.g. you might have seen sliders, alerts, click interactions, popups, etc on different websites — all of that is built using JavaScript. Apart from being used in the browser, it is also used in other non-browser environments as well such as Node.js for writing server-side code in JavaScript, Electron for writing desktop applications, React Native for mobile applications, and so on",
        "resources": [
          {
            "name": "JavaScript MDN Docs",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript"
          },
          {
            "name": "W3Schools - JavaScript Tutorial",
            "link": "https://www.w3schools.com/js/"
          },
          {
            "name": "The Modern JavaScript Tutorial",
            "link": "https://javascript.info/"
          },
          {
            "name": "Exploring JS: JavaScript books for programmers",
            "link": "https://exploringjs.com/"
          },
          {
            "name": "Eloquent JavaScript textbook",
            "link": "https://eloquentjavascript.net/"
          },
          {
            "name": "You Dont Know JS Yet (book series)",
            "link": "https://github.com/getify/You-Dont-Know-JS"
          },
          {
            "name": "JavaScript Crash Course for Beginners",
            "link": "https://youtu.be/hdI2bqOjy3c?t=2"
          },
          {
            "name": "Build a Netflix Landing Page Clone with HTML, CSS & JS",
            "link": "https://youtu.be/P7t13SGytRk?t=22"
          }
        ],
        "order": 1,
        "options": [
          {
            "name": "What is JavaScript?",
            "recommendation-type": "opinion",
            "description": "JavaScript, often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS It lets us add interactivity to pages e.g. you might have seen sliders, alerts, click interactions, popups, etc on different websites — all of that is built using JavaScript. Apart from being used in the browser, it is also used in other non-browser environments as well such as Node.js for writing server-side code in JavaScript, Electron for writing desktop applications, React Native for mobile applications, and so on.",
            "resources": [
              {
                "name": "JavaScript MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript"
              },
              {
                "name": "W3Schools - JavaScript Tutorial",
                "link": "https://www.w3schools.com/js/"
              },
              {
                "name": "The Modern JavaScript Tutorial",
                "link": "https://javascript.info/"
              },
              {
                "name": "A Comprehensive Course on JavaScript with Quizzes and Exercises - CodeGuage",
                "link": "https://www.codeguage.com/courses/js/"
              },
              {
                "name": "Exploring JS: JavaScript books for programmers",
                "link": "https://exploringjs.com/"
              },
              {
                "name": "JavaScript Crash Course for Beginners",
                "link": "https://youtu.be/hdI2bqOjy3c?t=2"
              },
              {
                "name": "Build a Netflix Landing Page Clone with HTML, CSS & JS",
                "link": "https://youtu.be/P7t13SGytRk?t=22"
              },
              {
                "name": "Learn JavaScript - Full Course for Beginners",
                "link": "https://www.youtube.com/watch?v=PkZNo7MFNFg"
              }
            ]
          },
          {
            "name": "History of JavaScript",
            "recommendation-type": "opinion",
            "description": "JavaScript was initially created by Brendan Eich of NetScape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming initially, it was named Mocha by the creator, which was later renamed LiveScript. In 1996, about a year later after the release, NetScape decided to rename it to JavaScript with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript.",
            "resources": [
              {
                "name": "Brief History of JavaScript",
                "link": "https://roadmap.sh/guides/history-of-javascript"
              },
              {
                "name": "The History of JavaScript",
                "link": "https://dev.to/iarchitsharma/the-history-of-javascript-5e98"
              }
            ]
          },
          {
            "name": "Javascript Versions",
            "recommendation-type": "opinion",
            "description": "JavaScript was invented by Brendan Eich, and in 1997 it became an ECMA standard. ECMAScript is the official language name. ECMAScript versions include ES1, ES2, ES3, ES5, and ES6...",
            "resources": [
              {
                "name": "JavaScript Versions: How JavaScript has changed over the years",
                "link": "https://www.educative.io/blog/javascript-versions-history"
              },
              {
                "name": "Brief History of JavaScript",
                "link": "https://roadmap.sh/guides/history-of-javascript"
              }
            ]
          },
          {
            "name": "How to run Javascript",
            "recommendation-type": "opinion",
            "description": "JavaScript can be run in the browser by including the external script file using the script tag, writing it within the HTML page using the script tag again, running it in the browser console or you can also use REPL...",
            "resources": [
              {
                "name": "How To Add JavaScript to HTML",
                "link": "https://www.digitalocean.com/community/tutorials/how-to-add-javascript-to-html"
              },
              {
                "name": "How To Write Your First JavaScript Program",
                "link": "https://www.digitalocean.com/community/tutorials/how-to-write-your-first-javascript-program"
              },
              {
                "name": "How To Use the JavaScript Developer Console",
                "link": "https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-developer-console"
              }
            ]
          }
        ]
      },
      "All About Variables": {
        "description": "Most of the time, a JavaScript application needs to work with information. To store and represent this information in the JavaScript codebase, we use variables. A variable is a container for a value...",
        "resources": [
          {
            "name": "JavaScript Variables",
            "link": "https://javascript.info/variables"
          },
          {
            "name": "Storing the information you need — Variables",
            "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables"
          }
        ],
        "order": 2,
        "options": [
          {
            "name": "Variable Declarations",
            "recommendation-type": "opinion",
            "description": "To use variables in JavaScript, we first need to create it i.e. declare a variable. To declare variables, we use one of the var, let, or const keywords...",
            "resources": [
              {
                "name": "Storing the information you need — Variables",
                "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables"
              },
              {
                "name": "JavaScript Variables - CodeGuage",
                "link": "https://www.codeguage.com/courses/js/variables"
              }
            ],
            "options": [
              {
                "name": "[var] keyword",
                "recommendation-type": "opinion",
                "description": "The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.",
                "resources": [
                  {
                    "name": "var keyword - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var"
                  },
                  {
                    "name": "JavaScript Variables",
                    "link": "https://javascript.info/variables"
                  },
                  {
                    "name": "JavaScript Variables - W3Schools",
                    "link": "https://www.w3schools.com/js/js_variables.asp"
                  },
                  {
                    "name": "Declaring Variables without Var, Let, Const - What Would Happen?",
                    "link": "https://www.youtube.com/watch?v=6UAKBYpUC-Y"
                  },
                  {
                    "name": "How to declare variables in different ways in JavaScript?",
                    "link": "https://www.geeksforgeeks.org/how-to-declare-variables-in-different-ways-in-javascript/"
                  }
                ]
              },
              {
                "name": "[let] keyword",
                "recommendation-type": "opinion",
                "description": "The let declaration declares a block-scoped local variable, optionally initializing it to a value.",
                "resources": [
                  {
                    "name": "let keyword - MDN Docs",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"
                  },
                  {
                    "name": "JavaScript Variables",
                    "link": "https://javascript.info/variables"
                  },
                  {
                    "name": "How to declare variables in different ways in JavaScript?",
                    "link": "https://www.geeksforgeeks.org/how-to-declare-variables-in-different-ways-in-javascript/"
                  }
                ]
              },
              {
                "name": "[const] keyword",
                "recommendation-type": "opinion",
                "description": "Constants are block-scoped, much like variables declared using the let keyword. The value of a constant can’t be changed through reassignment (i.e. by using the assignment operator), and it can’t be redeclared (i.e. through a variable declaration). However, if a constant is an object or array its properties or items can be updated or removed.",
                "resources": [
                  {
                    "name": "JavaScript Constants - CodeGuage",
                    "link": "https://www.codeguage.com/courses/js/constants"
                  },
                  {
                    "name": "const keyword - MDN Docs",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"
                  },
                  {
                    "name": "JavaScript Variables",
                    "link": "https://javascript.info/variables"
                  },
                  {
                    "name": "How to declare variables in different ways in JavaScript?",
                    "link": "https://www.geeksforgeeks.org/how-to-declare-variables-in-different-ways-in-javascript/"
                  }
                ]
              }
            ]
          },
          {
            "name": "Hoisting",
            "recommendation-type": "opinion",
            "description": "JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables, or classes to the top of their scope, prior to execution of the code...",
            "resources": [
              {
                "name": "What is Hoisting - MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"
              },
              {
                "name": "JavaScript Hoisting",
                "link": "https://www.geeksforgeeks.org/javascript-hoisting/"
              },
              {
                "name": "Understanding hoisting",
                "link": "https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript"
              }
            ]
          },
          {
            "name": "Naming Rules",
            "recommendation-type": "opinion",
            "description": "A variable name should accurately identify your variable. When you create good variable names, your JavaScript code becomes easier to understand and easier to work with. Properly naming variables is really important...",
            "resources": [
              {
                "name": "JavaScript Variable Naming Tips - CodeGuage",
                "link": "https://www.codeguage.com/courses/js/variables#Tips_for_naming_variables"
              },
              {
                "name": "Understanding Variables in JavaScript",
                "link": "https://www.informit.com/articles/article.aspx?p=131025&seqNum=3"
              },
              {
                "name": "Naming JavaScript Variables",
                "link": "https://www.dummies.com/article/technology/programming-web-design/javascript/naming-javascript-variables-142522/"
              },
              {
                "name": "JavaScript Naming Conventions",
                "link": "https://www.robinwieruch.de/javascript-naming-conventions/"
              },
              {
                "name": "Google JavaScript Style Guide",
                "link": "https://google.github.io/styleguide/jsguide.html"
              }
            ]
          },
          {
            "name": "Scopes",
            "recommendation-type": "opinion",
            "description": "In JavaScript, scope refers to the visibility of a variable or how it can be used after it is declared. The scope of a variable depends on the keyword that was used to declare it The three types of Scope are Global Scope, Function Scope, and Block Scope. Before ES6 (2015), JavaScript had only Global Scope and Function Scope with the var keyword. ES6 introduced let and const which allow Block Scope in JavaScript.Global Scope: Variables declared outside any function or curly braces ’{}’ have Global Scope, and can be accessed from anywhere within the same Javascript code. var, let and const all provide this Scope.Function Scope: Variables declared within a function can only be used within that same function. Outside that function, they are undefined. var, let and const all provide this Scope.Block Scope: A block is any part of JavaScript code bounded by ’{}‘. Variables declared within a block can not be accessed outside that block. This Scope is only provided by the let and const keywords. If you declare a variable within a block using the var keyword, it will NOT have Block Scope.Local Scope: Local variables are only recognized inside their functions, variables with the same name can be used in different functions. Local variables are created when a function starts, and deleted when the function is completed. var, let and const all provide this Scope.",
            "resources": [
              {
                "name": "JavaScript Scope",
                "link": "https://www.w3schools.com/js/js_scope.asp"
              },
              {
                "name": "javascript scope",
                "link": "https://wesbos.com/javascript/03-the-tricky-bits/scope"
              },
              {
                "name": "Understanding Global Local Function Block Scope",
                "link": "https://www.youtube.com/watch?v=_E96W6ivHng"
              }
            ],
            "options": [
              {
                "name": "Block Scope",
                "recommendation-type": "opinion",
                "description": "This scope restricts the variable that is declared inside a specific block, from access by the outside of the block. The let & const keyword facilitates the variables to be block scoped. In order to access the variables of that specific block, we need to create an object for it. Variables declared with the var keyword, do not have block scope.",
                "resources": [
                  {
                    "name": "JavaScript Scope",
                    "link": "https://www.w3schools.com/js/js_scope.asp"
                  },
                  {
                    "name": "Block Scoping in JavaScript",
                    "link": "https://www.geeksforgeeks.org/javascript-es2015-block-scoping"
                  }
                ]
              },
              {
                "name": "Function Scope",
                "recommendation-type": "opinion",
                "description": "When a variable is declared inside a function, it is only accessible within that function and cannot be used outside that function.",
                "resources": [
                  {
                    "name": "JavaScript Scope",
                    "link": "https://www.w3schools.com/js/js_scope.asp"
                  },
                  {
                    "name": "Function Scope & Block Scope in JS",
                    "link": "https://medium.com/nerd-for-tech/function-scope-block-scope-in-js-d29c8e7cd216"
                  },
                  {
                    "name": "All about Functions and Scopes in JavaScript",
                    "link": "https://www.geeksforgeeks.org/all-about-functions-and-scopes-in-javascript/"
                  }
                ]
              },
              {
                "name": "Global Scope",
                "recommendation-type": "opinion",
                "description": "Variables declared Globally (outside any function) have Global Scope. Global variables can be accessed from anywhere in a JavaScript program. Variables declared with var, let and const are quite similar when declared outside a block.",
                "resources": [
                  {
                    "name": "JavaScript Scope",
                    "link": "https://www.w3schools.com/js/js_scope.asp"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Data types": {
        "description": "Data type refers to the type of data that a JavaScript variable can hold. There are seven primitive data types in JavaScript (Number, BigInt, String, Boolean, Null, Undefined and Symbol). Objects are non-primitives.",
        "resources": [
          {
            "name": "JavaScript Data Types - CodeGuage",
            "link": "https://www.codeguage.com/courses/js/data-types"
          },
          {
            "name": "JavaScript data types and data structures",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"
          },
          {
            "name": "JavaScript Data Types",
            "link": "https://www.w3schools.com/js/js_datatypes.asp"
          }
        ],
        "order": 3,
        "options": [
          {
            "Primitive Types": {
              "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
              "resources": [
                {
                  "name": "Primitive",
                  "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                }
              ],
              "options": [
                {
                  "name": "string",
                  "recommendation-type": "opinion",
                  "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
                  "resources": [
                    {
                      "name": "Primitive",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                    }
                  ]
                },
                {
                  "name": "undefined",
                  "recommendation-type": "opinion",
                  "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
                  "resources": [
                    {
                      "name": "Primitive",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                    }
                  ]
                },
                {
                  "name": "number",
                  "recommendation-type": "opinion",
                  "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
                  "resources": [
                    {
                      "name": "Primitive",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                    }
                  ]
                },
                {
                  "name": "bigint",
                  "recommendation-type": "opinion",
                  "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
                  "resources": [
                    {
                      "name": "Primitive",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                    }
                  ]
                },
                {
                  "name": "boolean",
                  "recommendation-type": "opinion",
                  "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
                  "resources": [
                    {
                      "name": "Primitive",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                    }
                  ]
                },
                {
                  "name": "null",
                  "recommendation-type": "opinion",
                  "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
                  "resources": [
                    {
                      "name": "Primitive",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                    }
                  ]
                },
                {
                  "name": "symbol",
                  "recommendation-type": "opinion",
                  "description": "In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive datatypes: string, number, boolean, null, undefined, bigint, and symbol. Most of the time, a primitive value is represented directly at the lowest level of the language implementation.",
                  "resources": [
                    {
                      "name": "Primitive",
                      "link": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
                    }
                  ]
                }
              ]
            }
          },
          {
            "Object": {
              "description": "JavaScript object is a data structure that allows us to have key-value pairs; so we can have distinct keys and each key is mapped to a value that can be of any JavaScript data type. Comparing it to a real-world object, a pen is an object with several properties such as color, design, the material it is made of, etc. In the same way, JavaScript objects can have properties that define their characteristics.",
              "resources": [
                {
                  "name": "Objects",
                  "link": "https://javascript.info/object"
                },
                {
                  "name": "Working with Objects",
                  "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"
                },
                {
                  "name": "JavaScript Object Definition",
                  "link": "https://www.w3schools.com/js/js_object_definition.asp"
                },
                {
                  "name": "Objects in JavaScript",
                  "link": "https://www.geeksforgeeks.org/objects-in-javascript/"
                }
              ],
              "options": [
                {
                  "name": "Prototypes",
                  "recommendation-type": "opinion",
                  "description": "JavaScript is an object-oriented language built around a prototype model. In JavaScript, every object inherits properties from its prototype, if there are any. A prototype is simply an object from which another object inherits properties. To create complex programs using JavaScript, one has to be proficient in working with prototypes — they form the very core of OOP in the language.",
                  "resources": [
                    {
                      "name": "Prototypes in JavaScript - A Comprehensive Guide",
                      "link": "https://www.codeguage.com/courses/js/objects-prototypes"
                    },
                    {
                      "name": "Prototypes, Inheritance",
                      "link": "https://javascript.info/prototypes"
                    },
                    {
                      "name": "Object prototypes - MDN",
                      "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes"
                    }
                  ]
                },
                {
                  "name": "Prototypal Inheritance",
                  "recommendation-type": "opinion",
                  "description": "The Prototypal Inheritance is a feature in javascript used to add methods and properties in objects. It is a method by which an object can inherit the properties and methods of another object. Traditionally, in order to get and set the Prototype of an object, we use Object.getPrototypeOf and Object.setPrototypeOf.",
                  "resources": [
                    {
                      "name": "JavaScript MDN Docs",
                      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"
                    },
                    {
                      "name": "GeeksForGeeks - JavaScript Tutorial",
                      "link": "https://www.geeksforgeeks.org/prototypal-inheritance-using-__proto__-in-javascript/"
                    },
                    {
                      "name": "The Modern JavaScript Tutorial",
                      "link": "https://javascript.info/prototype-inheritance"
                    },
                    {
                      "name": "Prototype Inheritance",
                      "link": "https://javascript.info/prototype-inheritance"
                    }
                  ]
                },
                {
                  "name": "Built-in objects",
                  "recommendation-type": "opinion",
                  "description": "Built-in objects, or “global objects”, are those built into the language specification itself. There are numerous built-in objects with the JavaScript language, all of which are accessible at the global scope. Some examples are: Number, Math, Date, String, Error, Function, Boolean.",
                  "resources": [
                    {
                      "name": "Built-in Objects",
                      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"
                    },
                    {
                      "name": "Standard built-in objects",
                      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"
                    },
                    {
                      "name": "JavaScript Built-in Objects",
                      "link": "https://www.tutorialride.com/javascript/javascript-built-in-objects.htm"
                    },
                    {
                      "name": "Built-in Objects",
                      "link": "https://www.scaler.com/topics/javascript-built-in-objects/"
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "TypeOf Operator",
            "recommendation-type": "opinion",
            "description": "You can use the typeof operator to find the data type of a JavaScript variable.",
            "resources": [
              {
                "name": "Typeof Reference",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"
              },
              {
                "name": "Typeof Live Examples",
                "link": "https://www.w3schools.com/js/tryit.asp?filename=tryjs_typeof_all"
              }
            ]
          }
        ]
      },
      "Type Casting": {
        "description": "Type conversion (or typecasting) means the transfer of data from one data type to another. Implicit conversion happens when the compiler (for compiled languages) or runtime (for script languages like JavaScript) automatically converts data types. The source code can also explicitly require a conversion to take place.",
        "resources": [
          {
            "name": "Type Conversions",
            "link": "https://javascript.info/type-conversions"
          },
          {
            "name": "JavaScript Type Conversion",
            "link": "https://www.w3schools.com/js/js_type_conversion.asp"
          },
          {
            "name": "Type Casting in JavaScript",
            "link": "https://www.tutorialspoint.com/type-casting-in-javascript"
          },
          {
            "name": "JavaScript Type Cast",
            "link": "https://www.geeksforgeeks.org/javascript-type-conversion"
          }
        ],
        "order": 4,
        "options": [
          {
            "name": "Type Conversion/Coercion",
            "recommendation-type": "opinion",
            "description": "Type coercion is the automatic or implicit conversion of values from one data type to another (such as strings to numbers). Type conversion is similar to type coercion because they convert values from one data type to another with one key difference — type coercion is implicit. In contrast, type conversion can be either implicit or explicit.",
            "resources": [
              {
                "name": "Type Conversion - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion"
              },
              {
                "name": "Type Coercion - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion"
              },
              {
                "name": "Type Conversion and Coercion video",
                "link": "https://www.youtube.com/watch?v=jfQyMPzPTjY"
              }
            ]
          },
          {
            "name": "Explicit Type Casting",
            "recommendation-type": "opinion",
            "description": "Type casting means transferring data from one data type to another by explicitly specifying the type to convert the given data to. Explicit type casting is normally done to make data compatible with other variables. Examples of typecasting methods are parseInt(), parseFloat(), toString().",
            "resources": [
              {
                "name": "Type Conversion",
                "link": "https://www.c-sharpcorner.com/article/type-conversions-in-javascript/"
              },
              {
                "name": "Type casting",
                "link": "https://www.scaler.com/topics/javascript/type-conversion-in-javascript/"
              },
              {
                "name": "Data Type Conversion",
                "link": "https://youtu.be/VQLYiFqetZM"
              },
              {
                "name": "Type conversion",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion"
              },
              {
                "name": "What is typecasting in JavaScript",
                "link": "https://www.tutorialspoint.com/explain-typecasting-in-javascript"
              }
            ]
          },
          {
            "name": "Implicit Type Casting",
            "recommendation-type": "opinion",
            "description": "Implicit type conversion happens when the compiler or runtime automatically converts data types. JavaScript is loosely typed language and most of the time operators automatically convert a value to the right type.",
            "resources": [
              {
                "name": "GeeksForGeeks - JavaScript Tutorials",
                "link": "https://www.geeksforgeeks.org/javascript-type-conversion/"
              },
              {
                "name": "W3Schools - JavaScript Tutorials",
                "link": "https://www.w3schools.com/js/js_type_conversion.asp"
              },
              {
                "name": "TutorialsPoint - JavaScript Tutorials",
                "link": "https://www.tutorialspoint.com/explain-typecasting-in-javascript"
              },
              {
                "name": "What you need to know about Javascripts Implicit Coercion",
                "link": "https://dev.to/promisetochi/what-you-need-to-know-about-javascripts-implicit-coercion-e23"
              }
            ]
          }
        ]
      },
      "Data Structures": {
        "description": "A Data structure is a format to organize, manage and store data in a way that allows efficient access and modification. JavaScript has primitive (built-in) and non-primitive (not built-in) data structures. Primitive data structures come by default with the programming language and you can implement them out of the box (like arrays and objects). Non-primitive data structures don’t come by default and you have to code them up if you want to use them.",
        "resources": [
          {
            "name": "Data structures",
            "link": "https://www.freecodecamp.org/news/data-structures-in-javascript-with-examples/#what-is-a-data-structure"
          },
          {
            "name": "Introduction to the Stack Data Structure",
            "link": "https://youtu.be/4F-BnR2XwqU"
          },
          {
            "name": "Introduction to the Queue Data Structure",
            "link": "https://youtu.be/GRA_3Ppl2ZI"
          },
          {
            "name": "Intro to Recursion: Anatomy of a Recursive Solution",
            "link": "https://youtu.be/yBWlPte6FhA"
          },
          {
            "name": "Binary Tree Algorithms for Technical Interviews - Full Course",
            "link": "https://youtu.be/fAAZixBzIAI"
          },
          {
            "name": "Graph Algorithms for Technical Interviews - Full Course",
            "link": "https://youtu.be/tWVWeAqZ0WU"
          },
          {
            "name": "Dynamic Programming - Learn to Solve Algorithmic Problems & Coding Challenges",
            "link": "https://youtu.be/oBt53YbR9Kk"
          }
        ],
        "order": 5,
        "options": [
          {
            "name": "Keyed Collections",
            "recommendation-type": "opinion",
            "description": "Keyed collections are data collections that are ordered by key not index. They are associative in nature. Map and set objects are keyed collections and are iterable in the order of insertion.",
            "resources": [
              {
                "name": "Keyed collections",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections"
              },
              {
                "name": "ES6 keyed collections- Maps and sets",
                "link": "https://blog.logrocket.com/es6-keyed-collections-maps-and-sets/"
              },
              {
                "name": "How to use Keyed collections",
                "link": "https://www.freecodecamp.org/news/how-to-use-javascript-collections-map-and-set/"
              },
              {
                "name": "Creating keyed collection",
                "link": "https://youtu.be/4UqSqF4foy4"
              }
            ],
            "options": [
              {
                "name": "Map",
                "recommendation-type": "opinion",
                "description": "Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.",
                "resources": [
                  {
                    "name": "Map - Keyed Collections",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"
                  },
                  {
                    "name": "Map Data Type",
                    "link": "https://javascript.info/map-set#map"
                  }
                ]
              },
              {
                "name": "WeakMap",
                "recommendation-type": "opinion",
                "description": "WeakMap is a Map-like collection of key/value pairs whose keys must be objects, it removes them once they become inaccessible by other means.",
                "resources": [
                  {
                    "name": "WeakMap",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap"
                  },
                  {
                    "name": "WeakMap and WeakSet",
                    "link": "https://javascript.info/weakmap-weakset"
                  }
                ]
              },
              {
                "name": "Set",
                "recommendation-type": "opinion",
                "description": "The Set object lets you store unique values of any type, whether primitive values or object references. A value in the Set may only occur once; it is unique in the Set’s collection.",
                "resources": [
                  {
                    "name": "Set - JavaScript",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"
                  },
                  {
                    "name": "Set - ExploringJS",
                    "link": "https://exploringjs.com/impatient-js/ch_sets.html"
                  }
                ]
              },
              {
                "name": "Weak Set",
                "recommendation-type": "opinion",
                "description": "WeakSet objects are collections of objects. Just as with Sets, each object in a WeakSet may occur only once; all objects in a WeakSet’s collection are unique.",
                "resources": [
                  {
                    "name": "WeakSet",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet"
                  },
                  {
                    "name": "WeakMap and WeakSet",
                    "link": "https://javascript.info/weakmap-weakset"
                  }
                ]
              }
            ]
          },
          {
            "name": "Structured data",
            "recommendation-type": "opinion",
            "description": "Structured data is used by search-engines, like Google, to understand the content of the page, as well as to gather information about the web and the world in general. It is also coded using in-page markup on the page that the information applies to.",
            "resources": [
              {
                "name": "Google Developers docs",
                "link": "https://developers.google.com/search/docs/appearance/structured-data/intro-structured-data"
              }
            ],
            "options": [
              {
                "name": "JSON",
                "recommendation-type": "opinion",
                "description": "JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa).",
                "resources": [
                  {
                    "name": "Working with JSON",
                    "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON"
                  },
                  {
                    "name": "JSON Tutorial for Beginners",
                    "link": "https://www.youtube.com/watch?v=iiADhChRriM"
                  }
                ]
              }
            ]
          },
          {
            "name": "Indexed Collections",
            "recommendation-type": "opinion",
            "description": "Indexed Collections are collections that have numeric indices i.e. the collections of data that are ordered by an index value. In JavaScript, an array is an indexed collection. An array is an ordered set of values that has a numeric index.",
            "resources": [
              {
                "name": "Indexed Collections",
                "link": "https://www.geeksforgeeks.org/javascript-indexed-collections/"
              },
              {
                "name": "What is Indexed collections?",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections"
              },
              {
                "name": "Indexed collections in JavaScript",
                "link": "https://www.tutorialspoint.com/indexed-collections-in-javascript"
              },
              {
                "name": "Javascript Arrays",
                "link": "https://youtu.be/XYq9QpgAx8g"
              }
            ],
            "options": [
              {
                "name": "Typed Arrays",
                "recommendation-type": "opinion",
                "description": "In Javascript, a typed array is an array-like buffer of binary data. There is no JavaScript property or object named TypedArray, but properties and methods can be used with typed array objects.",
                "resources": [
                  {
                    "name": "JavaScript typed arrays",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays"
                  },
                  {
                    "name": "Intro to Typed Arrays in JavaScript",
                    "link": "https://www.youtube.com/watch?v=UYkJaW3pmj0"
                  }
                ]
              },
              {
                "name": "Arrays",
                "recommendation-type": "opinion",
                "description": "Arrays are objects that store a collection of items and can be assigned to a variable. They have their methods that can perform operations on the array.",
                "resources": [
                  {
                    "name": "Working with Arrays in JavaScript",
                    "link": "https://javascript.info/array"
                  },
                  {
                    "name": "JavaScript Arrays",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
                  },
                  {
                    "name": "JavaScript Arrays",
                    "link": "https://www.youtube.com/watch?v=oigfaZ5ApsM"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Equality Comparisons": {
        "name": "Equality Comparisons",
        "recommendation-type": "opinion",
        "description": "Comparison operators are used in logical statements to determine equality or difference between variables or values. Comparison operators can be used in conditional statements to compare values and take action depending on the result.",
        "resources": [
          {
            "name": "JavaScript Comparisons",
            "link": "https://www.w3schools.com/js/js_comparisons.asp"
          },
          {
            "name": "JavaScript Equality Operators",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators"
          }
        ],
        "order": 6,
        "options": [
          {
            "name": "Value Comparison Operators",
            "recommendation-type": "opinion",
            "description": "In JavaScript, the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values and the data types of the operands. The Object.is() method determines whether two values are the same value: Object.is(value1, value2). Object.is() is not equivalent to the == operator. The == operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as \"\" == false being true), but Object.is() doesn’t coerce either value. Object.is() is also not equivalent to the === operator. The only difference between Object.is() and === is in their treatment of signed zeros and NaN values. The === operator (and the == operator) treats the number values -0 and +0 as equal but treats NaN as not equal to each other.",
            "resources": [
              {
                "name": "The Difference Between == and === in Javascript",
                "link": "https://www.scaler.com/topics/javascript/difference-between-double-equals-and-triple-equals-in-javascript/"
              },
              {
                "name": "Equality comparisons and sameness - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is"
              }
            ],
            "options": [
              {
                "name": "==",
                "recommendation-type": "opinion",
                "description": "In JavaScript, the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values and the data types of the operands. The Object.is() method determines whether two values are the same value: Object.is(value1, value2). Object.is() is not equivalent to the == operator. The == operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as \"\" == false being true), but Object.is() doesn’t coerce either value. Object.is() is also not equivalent to the === operator. The only difference between Object.is() and === is in their treatment of signed zeros and NaN values. The === operator (and the == operator) treats the number values -0 and +0 as equal but treats NaN as not equal to each other.",
                "resources": [
                  {
                    "name": "The Difference Between == and === in Javascript",
                    "link": "https://www.scaler.com/topics/javascript/difference-between-double-equals-and-triple-equals-in-javascript/"
                  },
                  {
                    "name": "Equality comparisons and sameness - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is"
                  }
                ]
              },
              {
                "name": "===",
                "recommendation-type": "opinion",
                "description": "In JavaScript, the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values and the data types of the operands. The Object.is() method determines whether two values are the same value: Object.is(value1, value2). Object.is() is not equivalent to the == operator. The == operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as \"\" == false being true), but Object.is() doesn’t coerce either value. Object.is() is also not equivalent to the === operator. The only difference between Object.is() and === is in their treatment of signed zeros and NaN values. The === operator (and the == operator) treats the number values -0 and +0 as equal but treats NaN as not equal to each other.",
                "resources": [
                  {
                    "name": "The Difference Between == and === in Javascript",
                    "link": "https://www.scaler.com/topics/javascript/difference-between-double-equals-and-triple-equals-in-javascript/"
                  },
                  {
                    "name": "Equality comparisons and sameness - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is"
                  }
                ]
              },
              {
                "name": "Object.is",
                "recommendation-type": "opinion",
                "description": "In JavaScript, the == operator does the type conversion of the operands before comparison, whereas the === operator compares the values and the data types of the operands. The Object.is() method determines whether two values are the same value: Object.is(value1, value2). Object.is() is not equivalent to the == operator. The == operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as \"\" == false being true), but Object.is() doesn’t coerce either value. Object.is() is also not equivalent to the === operator. The only difference between Object.is() and === is in their treatment of signed zeros and NaN values. The === operator (and the == operator) treats the number values -0 and +0 as equal but treats NaN as not equal to each other.",
                "resources": [
                  {
                    "name": "The Difference Between == and === in Javascript",
                    "link": "https://www.scaler.com/topics/javascript/difference-between-double-equals-and-triple-equals-in-javascript/"
                  },
                  {
                    "name": "Equality comparisons and sameness - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is"
                  }
                ]
              }
            ]
          },
          {
            "name": "Equality algorithms",
            "recommendation-type": "opinion",
            "description": "Equality algorithms are used to perform equality comparisons of values or variables in JavaScript. Each equality algorithm works slightly differently, and the one you use depends on the type of comparison you want to make.",
            "resources": [
              {
                "name": "Which JavaScript equality algorithm should you use?",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness"
              }
            ],
            "options": [
              {
                "name": "isLooselyEqual",
                "recommendation-type": "opinion",
                "description": "isLooselyEqual checks whether its two operands are equal, returning a Boolean result. It attempts to convert and compare operands that are of different types.",
                "resources": [
                  {
                    "name": "Loosely Equality (==) Operator",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality"
                  },
                  {
                    "name": "Comparison - javascript.info",
                    "link": "https://javascript.info/comparison"
                  }
                ]
              },
              {
                "name": "isStrictlyEqual",
                "recommendation-type": "opinion",
                "description": "isStrictlyEqual checks whether its two operands are equal, returning a Boolean result. It always considers operands of different types to be different.",
                "resources": [
                  {
                    "name": "Strictly Equality (===) Operator",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality"
                  },
                  {
                    "name": "Comparison - javascript.info",
                    "link": "https://javascript.info/comparison"
                  }
                ]
              },
              {
                "name": "Same value zero",
                "recommendation-type": "opinion",
                "description": "SameValueZero equality determines whether two values are functionally identical in all contexts with +0 and -0 are also considered equal.",
                "resources": [
                  {
                    "name": "Same-value-zero equality",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality"
                  }
                ]
              },
              {
                "name": "Same value",
                "recommendation-type": "opinion",
                "description": "SameValue equality determines whether two values are functionally identical in all contexts.",
                "resources": [
                  {
                    "name": "Same-value equality using Object.is()",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Loops and Iterations": {
        "description": "Loops offer a quick and easy way to do something repeatedly. You can think of a loop as a computerized version of the game where you tell someone to take X steps in one direction, then Y steps in another. For example, the idea 'Go five steps to the east' could be expressed this way as a loop:for (let step = 0; step < 5; step++) {// Runs 5 times, with values of step 0 through 4.console.log('Walking east one step');}",
        "resources": [
          {
            "name": "Loops and iteration",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration"
          }
        ],
        "order": 7,
        "options": [
          {
            "name": "The for loop",
            "recommendation-type": "opinion",
            "description": "The for loop is a standard control-flow construct in many programming languages, including JavaScript. It’s commonly used to iterate over given sequences or iterate a known number of times and execute a piece of code for each iteration.",
            "resources": [
              {
                "name": "JavaScript for Loop - CodeGuage",
                "link": "https://www.codeguage.com/courses/js/loops-for-loop"
              },
              {
                "name": "The for Loop - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"
              }
            ]
          },
          {
            "name": "do…while statement",
            "recommendation-type": "opinion",
            "description": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.",
            "resources": [
              {
                "name": "do…while - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while"
              },
              {
                "name": "JavaScript do…while Loop - W3Schools",
                "link": "https://www.w3schools.com/jsref/jsref_dowhile.asp"
              }
            ]
          },
          {
            "name": "while statement",
            "recommendation-type": "opinion",
            "description": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.",
            "resources": [
              {
                "name": "While Statement - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while"
              },
              {
                "name": "The while Loop - CodeGuage",
                "link": "https://www.codeguage.com/courses/js/loops-while-loop"
              }
            ]
          },
          {
            "name": "for…in statement",
            "recommendation-type": "opinion",
            "description": "The for…in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.",
            "resources": [
              {
                "name": "for…in statement - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"
              },
              {
                "name": "The for..in loop with examples",
                "link": "https://javascript.info/object#forin"
              }
            ]
          },
          {
            "name": "for…of statement",
            "recommendation-type": "opinion",
            "description": "The for…of statement executes a loop that operates on a sequence of values sourced from an iterable object. Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), and the arguments object, generators produced by generator functions, and user-defined iterables.",
            "resources": [
              {
                "name": "for…of statement - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"
              }
            ]
          },
          {
            "name": "Break continue",
            "recommendation-type": "opinion",
            "description": "The break statement, without a label reference, can only be used to jump out of a loop or a switch block. The continue statement, with or without a label reference, can only be used to skip one loop iteration.",
            "resources": [
              {
                "name": "JavaScript MDN Docs - continue statement",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue"
              },
              {
                "name": "JavaScript MDN Docs - break statement",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break"
              },
              {
                "name": "W3Schools - JavaScript Tutorial",
                "link": "https://www.w3schools.com/js/js_break.asp"
              }
            ],
            "options": [
              {
                "name": "Labeled Statements",
                "recommendation-type": "opinion",
                "description": "JavaScript label statements are used to prefix a label to an identifier. It can be used with break and continue statement to control the flow more precisely. A label is simply an identifier followed by a colon (:) that is applied to a block of code.",
                "resources": [
                  {
                    "name": "JavaScript MDN Docs",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"
                  },
                  {
                    "name": "Tutorialspoint - JavaScript Tutorial",
                    "link": "https://www.tutorialspoint.com/What-are-label-statements-in-JavaScript"
                  },
                  {
                    "name": "Labels for break/continue",
                    "link": "https://javascript.info/while-for#labels-for-break-continue"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Control Flow": {
        "description": "In JavaScript, the Control flow is a way of how your computer runs code from top to bottom. It starts from the first line and ends at the last line unless it hits any statement that changes the control flow of the program such as loops, conditionals, etc. We can control the flow of the program through any of these control structures: Sequential (default mode), Conditional Statements, Exception Handling, Loops and Iterations.",
        "resources": [
          {
            "name": "Control Flow - MDN",
            "link": "https://developer.mozilla.org/en-US/docs/Glossary/Control_flow"
          }
        ],
        "order": 8,
        "options": [
          {
            "name": "Conditional statements",
            "recommendation-type": "opinion",
            "description": "When you write code, you often want to perform different actions for different decisions. You can use conditional statements in your code to do this. In JavaScript, we have three conditional statements: if, if...else, and switch.",
            "resources": [
              {
                "name": "Making decisions in your code — conditionals",
                "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals"
              },
              {
                "name": "Conditional branching: if, ?",
                "link": "https://javascript.info/ifelse"
              }
            ],
            "options": [
              {
                "name": "Switch Case",
                "recommendation-type": "opinion",
                "description": "The switch statement evaluates an expression, matching the expression’s value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression’s value.switch (expression) {case value1: //Statements executed when the result of expression matches value1break;case value2://Statements executed when the result of expression matches value2break;...case valueN://Statements executed when the result of expression matches valueNbreak;default://Statements executed when none of the values match the value of the expressionbreak;}",
                "resources": [
                  {
                    "name": "switch - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"
                  },
                  {
                    "name": "The switch Statement: Why, What and How - CodeGuage",
                    "link": "https://www.codeguage.com/courses/js/conditions-switch"
                  },
                  {
                    "name": "The switch statement - javascript.info",
                    "link": "https://javascript.info/switch"
                  }
                ]
              },
              {
                "name": "If else",
                "recommendation-type": "opinion",
                "description": "The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement in the optional else clause will be executed.if (condition) {statement1;} else {statement2;}",
                "resources": [
                  {
                    "name": "if…else - MDN docs",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"
                  },
                  {
                    "name": "Conditional branching: if, ? - javascript.info",
                    "link": "https://javascript.info/ifelse"
                  }
                ]
              }
            ]
          },
          {
            "name": "Exception Handling",
            "recommendation-type": "opinion",
            "description": "In JavaScript, all exceptions are simply objects. While the majority of exceptions are implementations of the global Error class, any old object can be thrown. With this in mind, there are two ways to throw an exception: directly via an Error object, and through a custom object. (excerpt from Rollbar)",
            "resources": [
              {
                "name": "Throwing Exceptions in JavaScript",
                "link": "https://rollbar.com/guides/javascript/how-to-throw-exceptions-in-javascript"
              },
              {
                "name": "try, catch, finally, throw (video)",
                "link": "https://youtu.be/cftftueq-10"
              }
            ],
            "options": [
              {
                "name": "Throw Statement",
                "recommendation-type": "opinion",
                "description": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won’t be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate. (excerpt from MDN)",
                "resources": [
                  {
                    "name": "throw statement - w3schools",
                    "link": "https://www.w3schools.com/jsref/jsref_throw.asp"
                  },
                  {
                    "name": "JavaScript MDN Docs",
                    "link": "https://developer.mozilla.org/en-us/docs/web/javascript/reference/statements/throw"
                  },
                  {
                    "name": "Error Handling “Throw” operator",
                    "link": "https://javascript.info/try-catch#throw-operator"
                  }
                ]
              },
              {
                "name": "Try, Catch, Finally",
                "recommendation-type": "opinion",
                "description": "These are ways of handling errors in your JavaScript code. Inside the try code block we have the code to run, inside the catch block we handle the errors, and inside the finally block we have code that runs after the execution of the previous code blocks, regardless of the result.",
                "resources": [
                  {
                    "name": "JavaScript Errors",
                    "link": "https://www.w3schools.com/js/js_errors.asp"
                  }
                ]
              },
              {
                "name": "Utilizing error objects",
                "recommendation-type": "opinion",
                "description": "When a runtime error occurs, a new Error object is created and thrown. With this Error object, we can determine the type of the Error and handle it according to its type. Types of Errors include error constructors, Javascript also has other core Error constructors. AggregateError, EvalError, InternalError, RangeError, ReferenceError, SyntaxError. Example: try {willGiveErrorSometime();} catch (error) {if (error instanceof RangeError) { rangeErrorHandler(error);} else if (error instanceof ReferenceError) {referenceErrorHandle(error);} else {errorHandler(error);}}",
                "resources": [
                  {
                    "name": "Error Object - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"
                  },
                  {
                    "name": "Control flow & Error handling - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Expressions and Operators": {
        "name": "Expressions and Operators",
        "recommendation-type": "opinion",
        "description": "At a high level, an expression is a valid unit of code that resolves to a value. There are two types of expressions: those that have side effects (such as assigning values) and those that purely evaluate.and those that purely evaluate. The expression x = 7 is an example of the first type. This expression uses the = operator to assign the value seven to the variable x. The expression itself evaluates to 7. The expression 3 + 4 is an example of the second type. This expression uses the + operator to add 3 and 4 together and produces a value, 7. However, if it’s not eventually part of a bigger construct (for example, a variable declaration like const z = 3 + 4), its result will be immediately discarded — this is usually a programmer mistake because the evaluation doesn’t produce any effects. As the examples above also illustrate, all complex expressions are joined by operators, such as = and +.Visit the following resources to learn more:",
        "resources": [
          {
            "name": "Expressions and operators",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators"
          }
        ],
        "order": 9,
        "options": [
          {
            "name": "Assignment Operators",
            "recommendation-type": "opinion",
            "description": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
            "resources": [
              {
                "name": "Assignment Operators",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#assignment_operators"
              },
              {
                "name": "Basic Operators",
                "link": "https://javascript.info/operators#assignment"
              }
            ]
          },
          {
            "name": "Comparison Operators",
            "recommendation-type": "opinion",
            "description": "Comparison operators are the operators that compare values and return true or false.",
            "resources": [
              {
                "name": "W3Schools - JavaScript Tutorials",
                "link": "https://www.w3schools.com/js/js_comparisons.asp"
              },
              {
                "name": "JavaScript MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#comparison_operators"
              },
              {
                "name": "Comparison operators",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#comparison_operators"
              }
            ]
          },
          {
            "name": "Arithmetic operators",
            "recommendation-type": "opinion",
            "description": "The Arithmetic operators perform addition, subtraction, multiplication, division, exponentiation, and remainder operations.Arithmetic operators in JavaScript are as follows+ (Addition)- (Subtraction)* (Multiplication)** (Exponentiation)/ (Division)% (Modulus i.e. Remainder)++ (Increment)-- (Decrement)",
            "resources": [
              {
                "name": "Arithmetic Operators - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators"
              },
              {
                "name": "Arithmetic Operators - JavaScript.info",
                "link": "https://javascript.info/operators#maths"
              },
              {
                "name": "JavaScript Arithmetic Operators",
                "link": "https://www.w3schools.com/js/js_arithmetic.asp"
              }
            ]
          },
          {
            "name": "Bitwise operators",
            "recommendation-type": "opinion",
            "description": "Bitwise operators treat arguments as 32-bits (zeros & ones) and work on the level of their binary representation.Ex. Decimal number 9 has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.Bitwise operators in JavaScript are as follows:& (AND)| (OR)^ (XOR)~ (NOT)<< (Left SHIFT)>> (Right SHIFT)>>> (Zero-Fill Right SHIFT)",
            "resources": [
              {
                "name": "Bitwise Operators - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators"
              },
              {
                "name": "Bitwise Operators - JavaScript.info",
                "link": "https://javascript.info/operators#bitwise-operators"
              }
            ]
          },
          {
            "name": "Logical Operators",
            "recommendation-type": "opinion",
            "description": "There are four logical operators in JavaScript: || (OR), && (AND), ! (NOT), ?? (Nullish Coalescing).",
            "resources": [
              {
                "name": "Logical Operators - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators"
              }
            ]
          },
          {
            "name": "BigInt Operators",
            "recommendation-type": "opinion",
            "description": "Most operators that can be used with the Number data type will also work with BigInt values.",
            "resources": [
              {
                "name": "BigInt Operators",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bigint_operators"
              }
            ]
          },
          {
            "name": "String Operators",
            "recommendation-type": "opinion",
            "description": "In addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together.",
            "resources": [
              {
                "name": "JavaScript MDN Tutorials",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#string_operators"
              },
              {
                "name": "String Concatenation - JavaScript.info",
                "link": "https://javascript.info/operators#string-concatenation-with-binary"
              }
            ]
          },
          {
            "name": "Conditional operators",
            "recommendation-type": "opinion",
            "description": "Conditional operator also known as Ternary operator is the only JS operator that takes three operands.",
            "resources": [
              {
                "name": "JavaScript MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#conditional_operator"
              },
              {
                "name": "W3Schools - JavaScript Tutorials",
                "link": "https://www.w3schools.com/js/js_comparisons.asp"
              }
            ]
          },
          {
            "name": "Comma operators",
            "recommendation-type": "opinion",
            "description": "The comma operator (,) evaluates each of its operands (from left to right) and returns the value of the last operand.",
            "resources": [
              {
                "name": "Comma operator",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator"
              }
            ]
          },
          {
            "name": "Unary Operators",
            "recommendation-type": "opinion",
            "description": "JavaScript Unary Operators are the special operators that consider a single operand and perform all the types of operations on that single operand. These operators include unary plus, unary minus, prefix increments, postfix increments, prefix decrements, and postfix decrements.",
            "resources": [
              {
                "name": "Unary Operators in JavaScript",
                "link": "https://www.educba.com/unary-operators-in-javascript/"
              },
              {
                "name": "Unary Operators - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#unary_operators"
              }
            ]
          },
          {
            "name": "Relational Operators",
            "recommendation-type": "opinion",
            "description": "Relational operators are also known as comparison operators. They are used to find the relationship between two values or compare the relationship between them; on the comparison, they yield the result true or false.",
            "resources": [
              {
                "name": "Relational Operators - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators"
              }
            ]
          }
        ]
      },
      "Functions": {
        "description": "Functions exist so we can reuse code. They are blocks of code that execute whenever they are invoked. Each function is typically written to perform a particular task, like an addition function used to find the sum of two or more numbers. When numbers need to be added anywhere within your code, the addition function can be invoked as many times as necessary.",
        "resources": [
          {
            "name": "Functions - MDN Docs",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"
          },
          {
            "name": "JavaScript Functions - Programming with Mosh",
            "link": "https://youtu.be/N8ap4k_1QEQ"
          },
          {
            "name": "JavaScript Functions in Detail - CodeGuage",
            "link": "https://www.codeguage.com/courses/js/functions-basics"
          }
        ],
        "order": 10,
        "options": [
          {
            "name": "Defining and Calling Functions",
            "recommendation-type": "opinion",
            "description": "Defining: JavaScript function declarations are made by using the function keyword. Functions can also be defined by saving function expressions to a variable. 'Arrow' functions are commonly used in this way. Calling: When a function is defined, it is not yet executed. To call and invoke a function’s code, use the function’s name followed by parentheses: functionName().",
            "resources": [
              {
                "name": "Defining Functions",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#defining_functions"
              },
              {
                "name": "Calling Functions",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#calling_functions"
              },
              {
                "name": "Function Definitions",
                "link": "https://www.w3schools.com/js/js_function_definition.asp"
              }
            ]
          },
          {
            "name": "Function Parameters",
            "recommendation-type": "opinion",
            "description": "The parameter is the name given to the variable declared inside the definition of a function. There are two special kinds of syntax: default and rest parameters.",
            "resources": [
              {
                "name": "Function Parameters",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_parameters"
              }
            ],
            "options": [
              {
                "name": "Default Parameters",
                "recommendation-type": "opinion",
                "description": "Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.",
                "resources": [
                  {
                    "name": "Default Parameters - MDN Docs",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters"
                  }
                ]
              },
              {
                "name": "Rest Parameters",
                "recommendation-type": "opinion",
                "description": "The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.",
                "resources": [
                  {
                    "name": "Rest Parameters - MDN Docs",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters"
                  }
                ]
              }
            ]
          },
          {
            "name": "Arrow Functions",
            "recommendation-type": "opinion",
            "description": "Arrow Function is a new way of creating functions with the '=>' operator with a shorter syntax.",
            "resources": [
              {
                "name": "MDN - Arrow Function Expressions",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"
              },
              {
                "name": "JavaScript Arrow Function",
                "link": "https://www.w3schools.com/js/js_arrow_function.asp"
              }
            ]
          },
          {
            "name": "IIFE",
            "recommendation-type": "opinion",
            "description": "Immediately-Invoked Function Expression is a function that is executed immediately after it is created.",
            "resources": [
              {
                "name": "IIFE — MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/IIFE"
              },
              {
                "name": "JavaScript in Plain English - IIFE",
                "link": "https://javascript.plainenglish.io/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174"
              }
            ]
          },
          {
            "name": "Arguments object",
            "recommendation-type": "opinion",
            "description": "The arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function, available within all non-arrow functions. You can refer to a function’s arguments inside that function by using its arguments object. It has entries for each argument the function was called with, with the first entry’s index at 0. But, in modern code, rest parameters should be preferred.",
            "resources": [
              {
                "name": "The arguments object - MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments"
              }
            ]
          },
          {
            "name": "Scope and function stack",
            "recommendation-type": "opinion",
            "description": "Scope: A space or environment in which a particular variable or function can be accessed or used. Accessibility of this variable or function depends on where it is defined. JavaScript has the following kinds of scopes: Global scope, Module scope, Function scope, Block scope. Function Stack (Call stack): The function stack is how the interpreter keeps track of its place in a script that calls multiple functions, like which function is currently executing and which functions within that function are being called.",
            "resources": [
              {
                "name": "Function stack (call stack) - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"
              },
              {
                "name": "Kinds of Scope - MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/Scope"
              }
            ],
            "options": [
              {
                "name": "Recursion",
                "recommendation-type": "opinion",
                "description": "One of the most powerful and elegant concepts of functions, recursion is when a function invokes itself. Such a function is called a recursive function. As recursion happens, the underlying code of the recursive function gets executed again and again until a terminating condition, called the base case, gets fulfilled. As you dive into the world of algorithms, you’ll come across recursion in many instances.",
                "resources": [
                  {
                    "name": "Recursion and Stack",
                    "link": "https://javascript.info/recursion"
                  },
                  {
                    "name": "JavaScript Function Recursions - CodeGuage",
                    "link": "https://www.codeguage.com/courses/js/functions-recursions"
                  },
                  {
                    "name": "Recursion - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Glossary/Recursion"
                  }
                ]
              },
              {
                "name": "Lexical scoping",
                "recommendation-type": "opinion",
                "description": "Before one can make an intuition of closures in JavaScript, it’s important to first get the hang of the term ’lexical environment’. In simple words, the lexical environment for a function f simply refers to the environment enclosing that function’s definition in the source code.",
                "resources": [
                  {
                    "name": "What is a lexical environment? - JavaScript - CodeGuage",
                    "link": "https://www.codeguage.com/courses/js/functions-closures#What_is_a_lexical_environment"
                  },
                  {
                    "name": "Lexical scoping - JavaScript - MDN",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#lexical_scoping"
                  },
                  {
                    "name": "Lexical Scope in JavaScript - What Exactly Is Scope in JS?",
                    "link": "https://www.freecodecamp.org/news/javascript-lexical-scope-tutorial/"
                  }
                ]
              },
              {
                "name": "Closures",
                "recommendation-type": "opinion",
                "description": "Function closures are one of the most powerful, yet most misunderstood, concepts of JavaScript that are actually really simple to understand. A closure refers to a function along with its lexical environment. It is essentially what allows us to return a function A, from another function B, that remembers the local variables defined in B, even after B exits. The idea of closures is employed in nearly every other JavaScript program, hence, it’s paramount for a JavaScript developer to know it really well.",
                "resources": [
                  {
                    "name": "JavaScript Closures - The Simplest Explanation",
                    "link": "https://www.codeguage.com/courses/js/functions-closures"
                  }
                ]
              }
            ]
          },
          {
            "name": "Built-in functions",
            "recommendation-type": "opinion",
            "description": "A JavaScript method is a property containing a function definition. In other words, when the data stored on an object is a function we call that a method. To differentiate between properties and methods, we can think of it this way: A property is what an object has, while a method is what an object does. Since JavaScript methods are actions that can be performed on objects, we first need to have objects to start with. There are several objects built into JavaScript which we can use.",
            "resources": [
              {
                "name": "JavaScript Built-in Functions",
                "link": "https://www.tutorialspoint.com/javascript/javascript_builtin_functions.htm"
              },
              {
                "name": "Built-in Methods in Javascript",
                "link": "https://dev.to/elpepebenitez/built-in-methods-in-javascript-4bll"
              },
              {
                "name": "Built-in Functions:",
                "link": "https://www.tutorialride.com/javascript/javascript-built-in-functions.htm"
              }
            ]
          }
        ]
      },
      "Strict Mode": {
        "description": "JavaScript’s strict mode is a way to opt-in to a restricted variant of JavaScript, thereby implicitly opting out of “sloppy mode”. Strict mode isn’t just a subset: it intentionally has different semantics from regular code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don’t rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist so that scripts can opt into strict mode incrementally.\n\nStrict mode makes several changes to normal JavaScript semantics:\n\n- Eliminates some JavaScript silent errors by changing them to throw errors.\n- Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes run faster than identical code that’s not strict mode.\n- Prohibits some syntax likely to be defined in future versions of ECMAScript.",
        "resources": [
          {
            "name": "Strict mode",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"
          },
          {
            "name": "Strict mode in JavaScript",
            "link": "https://javascript.info/strict-mode"
          }
        ],
        "order": 11,
        "options": []
      },
      "Using (this) Keyword": {
        "description": "In JavaScript, the this keyword is a little different compared to other languages. It refers to an object, but it depends on how or where it is being invoked. It also has some differences between strict mode and non-strict mode. In an object method, this refers to the object. Alone, this refers to the global object. In a function, this refers to the global object. In a function, in strict mode, this is undefined. In an event, this refers to the element that received the event. Methods like call(), apply(), and bind() can refer this to any object.",
        "resources": [
          {
            "name": "The JavaScript this Keyword",
            "link": "https://www.w3schools.com/js/js_this.asp"
          },
          {
            "name": "This Keyword",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"
          }
        ],
        "order": 12,
        "options": [
          {
            "name": "Function Borrowing",
            "recommendation-type": "opinion",
            "description": "Function borrowing allows us to use the methods of one object on a different object without having to make a copy of that method and maintain it in two separate places. It is accomplished through the use of .call(), .apply(), or .bind(), all of which exist to explicitly set this on the method we are borrowing.",
            "resources": [
              {
                "name": "Function borrowing",
                "link": "https://medium.com/@ensallee/function-borrowing-in-javascript-4bd671e9d7b4"
              }
            ]
          },
          {
            "name": "Explicit binding",
            "recommendation-type": "opinion",
            "description": "Explicit binding is when you use the call or apply methods to explicitly set the value of this in a function. Explicit Binding can be applied using call(), apply(), and bind().",
            "resources": [
              {
                "name": "Explicit Binding",
                "link": "https://medium.com/swlh/javascript-this-ac28f8e0f65d"
              },
              {
                "name": "Explicit Binding rule for this keyword",
                "link": "https://medium.com/@msinha2801/explicit-binding-rule-for-this-keyword-in-js-712405b0a11"
              }
            ],
            "options": [
              {
                "name": "call",
                "recommendation-type": "opinion",
                "description": "Explicit binding is when you use the call or apply methods to explicitly set the value of this in a function. Explicit Binding can be applied using call(), apply(), and bind().",
                "resources": [
                  {
                    "name": "Explicit Binding",
                    "link": "https://medium.com/swlh/javascript-this-ac28f8e0f65d"
                  },
                  {
                    "name": "Explicit Binding rule for this keyword",
                    "link": "https://medium.com/@msinha2801/explicit-binding-rule-for-this-keyword-in-js-712405b0a11"
                  }
                ]
              },
              {
                "name": "apply",
                "recommendation-type": "opinion",
                "description": "Explicit binding is when you use the call or apply methods to explicitly set the value of this in a function. Explicit Binding can be applied using call(), apply(), and bind().",
                "resources": [
                  {
                    "name": "Explicit Binding",
                    "link": "https://medium.com/swlh/javascript-this-ac28f8e0f65d"
                  },
                  {
                    "name": "Explicit Binding rule for this keyword",
                    "link": "https://medium.com/@msinha2801/explicit-binding-rule-for-this-keyword-in-js-712405b0a11"
                  }
                ]
              },
              {
                "name": "bind",
                "recommendation-type": "opinion",
                "description": "Explicit binding is when you use the call or apply methods to explicitly set the value of this in a function. Explicit Binding can be applied using call(), apply(), and bind().",
                "resources": [
                  {
                    "name": "Explicit Binding",
                    "link": "https://medium.com/swlh/javascript-this-ac28f8e0f65d"
                  },
                  {
                    "name": "Explicit Binding rule for this keyword",
                    "link": "https://medium.com/@msinha2801/explicit-binding-rule-for-this-keyword-in-js-712405b0a11"
                  }
                ]
              }
            ]
          },
          {
            "name": "This in a method",
            "recommendation-type": "opinion",
            "description": "Methods are properties of an object which are functions. The value of this inside a method is equal to the calling object. In simple words, this value is the object 'before dot', the one used to call the method.",
            "resources": [
              {
                "name": "this in methods",
                "link": "https://javascript.info/object-methods#this-in-methods"
              },
              {
                "name": "Short and clear post about the this keyword",
                "link": "https://www.w3schools.com/js/js_this.asp"
              }
            ]
          },
          {
            "name": "This in a function",
            "recommendation-type": "opinion",
            "description": "The keyword this when used in a function refers to the global object. Note: in a browser window, the global object is the window object.",
            "resources": [
              {
                "name": "this in a function",
                "link": "https://www.w3schools.com/js/js_this.asp"
              }
            ]
          },
          {
            "name": "Using this alone",
            "recommendation-type": "opinion",
            "description": "The keyword this when used alone refers to the global object. Note: in a browser window, the global object is the window object.",
            "resources": [
              {
                "name": "this Alone",
                "link": "https://www.w3schools.com/js/js_this.asp"
              }
            ]
          },
          {
            "name": "This in event handlers",
            "recommendation-type": "opinion",
            "description": "The keyword this when used in an event handler refers to the element that received the event.",
            "resources": [
              {
                "name": "this in Event handlers",
                "link": "https://www.w3schools.com/js/js_this.asp"
              }
            ]
          },
          {
            "name": "This in arrow functions",
            "recommendation-type": "opinion",
            "description": "The keyword this when used in an arrow function refers to the parent object.",
            "resources": [
              {
                "name": "this keyword and arrow function",
                "link": "https://stackoverflow.com/questions/66518020/javascript-this-keyword-and-arrow-function"
              }
            ]
          }
        ]
      },
      "Asynchronous JavaScript": {
        "description": "Asynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished. Once that task has finished, your program is presented with the result. Many functions provided by browsers, especially the most interesting ones, can potentially take a long time, and therefore, are asynchronous. For example: Making HTTP requests using fetch() Accessing a user’s camera or microphone using getUserMedia() Asking a user to select files using showOpenFilePicker() So even though you may not have to implement your own asynchronous functions very often, you are very likely to need to use them correctly.",
        "resources": [
          {
            "name": "Asynchronous JavaScript - MDN",
            "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing"
          }
        ],
        "order": 13,
        "options": [
          {
            "name": "Event Loop",
            "recommendation-type": "opinion",
            "description": "The Event Loop is one of the most important aspects to understand about Node.js. Why is this so important? Because it explains how Node.js can be asynchronous and have non-blocking I/O, it explains the 'killer feature' of Node.js, which made it this successful.",
            "resources": [
              {
                "name": "The Node.Js Event Loop",
                "link": "https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop"
              },
              {
                "name": "JavaScript Visualized: Event Loop",
                "link": "https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop"
              },
              {
                "name": "What the heck is the event loop anyway?",
                "link": "https://www.youtube.com/watch?v=8aGhZQkoFbQ"
              },
              {
                "name": "In the loop: JS conf 2018",
                "link": "https://www.youtube.com/watch?v=cCOL7MC4Pl0"
              }
            ]
          },
          {
            "name": "setTimeout",
            "recommendation-type": "opinion",
            "description": "The setTimeout runs a function after the specified period expires. Times are declared in milliseconds.",
            "resources": [
              {
                "name": "JavaScript MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout"
              },
              {
                "name": "W3Schools - JavaScript - setTimeOut",
                "link": "https://www.w3schools.com/jsref/met_win_settimeout.asp"
              },
              {
                "name": "setInterval and setTimeout: timing events",
                "link": "https://www.youtube.com/watch?v=kOcFZV3c75I"
              },
              {
                "name": "setTimeout EXPLAINED in 5 minutes!",
                "link": "https://www.youtube.com/watch?v=z9lJb4D3nJY"
              }
            ]
          },
          {
            "name": "setInterval",
            "recommendation-type": "opinion",
            "description": "The setInterval() method helps us to repeatedly execute a function after a fixed delay. It returns a unique interval ID which can later be used by the clearInterval() method, which stops further repeated execution of the function. setInterval() is similar to setTimeout, with a difference. Instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds):",
            "resources": [
              {
                "name": "Scheduling: setTimeout and setInterval",
                "link": "https://javascript.info/settimeout-setinterval"
              },
              {
                "name": "What is the use of setInterval() method in JavaScript?",
                "link": "https://www.geeksforgeeks.org/what-is-setinterval-in-javascript/"
              }
            ]
          },
          {
            "name": "Callbacks",
            "recommendation-type": "opinion",
            "description": "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
            "resources": [
              {
                "name": "Callbacks in JavaScript",
                "link": "https://javascript.info/callbacks"
              },
              {
                "name": "Callback Functions",
                "link": "https://developer.mozilla.org/en-US/docs/Glossary/Callback_function"
              },
              {
                "name": "W3School CallBack Function",
                "link": "https://www.w3schools.com/js/js_callback.asp"
              }
            ],
            "options": [
              {
                "name": "Callback Hell",
                "recommendation-type": "opinion",
                "description": "The callback hell is when we try to write asynchronous JavaScript in a way where execution happens visually from top to bottom, creating a code that has a pyramid shape with many }) at the end.",
                "resources": [
                  {
                    "name": "Callback Hell",
                    "link": "http://callbackhell.com/"
                  },
                  {
                    "name": "Callbacks in Callbacks - Pyramid of Doom",
                    "link": "https://javascript.info/callbacks#pyramid-of-doom"
                  }
                ]
              }
            ]
          },
          {
            "name": "Promises",
            "recommendation-type": "opinion",
            "description": "Promises are a much better way to work with asynchronous code in JavaScript than the old and error-prone callback approach. They were introduced into JavaScript with ECMAScript 6. Using promises, we can manage extremely complex asynchronous code with rigorous error-handling setup, write code in a more or less synchronous style, and keep ourselves from running into the so-called callback hell.",
            "resources": [
              {
                "name": "A Detailed Introduction to Promises",
                "link": "https://www.codeguage.com/courses/advanced-js/promises-introduction"
              },
              {
                "name": "JavaScript Promises - Basics",
                "link": "https://www.codeguage.com/courses/advanced-js/promises-basics"
              },
              {
                "name": "JavaScript Promises - Chaining",
                "link": "https://www.codeguage.com/courses/advanced-js/promises-chaining"
              },
              {
                "name": "JavaScript Promises - Error Handling",
                "link": "https://www.codeguage.com/courses/advanced-js/promises-error-handling"
              }
            ],
            "options": [
              {
                "name": "Async/Await",
                "recommendation-type": "opinion",
                "description": "async/await is a special syntax to work with promises in a more comfortable fashion. We use async keyword to declare a async function that returns a Promise, and the await keyword makes a function wait for a Promise.",
                "resources": [
                  {
                    "name": "Async/await",
                    "link": "https://javascript.info/async-await"
                  },
                  {
                    "name": "async function",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
                  },
                  {
                    "name": "JavaScript Promises - Chaining",
                    "link": "https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/"
                  },
                  {
                    "name": "JavaScript Async/Await Tutorial - Learn Callbacks, Promises, and Async/Await in JS by Making Ice Cream",
                    "link": "https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Working with APIs": {
        "description": "When working with remote APIs, you need a way to interact with those APIs. Modern JavaScript provides two native ways to send HTTP requests to remote servers, XMLHttpRequest and Fetch.",
        "resources": [
          {
            "name": "Fetching data from the server",
            "link": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data"
          },
          {
            "name": "XMLHttpRequest",
            "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"
          },
          {
            "name": "Fetch API",
            "link": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
          },
          {
            "name": "Is fetch API better than XMLHTTPRequest",
            "link": "https://medium.com/beginners-guide-to-mobile-web-development/the-fetch-api-2c962591f5c"
          },
          {
            "name": "Ajax Battle: XMLHttpRequest vs the Fetch API",
            "link": "https://blog.openreplay.com/ajax-battle-xmlhttprequest-vs-the-fetch-api"
          }
        ],
        "order": 14,
        "options": [
          {
            "name": "XMLHttpRequest",
            "recommendation-type": "opinion",
            "description": "XMLHttpRequest (XHR) is a built-in browser object that can be used to interact with the server. XHR allows you to update data without having to reload a web page. Despite the word XML in its name, XHR is not only used to retrieve data with XML format; we can use it with any type of data, like JSON, file(s), and much more.",
            "resources": [
              {
                "name": "Using XMLHttpRequest",
                "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest"
              },
              {
                "name": "Network request - XMLHttpRequest",
                "link": "https://javascript.info/xmlhttprequest"
              },
              {
                "name": "W3Schools",
                "link": "https://www.w3schools.com/xml/xml_http.asp"
              }
            ]
          },
          {
            "name": "Fetch",
            "recommendation-type": "opinion",
            "description": "The fetch() method in JavaScript is used to request the server and load the information on the webpages. The request can be of any APIs that return the data of the format JSON or XML. This method returns a promise.",
            "resources": [
              {
                "name": "Fetch MDN Docs",
                "link": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
              },
              {
                "name": "Fetch W3school Docs",
                "link": "https://www.w3schools.com/jsref/api_fetch.asp"
              },
              {
                "name": "Network request - Fetch",
                "link": "https://javascript.info/fetch"
              }
            ]
          }
        ]
      },
      "Classes": {
        "description": "Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but have some syntax and semantics that are not shared with ES5 class-like semantics.",
        "resources": [
          {
            "name": "Classes in JavaScript",
            "link": "https://javascript.info/classes"
          },
          {
            "name": "JavaScript Classes",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"
          }
        ],
        "order": 15,
        "options": []
      },
      "Javascript Iterators and Generators": {
        "description": "Iterators and generators, introduced into JavaScript with ECMAScript 6, represent an extremely useful concept related to iteration in the language. Iterators are objects, abiding by the iterator protocol, that allows us to easily iterate over a given sequence in various ways, such as using the for...of loop. Generators, on the other hand, allow us to use functions and the yield keyword to easily define iterable sequences that are iterators as well.",
        "resources": [
          {
            "name": "Introduction to Iterators - Advanced JavaScript",
            "link": "https://www.codeguage.com/courses/advanced-js/iteration-introduction"
          },
          {
            "name": "A Detailed Discussion on Iterators - Advanced JavaScript",
            "link": "https://www.codeguage.com/courses/advanced-js/iteration-iterators"
          },
          {
            "name": "What Exactly Are Generators? - Advanced JavaScript",
            "link": "https://www.codeguage.com/courses/advanced-js/iteration-generators"
          }
        ],
        "order": 16,
        "options": []
      },
      " Modules in Javascript": {
        "description": "Modules encapsulate all sorts of code like functions and variables and expose all this to other files. Generally, we use it to break our code into separate files to make it more maintainable. They were introduced into JavaScript with ECMAScript 6.",
        "resources": [
          {
            "name": "Modules, introduction",
            "link": "https://javascript.info/modules-intro"
          },
          {
            "name": "Export and Import",
            "link": "https://javascript.info/import-export"
          },
          {
            "name": "Dynamic imports",
            "link": "https://javascript.info/modules-dynamic-imports"
          }
        ],
        "order": 17,
        "options": [
          {
            "name": "CommonJS",
            "recommendation-type": "opinion",
            "description": "CommonJS modules are the original way to package JavaScript code for Node.js. Node.js also supports the ESModules standard used by browsers and other JavaScript runtimes, but CJS is still widely used in backend Node.js applications. Sometimes these modules will be written with a .cjs extension.",
            "resources": [
              {
                "name": "Modules in Javascript: CJS Section",
                "link": "https://www.freecodecamp.org/news/modules-in-javascript/#commonjsmodules"
              },
              {
                "name": "How the CJS Module System Works",
                "link": "https://blog.risingstack.com/node-js-at-scale-module-system-commonjs-require/"
              },
              {
                "name": "How to Import and Export Modules in CJS",
                "link": "https://www.youtube.com/watch?v=XTND4rjATXA"
              }
            ]
          },
          {
            "name": "ESModules",
            "recommendation-type": "opinion",
            "description": "ESModules is a standard that was introduced with ES6 (2015). The idea was to standardize how JS modules work and implement these features in browsers. This standard is widely used with frontend frameworks such as react and can also be used in the backend with Node.js. Sometimes these modules will be written with a .mjs extension.",
            "resources": [
              {
                "name": "Introduction to Modules in Javascript",
                "link": "https://www.freecodecamp.org/news/modules-in-javascript/"
              },
              {
                "name": "Full ESM module overview from MDN",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"
              },
              {
                "name": "Full ESM module overview from js.info",
                "link": "https://javascript.info/modules"
              },
              {
                "name": "Node.js documentation for ESModules",
                "link": "https://nodejs.org/api/esm.html"
              },
              {
                "name": "JavaScript ES6 Modules Simplified",
                "link": "https://www.youtube.com/watch?v=cRHQNNcYf6s"
              }
            ]
          }
        ]
      },
      "Memory Management": {
        "description": "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don’t need to worry about memory management.",
        "resources": [
          {
            "name": "JavaScript Garbage Collection",
            "link": "https://javascript.info/garbage-collection"
          },
          {
            "name": "Memory Management in JavaScript",
            "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management"
          }
        ],
        "order": 18,
        "options": [
          {
            "name": "Memory lifecycle",
            "recommendation-type": "opinion",
            "description": "Regardless of the programming language, the memory life cycle is pretty much always the same: Allocate the memory you need, Use the allocated memory (read, write), Release the allocated memory when it is not needed anymore. The second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.",
            "resources": [
              {
                "name": "MDN docs - Memory Management",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management"
              },
              {
                "name": "Lifecycle in Memory Management",
                "link": "https://medium.com/swlh/the-lifecycle-of-memory-in-javascript-5b5bffc5ff4c"
              }
            ]
          },
          {
            "name": "Garbage Collection",
            "recommendation-type": "opinion",
            "description": "Memory management in JavaScript is performed automatically and invisibly to us. We create primitives, objects, functions… All that takes memory. The main concept of memory management in JavaScript is reachability.",
            "resources": [
              {
                "name": "JavaScript Garbage Collection",
                "link": "https://javascript.info/garbage-collection"
              },
              {
                "name": "Memory Management in JavaScript",
                "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management"
              }
            ]
          }
        ]
      },
      "Using chrome dev tools": {
        "description": "These are a set of tools built into the browser to aid frontend developers diagnose and solve various issues in their applications — such as JavaScript and logical bugs, CSS styling issues or even just making quick temporary alterations to the DOM. To enter the dev tools, right click and click Inspect (or press ctrl+shift+c/cmd+opt+c) to enter the Elements panel. Here you can debug CSS and HTML issues. If you want to see logged messages or interact with javascript, enter the Console tab from the tabs above (or press ctrl+shift+j or F12 /cmd+opt+j to enter it directly). Another very useful feature in the Chrome dev tools is the Lighthouse (for checking performance). NOTE: This isn’t a chrome-specific feature, and most browsers (Chromium based or otherwise) will have their own, largely-similar set of devtools.",
        "resources": [
          {
            "name": "Official Docs",
            "link": "https://developer.chrome.com/docs/devtools/overview/"
          },
          {
            "name": "Mastering Chrome Dev Tools",
            "link": "https://www.freecodecamp.org/news/mastering-chrome-developer-tools-next-level-front-end-development-techniques-3ac0b6fe8a3/"
          }
        ],
        "order": 19,
        "options": [
          {
            "name": "Debugging issues",
            "recommendation-type": "opinion",
            "description": "When you’re just starting out with JavaScript development, you might use a lot of console.log() statement in your code to log and check values of variables while debugging. The results of these would show up in the Console panel, along with a reference to the line and file of code which originated it. However, for quicker, more complex and easier to handler debugging (which also doesn’t litter your codebase with console.log()s), breakpoints and the sources panel is your friend.",
            "resources": [
              {
                "name": "Debugging JavaScript in the sources panel",
                "link": "https://developer.chrome.com/docs/devtools/javascript/"
              }
            ]
          },
          {
            "name": "Debugging Memory Leaks",
            "recommendation-type": "opinion",
            "description": "In JavaScript, memory leaks commonly occur within heap allocated memory, where short-lived objects are attached to long-lived ones and the Garbage Collector cannot safely de-allocate that memory as it is still referenced from the root set (the global object).",
            "resources": [
              {
                "name": "Catching memory leaks with Chrome DevTools",
                "link": "https://medium.com/coding-blocks/catching-memory-leaks-with-chrome-devtools-57b03acb6bb9"
              },
              {
                "name": "Effective Javascript Debugging",
                "link": "https://medium.com/swlh/effective-javascript-debugging-memory-leaks-75059b2436f6"
              },
              {
                "name": "Debugging JavaScript memory leaks",
                "link": "https://www.debugbear.com/blog/debugging-javascript-memory-leaks"
              },
              {
                "name": "Debugging Memory Leaks In Production JavaScript Applications",
                "link": "https://www.jackhoy.com/web-applications/2020/10/21/debugging-memory-leaks-in-nodejs.html"
              }
            ]
          },
          {
            "name": "Debugging performance",
            "recommendation-type": "opinion",
            "description": "Enter the dev tools and check out the Lighthouse tab. This is essentially a series of tests which analyses the currently open website on a bunch of metrics related to performance, page speed, accessibility, etc. Feel free to run the tests by clicking the Analyse Page Load button (you might want to do this in an incognito tab to avoid errors arising from extensions you’re using). Once you have the results, take your time and read through them (and do click through to the reference pages mentioned alongside each test result to know more about it!)",
            "resources": []
          }
        ]
      },
      "For ecosystem and more, check other tracks involving JavaScript": {
        "resources": [
          {
            "name": "Backend roadmaps",
            "link": "https://roadmap.sh/backend"
          },
          {
            "name": "Frontend roadmaps",
            "link": "https://roadmap.sh/frontend"
          }
        ]
      }
    }
  }
}
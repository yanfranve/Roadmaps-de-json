{
    "Skill": {
        "Go Developer": {
            "description": "Step by step guide to becoming a Go developer in 2023 ",
            "Learn the Basics": {
                "description": "Learn the common concepts of Go like variables, loops, conditional statements, functions, data types, and so on. A good starting point for Go basics is its official documentation.",
                "resources": [
                    {
                        "name": "Official Go Tutorial",
                        "link": "https://golang.org/doc/tutorial"
                    },
                    {
                        "name": "Go Tutorial",
                        "link": "https://tour.golang.org/welcome/1"
                    }
                ],
                "order": 1,
                "options": [
                    {
                        "name": "Basic Syntax",
                        "recommendation-type": "opinion",
                        "description": "Learn about the basic syntax of Go, such as how Go programs are executed, package imports, the main function, and more.",
                        "resources": [
                            {
                                "name": "Go Tutorial: Getting started",
                                "link": "https://go.dev/doc/tutorial/getting-started"
                            },
                            {
                                "name": "Go by Example: Hello World",
                                "link": "https://gobyexample.com/hello-world"
                            },
                            {
                                "name": "W3schools: Go Syntax",
                                "link": "https://www.w3schools.com/go/go_syntax.php"
                            }
                        ]
                    },
                    {
                        "name": "Variables in Go",
                        "recommendation-type": "opinion",
                        "description": "A variable is the name given to a memory location to store a value of a specific type. Go provides multiple ways to declare and use variables.",
                        "resources": [
                            {
                                "name": "Go Variables",
                                "link": "https://go.dev/tour/basics/8"
                            },
                            {
                                "name": "Go by Example: Variables",
                                "link": "https://gobyexample.com/variables"
                            },
                            {
                                "name": "W3schools Go variables",
                                "link": "https://www.w3schools.com/go/go_variables.php"
                            }
                        ]
                    },
                    {
                        "name": "For Loop",
                        "recommendation-type": "opinion",
                        "description": "Go has only one looping construct, the for loop. The basic for loop has three components separated by semicolons.",
                        "resources": [
                            {
                                "name": "For Loop in Golang",
                                "link": "https://go.dev/tour/flowcontrol/1"
                            },
                            {
                                "name": "Effective Go: For loop",
                                "link": "https://go.dev/doc/effective_go#for"
                            },
                            {
                                "name": "Go by Example: For loop",
                                "link": "https://gobyexample.com/for"
                            },
                            {
                                "name": "5 basic for loop patterns",
                                "link": "https://yourbasic.org/golang/for-loop/"
                            }
                        ]
                    },
                    {
                        "name": "Range",
                        "recommendation-type": "opinion",
                        "description": "Range is used with For Loops to iterate over each element in arrays, strings, and other data structures.",
                        "resources": [
                            {
                                "name": "Go Ranges",
                                "link": "https://go.dev/tour/moretypes/16"
                            },
                            {
                                "name": "Go by Example: Range",
                                "link": "INSERT_GO_BY_EXAMPLE_RANGE_LINK_HERE"
                            },
                            {
                                "name": "Go ranges basic patterns",
                                "link": "https://yourbasic.org/golang/for-loop-range-array-slice-map-channel/"
                            }
                        ]
                    },
                    {
                        "name": "Conditional Statements",
                        "recommendation-type": "opinion",
                        "description": "Conditional statements are used to run code only if a certain condition is true; Go supports if statements, if/else statements, and switch case statements.",
                        "resources": [
                            {
                                "name": "Effective Go: if statement",
                                "link": "https://go.dev/doc/effective_go#if"
                            },
                            {
                                "name": "Basic conditional patterns",
                                "link": "https://yourbasic.org/golang/if-else-statement/"
                            },
                            {
                                "name": "Go by Example: If-Else",
                                "link": "https://gobyexample.com/if-else"
                            },
                            {
                                "name": "Golang programs If-Else statement",
                                "link": "https://www.golangprograms.com/golang-if-else-statements.html"
                            },
                            {
                                "name": "Golang programs switch case",
                                "link": "https://www.golangprograms.com/golang-switch-case-statements.htmlINSERT_GOLANG_PROGRAMS_SWITCH_CASE_LINK_HERE"
                            }
                        ]
                    },
                    {
                        "name": "Errors/Panic/Recover",
                        "recommendation-type": "opinion",
                        "description": "In lieu of adding exception handlers, the Go creators exploited Go’s ability to return multiple values. The most commonly used Go technique for issuing errors is to return the error as the last value in a return. A panic typically means something went unexpectedly wrong. Mostly used to fail fast on errors that shouldn’t occur during normal operation, or that we aren’t prepared to handle gracefully. Panic recovery in Go depends on a feature of the language called deferred functions. Go has the ability to guarantee the execution of a function at the moment its parent function returns. This happens regardless of whether the reason for the parent function’s return is a return statement, the end of the function block, or a panic.",
                        "resources": [
                            {
                                "name": "Error handling and Go",
                                "link": "https://go.dev/blog/error-handling-and-go"
                            },
                            {
                                "name": "Go Defer, Panic and Recover",
                                "link": "https://go.dev/blog/defer-panic-and-recoverNSERT_GO_DEFER_PANIC_RECOVER_LINK_HERE"
                            },
                            {
                                "name": "Effective error handling in Go",
                                "link": "https://earthly.dev/blog/golang-errors/"
                            }
                        ]
                    },
                    {
                        "name": "Conditional Statements",
                        "recommendation-type": "opinion",
                        "description": "Conditional statements are used to run code only if a certain condition is true; Go supports if statements, if/else statements, and switch case statements.",
                        "resources": [
                            {
                                "name": "Effective Go: if statement",
                                "link": "https://go.dev/doc/effective_go#if"
                            },
                            {
                                "name": "Basic conditional patterns",
                                "link": "https://yourbasic.org/golang/if-else-statement/"
                            },
                            {
                                "name": "Go by Example: If-Else",
                                "link": "https://gobyexample.com/if-else"
                            },
                            {
                                "name": "Golang programs If-Else statement",
                                "link": "https://www.golangprograms.com/golang-if-else-statements.html"
                            },
                            {
                                "name": "Golang programs switch case",
                                "link": "https://www.golangprograms.com/golang-switch-case-statements.html"
                            }
                        ]
                    },
                    {
                        "name": "Functions",
                        "recommendation-type": "opinion",
                        "description": "Discover how functions work in Go, the list of resources below will cover :\nHow to define and call functions in Go?\nNamed returns in Go?\nHandle multiple return types\nDifferent types of functions in Go.\nVisit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "Go by Example: Functions",
                                "link": "https://gobyexample.com/functions"
                            },
                            {
                                "name": "Functions in go",
                                "link": "https://www.golangprograms.com/go-language/functions.html"
                            }
                        ]
                    },
                    {
                        "name": "Packages",
                        "recommendation-type": "opinion",
                        "description": "Packages are the most powerful part of the Go language. The purpose of a package is to design and maintain a large number of programs by grouping related features together into single units so that they can be easy to maintain and understand and independent of the other package programs. This modularity allows them to share and reuse. In Go language, every package is defined with a different name and that name is close to their functionality like “strings” package and it contains methods and functions that are only related to strings.",
                        "resources": [
                            {
                                "name": "How to create a package in Go",
                                "link": "https://example.com/create-package-go"
                            },
                            {
                                "name": "How to manage external dependencies in Go",
                                "link": "https://example.com/manage-dependencies-go"
                            },
                            {
                                "name": "Go Packages explorer",
                                "link": "https://example.com/go-packages-explorer"
                            },
                            {
                                "name": "Standard library",
                                "link": "https://example.com/standard-library-go"
                            },
                            {
                                "name": "Packages in Golang",
                                "link": "https://example.com/packages-golang"
                            }
                        ]
                    },
                    {
                        "name": "Type Casting",
                        "recommendation-type": "opinion",
                        "description": "Go doesn’t support automatic type conversion, but it allows type casting, which is the process of explicitly changing the variable type.",
                        "resources": [
                            {
                                "name": "Geeks for Geeks: Type casting",
                                "link": "https://www.geeksforgeeks.org/type-conversion-in-go/"
                            },
                            {
                                "name": "Tour of Go: Type Casting Basics",
                                "link": "https://tour.golang.org/moretypes/13"
                            },
                            {
                                "name": "Go Docs: Type Casting",
                                "link": "https://golang.org/ref/spec#Conversions"
                            }
                        ]
                    },
                    {
                        "name": "Type Inference",
                        "recommendation-type": "opinion",
                        "description": "Type inference gives Go the capability to detect the type of a value without being explicitly indicated, hence the possibility to declare variables without providing its type at first.",
                        "resources": [
                            {
                                "name": "Go Variables: Type Inference",
                                "link": "https://www.callicoder.com/golang-variables-zero-values-type-inference/#type-inference"
                            },
                            {
                                "name": "Tour of Go: Type Inference",
                                "link": "https://go.dev/tour/basics/14"
                            }
                        ]
                    },
                    {
                        "name": "Arrays",
                        "recommendation-type": "opinion",
                        "description": "In Go, an array is a collection of elements of the same type with a fixed size defined when the array is created.",
                        "resources": [
                            {
                                "name": "Go Arrays",
                                "link": "https://go.dev/tour/moretypes/6"
                            },
                            {
                                "name": "Effective Go: Arrays",
                                "link": "https://go.dev/doc/effective_go#arrays"
                            },
                            {
                                "name": "Learn Go Programming - Arrays (by freeCodeCamp on YouTube)",
                                "link": "https://youtu.be/YS4e4q9oBaU?t=6473"
                            }
                        ]
                    },
                    {
                        "name": "Slices",
                        "recommendation-type": "opinion",
                        "description": "Slices are similar to arrays but are more powerful and flexible. Like arrays, slices are also used to store multiple values of the same type in a single variable. However, unlike arrays, the length of a slice can grow and shrink as you see fit.",
                        "resources": [
                            {
                                "name": "Go Slices",
                                "link": "https://go.dev/tour/moretypes/7"
                            },
                            {
                                "name": "Effective Go: Slices",
                                "link": "https://go.dev/doc/effective_go#slices"
                            },
                            {
                                "name": "Slices in Go",
                                "link": "https://www.w3schools.com/go/go_slices.php"
                            },
                            {
                                "name": "Learn Go Programming - Slices (by freeCodeCamp on YouTube)",
                                "link": "https://youtu.be/YS4e4q9oBaU?t=6473"
                            }
                        ]
                    },
                    {
                        "name": "Maps",
                        "recommendation-type": "opinion",
                        "description": "Maps are the data structure in Go, where we use whenever we want to have mappings between key:value pairs. They have flexibility in terms of removing or adding elements into them. Maps do not allow duplicate entries while data are kept unordered.",
                        "resources": [
                            {
                                "name": "Go Maps",
                                "link": "https://go.dev/tour/moretypes/19"
                            },
                            {
                                "name": "Effective Go: Maps",
                                "link": "https://go.dev/doc/effective_go#maps"
                            },
                            {
                                "name": "Maps in Go",
                                "link": "https://www.w3schools.com/go/go_maps.php"
                            },
                            {
                                "name": "Golang Tutorial #15 - Maps (by Tech With Tim on YouTube)",
                                "link": "https://www.youtube.com/watch?v=yJE2RC37BF4"
                            }
                        ]
                    },
                    {
                        "name": "Make",
                        "recommendation-type": "opinion",
                        "description": "Golang’s built-in function make helps us create and initialize slices, maps, and channels, depending on the arguments that are provided to the function.",
                        "resources": [
                            {
                                "name": "Effective Go: Allocation with make",
                                "link": "https://go.dev/doc/effective_go#allocation_make"
                            },
                            {
                                "name": "Create a slice with make",
                                "link": "https://www.golangprograms.com/how-to-create-slice-using-make-function-in-golang.html"
                            },
                            {
                                "name": "Create a map with make",
                                "link": "https://www.golangprograms.com/golang-package-examples/how-to-create-map-using-the-make-function-in-go.html"
                            },
                            {
                                "name": "Create a channel with make",
                                "link": "https://www.programiz.com/golang/channel#channel"
                            }
                        ]
                    },
                    {
                        "name": "Structs",
                        "recommendation-type": "opinion",
                        "description": "Structs are user-defined types that help us create a collection of data describing a single entity.",
                        "resources": [
                            {
                                "name": "Go Structs",
                                "link": "https://go.dev/tour/moretypes/2"
                            },
                            {
                                "name": "Go by Example: Structs",
                                "link": "https://gobyexample.com/structs"
                            },
                            {
                                "name": "Structs in Go",
                                "link": "https://www.youtube.com/watch?v=NMTN543WVQY"
                            },
                            {
                                "name": "Structs, Struct tags",
                                "link": "https://www.youtube.com/watch?v=0m6ifd9n_cy&list=ploilbko9rg3skrcj37kn5zj803hhiurk6&index=13"
                            }
                        ]
                    }
                ]
            },
            "Go advanced": {
                "description": " ",
                "resources": [],
                "order": 2,
                "options": [
                    {
                        "name": "Modules",
                        "recommendation-type": "opinion",
                        "description": "Go modules are a group of related packages that are versioned and distributed together. They specify the requirements of our project, list all the required dependencies, and help us keep track of the specific versions of installed dependencies.",
                        "resources": [
                            {
                                "name": "Go Modules",
                                "link": "https://go.dev/blog/using-go-modules"
                            },
                            {
                                "name": "DigitalOcean: How to use Go Modules",
                                "link": "https://www.youtube.com/watch?v=9cV1KESTJRc"
                            },
                            {
                                "name": "Go Modules Explained in 5 Minutes (by Golang Dojo on YouTube)",
                                "link": "https://www.digitalocean.com/community/tutorials/how-to-use-go-modulesINSERT_YOUTUBE_GO_MODULES_VIDEO_LINK_HERE"
                            },
                            {
                                "name": "How to create a module in Go",
                                "link": "https://youtu.be/7xSxIwWJ9R4"
                            },
                            {
                                "name": "How to use modules in Go",
                                "link": "https://go.dev/doc/tutorial/create-module"
                            },
                            {
                                "name": "How to modify existing projects to use Go modules",
                                "link": "https://go.dev/blog/using-go-modules"
                            },
                            {
                                "name": "How to modify existing projects to use Go modules ",
                                "link": "https://jfrog.com/blog/converting-projects-for-go-modules/"
                            }
                        ]
                    },
                    {
                        "name": "Working with JSON",
                        "recommendation-type": "opinion",
                        "description": "JSON (JavaScript Object Notation) is a simple data interchange format. Syntactically it resembles the objects and lists of JavaScript. It is most commonly used for communication between web back-ends and JavaScript programs running in the browser, but it is used in many other places, too.",
                        "resources": [
                            {
                                "name": "JSON",
                                "link": "https://go.dev/blog/json"
                            },
                            {
                                "name": "Guide to JSON in Golang",
                                "link": "https://www.sohamkamani.com/golang/json/"
                            },
                            {
                                "name": "JSON to GO",
                                "link": "https://mholt.github.io/json-to-go/"
                            },
                            {
                                "name": "Comprehensive Guide to using JSON in Go",
                                "link": "https://betterstack.com/community/guides/scaling-go/json-in-go/"
                            }
                        ]
                    },
                    {
                        "name": "Types and type assertions",
                        "recommendation-type": "opinion",
                        "description": "Type assertions in Golang provide access to the exact type of a variable of an interface.",
                        "resources": [
                            {
                                "name": "Types Assertions",
                                "link": "https://go.dev/tour/methods/15"
                            },
                            {
                                "name": "Type Assertion",
                                "link": "https://www.geeksforgeeks.org/type-assertions-in-golang/"
                            }
                        ]
                    },
                    {
                        "name": "Interfaces",
                        "recommendation-type": "opinion",
                        "description": "An interface in Go is a type that defines a set of methods. If we have a type (e.g. struct) that implements that set of methods, then we have a type that implements this interface.",
                        "resources": [
                            {
                                "name": "Go Interfaces",
                                "link": "https://go.dev/tour/methods/9"
                            },
                            {
                                "name": "Effective Go: Interfaces",
                                "link": "INSERT_EFFECTIVE_GO_INTERFACES_LINK_HERE"
                            },
                            {
                                "name": "Go by Example: Interfaces",
                                "link": "https://gobyexample.com/interfaces"
                            },
                            {
                                "name": "Golang Tutorial #22 - Interfaces (by Tech With Tim on YouTube)",
                                "link": "https://www.youtube.com/watch?v=lh_Uv2imp14"
                            },
                            {
                                "name": "Learn Go Interfaces",
                                "link": "https://www.youtube.com/watch?v=KB3ysH8cupY"
                            },
                            {
                                "name": "Understanding Go Interfaces",
                                "link": "https://www.youtube.com/watch?v=qJKQZKGZgf0"
                            }
                        ]
                    },
                    {
                        "name": "Context",
                        "recommendation-type": "opinion",
                        "description": "The context package provides a standard way to solve the problem of managing the state during a request. The package satisfies the need for request-scoped data and provides a standardized way to handle: Deadlines, Cancellation Signals, etc.",
                        "resources": [
                            {
                                "name": "Go Context",
                                "link": "https://pkg.go.dev/context"
                            },
                            {
                                "name": "Go by Example: Context",
                                "link": "https://gobyexample.com/context"
                            },
                            {
                                "name": "Digital Ocean: How to Use Contexts in Go",
                                "link": "https://www.digitalocean.com/community/tutorials/how-to-use-contexts-in-go"
                            },
                            {
                                "name": "Context in Go",
                                "link": "https://www.youtube.com/watch?v=LSzR0VEraWw"
                            },
                            {
                                "name": "Understanding Contexts in Go",
                                "link": "https://youtu.be/h2RdcrMLQAo"
                            }
                        ]
                    },
                    {
                        "name": "Goroutines",
                        "recommendation-type": "opinion",
                        "description": "Goroutines allow us to write concurrent programs in Go. Things like web servers handling thousands of requests or a website rendering new pages while also concurrently making network requests are a few examples of concurrency. In Go, each of these concurrent tasks are called Goroutines.",
                        "resources": [
                            {
                                "name": "Goroutines",
                                "link": "https://go.dev/tour/concurrency/1"
                            },
                            {
                                "name": "Effective Go: Goroutines",
                                "link": "https://go.dev/doc/effective_go#goroutines"
                            },
                            {
                                "name": "Goroutines in Golang",
                                "link": "https://www.geeksforgeeks.org/goroutines-concurrency-in-golang"
                            },
                            {
                                "name": "GoRoutines",
                                "link": "https://www.youtube.com/watch?v=LvgVSSpwND8"
                            },
                            {
                                "name": "Understanding Concurrency",
                                "link": "https://www.youtube.com/watch?v=V-0ifUKCkBI"
                            },
                            {
                                "name": "Go by Example: Goroutines",
                                "link": "https://gobyexample.com/goroutines"
                            },
                            {
                                "name": "Golang Goroutine Basics You MUST Learn! (by Golang Dojo on YouTube)",
                                "link": "https://youtu.be/oHIbeTmmTaA"
                            }
                        ]
                    },
                    {
                        "name": "Channels",
                        "recommendation-type": "opinion",
                        "description": "Channels are the pipes that connect concurrent goroutines. You can send values into channels from one goroutine and receive those values into another goroutine.",
                        "resources": [
                            {
                                "name": "Channels",
                                "link": "https://go.dev/tour/concurrency/2"
                            },
                            {
                                "name": "Effective Go: Channels",
                                "link": "https://go.dev/doc/effective_go#channels"
                            },
                            {
                                "name": "Go by Example: Channels",
                                "link": "https://gobyexample.com/channels"
                            },
                            {
                                "name": "Channels in Golang",
                                "link": "https://golangbot.com/channels/"
                            },
                            {
                                "name": "Channels",
                                "link": "https://www.youtube.com/watch?v=e4bu9g-bYtg"
                            },
                            {
                                "name": "GeeksForGeeks: Channel in Golang",
                                "link": "https://www.geeksforgeeks.org/channel-in-golang/"
                            },
                            {
                                "name": "Golang Channel Basics You must Know!",
                                "link": "https://youtu.be/LgCmPHqAuf4"
                            }
                        ]
                    },
                    {
                        "name": "Buffer",
                        "recommendation-type": "opinion",
                        "description": "The buffer belongs to the byte package of the Go language, and we can use these packages to manipulate the bytes of the string.",
                        "resources": [
                            {
                                "name": "Buffer Examples",
                                "link": "https://pkg.go.dev/bytes#example-Buffer"
                            },
                            {
                                "name": "Buffer",
                                "link": "https://www.educba.com/golang-buffer/"
                            },
                            {
                                "name": "Buffers in Golang",
                                "link": "https://www.youtube.com/watch?v=NoDRq6Twkts"
                            }
                        ]
                    },
                    {
                        "name": "Select",
                        "recommendation-type": "opinion",
                        "description": "The select statement lets a goroutine wait on multiple communication operations. A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready. The select statement is just like a switch statement, but in the select statement, case statement refers to communication, i.e. sent or receive operation on the channel.",
                        "resources": [
                            {
                                "name": "Select",
                                "link": "https://go.dev/tour/concurrency/5"
                            },
                            {
                                "name": "Go by Example: Select",
                                "link": "https://gobyexample.com/select"
                            },
                            {
                                "name": "Select in Golang",
                                "link": "https://www.geeksforgeeks.org/select-statement-in-go-language/"
                            },
                            {
                                "name": "Select Statement",
                                "link": "https://www.youtube.com/watch?v=1c7ttSJDMAI"
                            }
                        ]
                    },
                    {
                        "name": "Mutex",
                        "recommendation-type": "opinion",
                        "description": "Go allows us to run code concurrently using goroutines. However, when concurrent processes access the same piece of data, it can lead to race conditions. Mutexes are data structures provided by the sync package. They can help us place a lock on different sections of data so that only one goroutine can access it at a time.",
                        "resources": [
                            {
                                "name": "Using a Mutex in Go with Examples",
                                "link": "https://www.sohamkamani.com/golang/mutex/"
                            }
                        ]
                    }
                ]
            },
            "Building CLIs": {
                "description": "LLMs are used in a variety of ways. Here are some examples of how LLMs are used in the real world.",
                "resources": [],
                "order": 3,
                "options": [
                    {
                        "name": "Urfave cli",
                        "recommendation-type": "opinion",
                        "description": "Urfave cli is a simple, fast, and fun package for building command line apps in Go.Visit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "Urfave cli Github Repo",
                                "link": "https://github.com/urfave/cli"
                            },
                            {
                                "name": "https://cli.urfave.org/",
                                "link": "https://cli.urfave.org/"
                            },
                            {
                                "name": "How to Build cli in Go",
                                "link": "https://blog.hackajob.co/how-to-build-cli-in-go/"
                            },
                            {
                                "name": "Building CLI using urfave cli",
                                "link": "https://zerokspot.com/weblog/2021/01/25/building-a-cli-using-urfave-cli/"
                            }
                        ]
                    },
                    {
                        "name": "Cobra",
                        "recommendation-type": "opinion",
                        "description": "Cobra is a library for creating powerful modern CLI applications.Visit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "Cobra Github Repo",
                                "link": "https://github.com/spf13/cobra"
                            },
                            {
                                "name": "Cobra Website",
                                "link": "https://cobra.dev/"
                            },
                            {
                                "name": "Cobra Package Documentation",
                                "link": "https://pkg.go.dev/github.com/spf13/cobra/"
                            }
                        ]
                    }
                ]
            },
            "ORMs": {
                "description": "Object-relational mapping (ORM, O/RM, and O/R mapping tool) in computer science is a programming technique for converting data between type systems using object-oriented programming languages. This creates, in effect, a “virtual object database”, hence a layer of abstraction, that can be used from within the programming language. Most common ORM library in Go is GORM. ",
                "resources": [],
                "order": 4,
                "options": [
                    {
                        "name": "Gorm",
                        "recommendation-type": "opinion",
                        "description": "The GORM is a fantastic ORM library for Golang, aiming to be developer-friendly. It is an ORM library for dealing with relational databases, developed on top of the database/sql package. It offers a full-featured ORM experience.",
                        "resources": [
                            {
                                "name": "Gorm",
                                "link": "https://gorm.io/"
                            },
                            {
                                "name": "Gorm Package",
                                "link": "https://pkg.go.dev/gorm.io/gorm"
                            }
                        ]
                    }
                ]
            },
            "Web Frameworks": {
                "description": "There are several famous web frameworks for Go. Most common ones being:\n Beego,GinRevel,Echo\nVisit the following resources to learn more: ",
                "resources": [
                    {
                        "name": "Comparison of Web Frameworks",
                        "link": "https://github.com/diyan/go-web-framework-comparison/"
                    }
                ],
                "order": 5,
                "options": [
                    {
                        "name": "Beego",
                        "recommendation-type": "opinion",
                        "description": "Beego is used for rapid development of enterprise applications in Go, including RESTful APIs, web apps, and backend services. It is inspired by Tornado, Sinatra, and Flask. Beego has some Go-specific features such as interfaces and struct embedding.",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/beego/beego"
                            }
                        ]
                    },
                    {
                        "name": "Gin",
                        "recommendation-type": "opinion",
                        "description": "Gin is a high-performance HTTP web framework written in Golang (Go). Gin has a martini-like API and claims to be up to 40 times faster. Gin allows you to build web applications and microservices in Go.",
                        "resources": [
                            {
                                "name": "Gin Website",
                                "link": "https://github.com/gin-gonic/gin"
                            },
                            {
                                "name": "Gin Website",
                                "link": "https://pkg.go.dev/github.com/gin-gonic/gin"
                            }
                        ]
                    },
                    {
                        "name": "Revel",
                        "recommendation-type": "opinion",
                        "description": "Revel organizes endpoints into Controllers. They provide easy data binding and form validation. Revel makes Go Templates simple to use at scale. Register functionality to be called before or after actions.",
                        "resources": [
                            {
                                "name": "Revel Website",
                                "link": "https://revel.github.io/tutorial/index.html"
                            },
                            {
                                "name": "Revel Website",
                                "link": "https://pkg.go.dev/github.com/revel/revel"
                            }
                        ]
                    },
                    {
                        "name": "Echo",
                        "recommendation-type": "opinion",
                        "description": "Echo is a performance-focused, extensible, open-source Go web application framework. It is a minimalist web framework that stands between stdlib + router and a full-stack web framework.",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/labstack/echo"
                            },
                            {
                                "name": "Official Website",
                                "link": "https://echo.labstack.com/"
                            }
                        ]
                    },
                    {
                        "name": "Gorilla",
                        "recommendation-type": "opinion",
                        "description": "Gorilla is a web toolkit for the Go programming language that provides useful, composable packages for writing HTTP-based applications.",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/gorilla"
                            },
                            {
                                "name": "Official Website",
                                "link": "https://www.gorillatoolkit.org/"
                            }
                        ]
                    },
                    {
                        "name": "Go Fiber",
                        "recommendation-type": "opinion",
                        "description": "Go Fiber is an Express-inspired framework for Golang. Go Fiber is a web framework built on top of fast HTTP. It can be used to handle operations such as routing/endpoints, middleware, server request, etc.",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/gofiber/fiber"
                            },
                            {
                                "name": "Official Website Docs",
                                "link": "https://docs.gofiber.io/"
                            }
                        ]
                    },
                    {
                        "name": "Buffalo",
                        "recommendation-type": "opinion",
                        "description": "Buffalo helps you to generate a web project that already has everything from front-end (JavaScript, SCSS, etc.) to the back-end (database, routing, etc.) already hooked up and ready to run. From there it provides easy APIs to build your web application quickly in Go.",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/gobuffalo/buffalo"
                            },
                            {
                                "name": "Official Website Docs",
                                "link": "https://gobuffalo.io/"
                            }
                        ]
                    }
                ]
            },
            "Logging": {
                "description": "Go has built-in features to make it easier for programmers to implement logging. Third parties have also built additional tools to make logging easier.\nVisit the following resources to learn more: ",
                "resources": [
                    {
                        "name": "Logging in Go: Choosing a System and Using it",
                        "link": "https://www.honeybadger.io/blog/golang-logging/"
                    },
                    {
                        "name": "Logging in Golang - How to Start",
                        "link": "https://www.loggly.com/use-cases/logging-in-golang-how-to-start/"
                    }
                ],
                "order": 6,
                "options": [
                    {
                        "name": "Zerolog",
                        "recommendation-type": "opinion",
                        "description": "The zerolog package provides a fast and simple logger dedicated to JSON output.Zerolog’s API is designed to provide both a great developer experience and stunning performance. Its unique chaining API allows zerolog to write JSON (or CBOR) log events by avoiding allocations and reflection.Visit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/rs/zerolog"
                            }
                        ]
                    },
                    {
                        "name": "Zap",
                        "recommendation-type": "opinion",
                        "description": "Blazing fast, structured, leveled logging in Go.Visit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/uber-go/zap"
                            }
                        ]
                    },
                    {
                        "name": "Apex",
                        "recommendation-type": "opinion",
                        "description": "Structured logging package for Go.Visit the following resources to learn more: :",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/apex/log"
                            }
                        ]
                    }
                ]
            },
            "Go realtime communication": {
                "description": " ",
                "resources": [],
                "order": 7,
                "options": [
                    {
                        "name": "Melody",
                        "recommendation-type": "opinion",
                        "description": "Melody is websocket framework based on github.com/gorilla/websocket that abstracts away the tedious parts of handling websockets. It gets out of your way so you can write real-time apps. Visit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/olahol/melody"
                            }
                        ]
                    },
                    {
                        "name": "Centrifugo",
                        "recommendation-type": "opinion",
                        "description": "Centrifugo is an open-source scalable real-time messaging server. Centrifugo can instantly deliver messages to application online users connected over supported transports (WebSocket, HTTP-streaming, SSE/EventSource, GRPC, SockJS, WebTransport). Centrifugo has the concept of a channel – so it’s a user-facing PUB/SUB server. Visit the following resources to learn more:",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/centrifugal/centrifugo"
                            },
                            {
                                "name": "Getting started",
                                "link": "https://centrifugal.dev/docs/getting-started/introduction"
                            }
                        ]
                    }
                ]
            },
            "API Clients": {
                "description": "An API client is a set of tools and protocols that operate from an application on a computer. They help you to bypass some operations when developing a web application rather than reinventing the wheel every time. Using a client API is a great way to speed up the development process.\nVisit the following resources to learn more: ",
                "resources": [
                    {
                        "name": "API Clients",
                        "link": "https://rapidapi.com/blog/api-glossary/client/"
                    }
                ],
                "order": 8,
                "options": [
                    {
                        "name": "REST",
                        "recommendation-type": "opinion",
                        "description": "REST (Representational State Transfer) API (Application Programming Interface) is used to deliver user functionality when dealing with websites. HTTP requests are used to communicate with REST APIs so users can navigate a URL website. These URLs can return certain information that is stored as part of the API.",
                        "resources": [
                            {
                                "name": "Tutorial",
                                "link": "https://go.dev/doc/tutorial/web-service-gin"
                            },
                            {
                                "name": "RESTful APIs Series",
                                "link": "https://youtube.com/playlist?list=PLzUGFf4GhXBL4GHXVcMMvzgtO8-WEJIoY"
                            },
                            {
                                "name": "Introduction to RESTful APIs",
                                "link": "https://www.geeksforgeeks.org/rest-api-introduction/"
                            }
                        ]
                    },
                    {
                        "name": "GraphQL",
                        "recommendation-type": "opinion",
                        "description": "GraphQL is a query language for APIs, it offers a service that prioritizes giving just the data that the client requested and no more. Besides, you don’t need to be worried about breaking changes, versioning and backwards compatibility like REST APIs. Therefore you can implement your version and auto-document your API just by using GraphQL.",
                        "resources": [
                            {
                                "name": "GraphQL Website",
                                "link": "https://graphql.org/"
                            },
                            {
                                "name": "Learn GraphQL",
                                "link": "https://graphql.org/learn/"
                            },
                            {
                                "name": "GraphQL Tutorials",
                                "link": "https://www.graphql.com/tutorials/"
                            },
                            {
                                "name": "Red Hat: What is GraphQL?",
                                "link": "https://www.redhat.com/en/topics/api/what-is-graphql"
                            },
                            {
                                "name": "Digital Ocean: An Introduction to GraphQL",
                                "link": "https://www.digitalocean.com/community/tutorials/an-introduction-to-graphql"
                            },
                            {
                                "name": "How to GraphQL: The Fullstack Tutorial for GraphQL",
                                "link": "https://www.howtographql.com/"
                            },
                            {
                                "name": "GraphQL Full Course - Novice to Expert (by freeCodeCamp.org on YouTube)",
                                "link": "https://www.youtube.com/watch?v=ed8SzALpx1Q"
                            },
                            {
                                "name": "Beginner GraphQL Series (by Ben Awad on YouTube)",
                                "link": "https://www.youtube.com/playlist?list=PLN3n1USn4xln0j_NN9k4j5hS1thsGibKi"
                            }
                        ]
                    },
                    {
                        "name": "Gqlgen",
                        "recommendation-type": "opinion",
                        "description": "According to their documentation, it’s a Golang library for building GraphQL servers without much effort.",
                        "resources": [
                            {
                                "name": "Gqlgen website documentation",
                                "link": "https://gqlgen.com/"
                            },
                            {
                                "name": "Introducing gqlgen: a GraphQL Server Generator for Go",
                                "link": "https://99designs.com.au/blog/engineering/gqlgen-a-graphql-server-generator-for-go/"
                            },
                            {
                                "name": "GraphQL in Go - GQLGen Tutorial (by acklackl on YouTube)",
                                "link": "https://www.youtube.com/watch?v=O6jYy421tGw"
                            }
                        ]
                    },
                    {
                        "name": "Graphql go",
                        "recommendation-type": "opinion",
                        "description": "A GraphQL package for Go.",
                        "resources": [
                            {
                                "name": "Graphql-go homepage",
                                "link": "https://graphql-go.github.io/graphql-go.org/"
                            },
                            {
                                "name": "Graphql-go documentation",
                                "link": "https://pkg.go.dev/github.com/graphql-go/graphql"
                            },
                            {
                                "name": "Githhttps://github.com/graphql-go/graphqlub Repository",
                                "link": "INSERT_GITHUB_REPOSITORY_LINK_HERE"
                            },
                            {
                                "name": "GraphQL-Go - Golang Tutorial (by TechPractice on YouTube)",
                                "link": "https://www.youtube.com/watch?v=YK7BQfQ84ws"
                            }
                        ]
                    },
                    {
                        "name": "Grequests",
                        "recommendation-type": "opinion",
                        "description": "Golang implementation of Python Grequests library (one of the well-known HTTP libraries in Python).",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/levigross/grequests"
                            }
                        ]
                    },
                    {
                        "name": "Heimdall",
                        "recommendation-type": "opinion",
                        "description": "Heimdall is an HTTP client that helps your application make a large number of requests, at scale. With Heimdall, you can:\n\n- Use a hystrix-like circuit breaker to control failing requests\n- Add synchronous in-memory retries to each request, with the option of setting your own retrier strategy\n- Create clients with different timeouts for every request\n- All HTTP methods are exposed as a fluent interface.",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/gojek/heimdall"
                            }
                        ]
                    }
                ]
            },
            "Testing Go Code": {
                "description": "Go has a built-in testing command that we can use to test our program.",
                "resources": [
                    {
                        "name": "Official Go Tutorial: Add a test",
                        "link": "https://tour.golang.org/welcome/1"
                    },
                    {
                        "name": "Go by Example: Testing",
                        "link": "https://gobyexample.com/testing"
                    },
                    {
                        "name": "YourBasic Go: Table-driven unit tests",
                        "link": "https://yourbasic.org/golang/unit-testing-go/"
                    },
                    {
                        "name": "Learn Go with Tests",
                        "link": "https://quii.gitbook.io/learn-go-with-tests/"
                    }
                ],
                "order": 9,
                "options": []
            },
            "Tools for Microservices": {
                "description": "Microservices are an architectural approach to software development that allows the creation of a distributed application from deployable services that allow communication through a well-defined API. Being a solution to monoliths.",
                "resources": [
                    {
                        "name": "Introduction to microservices",
                        "link": "https://microservices.io/"
                    },
                    {
                        "name": "Microservice Patterns and Resources by Chris Richardson",
                        "link": "https://microservices.io/patterns/index.html"
                    },
                    {
                        "name": "Microservices AntiPatterns and Pitfalls - Mark Richards",
                        "link": "https://www.oreilly.com/library/view/microservices-antipatterns-and/9781492048093/"
                    },
                    {
                        "name": "Building Microservices, 2nd Edition - Sam Newman",
                        "link": "https://samnewman.io/books/building-microservices/"
                    }
                ],
                "order": 10,
                "options": [
                    {
                        "name": "Protocol Buffers",
                        "recommendation-type": "opinion",
                        "description": "Protocol Buffers(Protobuf) is a free, open-source, language-neutral, platform-neutral, extensible data format used to serialize structured data. It’s like JSON, except it’s smaller and faster, and it generates native language bindings.",
                        "resources": [
                            {
                                "name": "Protobuf Github",
                                "link": "https://github.com/protocolbuffers/protobuf"
                            },
                            {
                                "name": "Protobuf Documentation",
                                "link": "https://developers.google.com/protocol-buffers"
                            },
                            {
                                "name": "Protobuf with Go",
                                "link": "https://developers.google.com/protocol-buffers/docs/reference/go-generated"
                            }
                        ]
                    },
                    {
                        "name": "gRPC Go",
                        "recommendation-type": "opinion",
                        "description": "Go language implementation of gRPC (gRPC is a technology for implementing RPC APIs).",
                        "resources": [
                            {
                                "name": "gRPC-go Github",
                                "link": "https://github.com/grpc/grpc-go"
                            },
                            {
                                "name": "gRPC-go Doc",
                                "link": "https://pkg.go.dev/google.golang.org/grpc"
                            },
                            {
                                "name": "Basic tutorial introduction to gRPC in Go",
                                "link": "https://grpc.io/docs/languages/go/basics/"
                            }
                        ]
                    },
                    {
                        "name": "gRPC Gateway",
                        "recommendation-type": "opinion",
                        "description": "gRPC-Gateway creates a layer over gRPC services that will act as a RESTful service to a client. It is a plugin of protoc. It reads a gRPC service definition and generates a reverse-proxy server which translates a RESTful JSON API into gRPC.",
                        "resources": [
                            {
                                "name": "gRPC-Gateway Github",
                                "link": "https://github.com/grpc-ecosystem/grpc-gateway"
                            },
                            {
                                "name": "gRPC-Gateway Documentation",
                                "link": "https://grpc-ecosystem.github.io/grpc-gateway/"
                            }
                        ]
                    },
                    {
                        "name": "Twirp",
                        "recommendation-type": "opinion",
                        "description": "Twirp is a framework for service-to-service communication emphasizing simplicity and minimalism. It generates routing and serialization from API definition files and lets you focus on your application’s logic instead of thinking about folderol like HTTP methods and paths and JSON. Twirp is similar to gRPC, but without the custom HTTP server and transport implementations: it runs on the standard library’s extremely-well-tested-and-high-performance net/http Server. It can run on HTTP 1.1, not just http/2, and supports JSON serialization for easy debugging.",
                        "resources": [
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/twitchtv/twirp"
                            },
                            {
                                "name": "Getting started",
                                "link": "https://github.com/twitchtv/twirp/blob/main/docs/getting_started.md"
                            }
                        ]
                    },
                    {
                        "name": "Rpcx",
                        "recommendation-type": "opinion",
                        "description": "Rpcx is a RPC (Remote Procedure Call) framework like Alibaba Dubbo and Weibo Motan. Some of the advantages of using Rpcx:\n\nSimple: easy to learn, easy to develop, easy to integrate, and easy to deploy\nPerformance: high performance (>= grpc-go)\nCross-platform: supports raw slice of bytes, JSON, Protobuf, and MessagePack. Theoretically, it can be used with Java, PHP, Python, C/C++, Node.js, C#, and other platforms\nService discovery and service governance: supports ZooKeeper, etcd, and Consul.",
                        "resources": [
                            {
                                "name": "Rpcx English Documentation",
                                "link": "https://github.com/smallnest/rpcx/blob/master/README.md"
                            },
                            {
                                "name": "Rpcx Github",
                                "link": "https://github.com/smallnest/rpcx"
                            },
                            {
                                "name": "Rpcx Official Website",
                                "link": "https://rpcx.io/"
                            }
                        ]
                    },
                    {
                        "name": "Go kit",
                        "recommendation-type": "opinion",
                        "description": "Go kit is a programming toolkit for building microservices (or elegant monoliths) in Go. It solves common problems in distributed systems and application architecture so you can focus on delivering business value.",
                        "resources": [
                            {
                                "name": "Go-kit Website",
                                "link": "https://gokit.io/"
                            },
                            {
                                "name": "Microservices in Go using the Go kit",
                                "link": "https://medium.com/@manakuro/microservices-in-go-using-go-kit-407cc40156e0"
                            },
                            {
                                "name": "Building Microservices with the Go Kit Toolkit",
                                "link": "https://gokit.io/examples/stringsvc.html"
                            }
                        ]
                    },
                    {
                        "name": "Micro",
                        "recommendation-type": "opinion",
                        "description": "It is an API first development platform. It leverages the microservices architecture pattern and provides a set of services which act as the building blocks of a platform.",
                        "resources": [
                            {
                                "name": "Official Website",
                                "link": "https://micro.mu/"
                            },
                            {
                                "name": "Micro Github",
                                "link": "https://github.com/micro/micro"
                            }
                        ]
                    },
                    {
                        "name": "go-zero",
                        "recommendation-type": "opinion",
                        "description": "go-zero is a web and rpc framework with lots of engineering best practices builtin. It’s born to ensure the stability of the busy services with resilience design, and has been serving sites with tens of millions users for years.",
                        "resources": [
                            {
                                "name": "Go-zero",
                                "link": "https://go-zero.dev/"
                            },
                            {
                                "name": "Go-zero Docs",
                                "link": "https://go-zero.dev/docs/getting-started.html"
                            },
                            {
                                "name": "GitHub Repository",
                                "link": "https://github.com/tal-tech/go-zero"
                            }
                        ]
                    },
                    {
                        "name": "Watermill",
                        "recommendation-type": "opinion",
                        "description": "Watermill is an event streaming library for handling asynchronous requests in go. It provides multiple sets of implementations for pub/sub. e.g: You can use conventional pub/sub implementations like Kafka or RabbitMQ, but also HTTP or MySQL binlog, if that fits your use case.",
                        "resources": [
                            {
                                "name": "Watermill Website",
                                "link": "https://watermill.io/"
                            }
                        ]
                    }
                ]
            }
        }
    }
}
{
    "roles": {
        "Fullstack": {
            "description": "Step by step guide to becoming a modern full stack developer in 2023 ",
            "HTML": {
                "description": "HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript.",
                "resources": [
                    {
                        "name": "W3Schools: Learn HTML",
                        "link": "https://www.w3schools.com/html/html_intro.asp"
                    },
                    {
                        "name": "Codecademy - Learn HTML",
                        "link": "https://www.codecademy.com/learn/learn-html"
                    },
                    {
                        "name": "Interactive HTML Course",
                        "link": "https://github.com/denysdovhan/learnyouhtml"
                    },
                    {
                        "name": "HTML Full Course - Build a Website Tutorial",
                        "link": "https://www.youtube.com/watch?v=pQN-pnXPaVg"
                    },
                    {
                        "name": "HTML Tutorial for Beginners: HTML Crash Course",
                        "link": "https://www.youtube.com/watch?v=qz0aGYrrlhU"
                    },
                    {
                        "name": "HTML and CSS Full Course - Beginner To Pro",
                        "link": "https://youtu.be/a_iQb1lnAEQ"
                    }
                ],
                "order": 1
            },
            "CSS": {
                "description": "CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.",
                "resources": [
                    {
                        "name": "W3Schools — Learn CSS",
                        "link": "https://www.w3schools.com/css/"
                    },
                    {
                        "name": "freeCodeCamp — Responsive Web Design",
                        "link": "https://www.freecodecamp.org/learn/2022/responsive-web-design"
                    },
                    {
                        "name": "Learn to Code HTML & CSS",
                        "link": "https://learn.shayhowe.com/html-css/building-your-first-web-page/"
                    },
                    {
                        "name": "What The Flexbox!",
                        "link": "https://flexbox.io/"
                    },
                    {
                        "name": "Learn CSS | Codecademy",
                        "link": "https://www.codecademy.com/learn/learn-css"
                    },
                    {
                        "name": "Learn Intermediate CSS | Codecademy",
                        "link": "https://www.codecademy.com/learn/learn-intermediate-css"
                    },
                    {
                        "name": "CSS Crash Course For Absolute Beginners",
                        "link": "https://www.youtube.com/watch?v=yfoY53QXEnI"
                    },
                    {
                        "name": "HTML and CSS Tutorial",
                        "link": "https://www.youtube.com/watch?v=D-h8L5hgW-w"
                    },
                    {
                        "name": "CSS Masterclass - Tutorial & Course for Beginners",
                        "link": "https://www.youtube.com/watch?v=FqmB-Zj2-PA"
                    }
                ],
                "order": 2
            },
            "Checkpoint (HTML y CSS)": {
                "description": "Now that you have learnt HTML and CSS, you should be able to build static webpages. I recommend you to build as many test projects at each yellow step of the roadmap as possible to solidify what you learn."
            },
            "JavaScript": {
                "description": "JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on websites are sliders, click interactions, popups, and so on.",
                "resources": [
                    {
                        "name": "W3Schools - JavaScript Tutorial",
                        "link": "https://www.w3schools.com/js/"
                    },
                    {
                        "name": "The Modern JavaScript Tutorial",
                        "link": "https://javascript.info/"
                    },
                    {
                        "name": "Exploring JS: JavaScript books for programmers",
                        "link": "https://exploringjs.com/s"
                    },
                    {
                        "name": "JavaScript Crash Course for Beginners",
                        "link": "https://youtu.be/hdI2bqOjy3c?t=2"
                    },
                    {
                        "name": "Build a Netflix Landing Page Clone with HTML, CSS & JS",
                        "link": "https://youtu.be/P7t13SGytRk"
                    }
                ],
                "order": 3
            },
            "Checkpoint (JavaScript)": {
                "description": "At this point, you should be able to add interactivity to your web pages using JavaScript. You should make sure that you have learned the following:Know about variables, loops, data types, conditionals, functions.\nKnow about arrays and objects and different ways to access their data.\nKnow how to select DOM elements.\nAdd event listeners to DOM elements (e.g. click, focus, form submission).\nUse JavaScript to add and remove DOM elementsAdd and remove classes from DOM elementsUse JavaScript to make HTTP requests to external APIs (i.e. fetch)Use JavaScript to store data in the browser’s local storage\nHere are few ideas to practice your skills:\nCreate a simple to-do list app that allows users to search, add, edit, and delete items. Use local storage to store the data.Create a simple webpage where user can put in anyone’s GitHub username and see their profile information. You can use GitHub’s API to fetch the data. For example, here is the sample URL to fetch my data. Make sure to add validation and error handling.Create a basic calculator app that allows users to perform basic arithmetic operations."
            },
            "npm": {
                "description": "npm is a package manager for the JavaScript programming language maintained by npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js.",
                "resources": [
                    {
                        "name": "Modern JavaScript for Dinosaurs",
                        "link": "https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html"
                    },
                    {
                        "name": "An Absolute Beginners Guide to Using npm",
                        "link": "https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm/"
                    },
                    {
                        "name": "How to NPM",
                        "link": "https://github.com/workshopper/how-to-npm"
                    },
                    {
                        "name": "NPM tutorial for Beginners",
                        "link": "https://www.youtube.com/watch?v=2V1UUhBJ62Y"
                    },
                    {
                        "name": "NPM Crash Course",
                        "link": "https://www.youtube.com/watch?v=jHDhaSSKmB0"
                    }
                ],
                "order": 4
            },
            "Checkpoint (npm)": {
                "description": "At this point, you should be able to install and use external packages using npm. You probably know about npmjs.com where you can search for packages and read their documentation. You should also be familiar with the package.json file and how to use it to manage your project dependencies.\nou don’t need to get into the module bundlers and build tools just yet. Just make sure that you are able to use the dependencies installed in the node_modules folder using simple link and script tags in your HTML.\nRegarding projects, here are a few ideas that you can try:\nCreate a simple webpage that shows the current time of user. You can use use dayjs to get the current time and display it on the page. Here is the sample design for homepage.Install the micromodal library. Create a button on the page clicking which should open a modal and let the user select a timezone from a dropdown. Once the user selects a timezone, the modal should close and the time on the page should be updated to show the time in the selected timezone. Here is the sample design for the modal."
            },
            "Git": {
                "description": "Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.",
                "resources": [
                    {
                        "name": "Git & GitHub Crash Course For Beginners",
                        "link": "https://www.youtube.com/watch?v=SWYqp7iY_Tc"
                    },
                    {
                        "name": "Learn Git with Tutorials, News and Tips - Atlassian",
                        "link": "https://www.atlassian.com/git"
                    },
                    {
                        "name": "Git Cheat Sheet",
                        "link": "https://cs.fyi/guide/git-cheatsheet"
                    },
                    {
                        "name": "Git Tutorial For Dummies",
                        "link": "https://www.youtube.com/watch?v=mJ-qvsxPHpY"
                    }
                ],
                "order": 5
            },
            "GitHub": {
                "description": "GitHub is a provider of Internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features.",
                "resources": [
                    {
                        "name": "GitHub Website",
                        "link": "https://github.com/"
                    },
                    {
                        "name": "GitHub Documentation",
                        "link": "https://docs.github.com/en/get-started/quickstart"
                    },
                    {
                        "name": "How to Use Git in a Professional Dev Team",
                        "link": "https://ooloo.io/project/github-flow"
                    },
                    {
                        "name": "What is GitHub?",
                        "link": "https://www.youtube.com/watch?v=w3jLJU7DT5E"
                    },
                    {
                        "name": "Git vs. GitHub: Whats the difference?",
                        "link": "https://www.youtube.com/watch?v=wpISo9TNjfU"
                    },
                    {
                        "name": "Git and GitHub for Beginners",
                        "link": "https://www.youtube.com/watch?v=RGOj5yH7evk"
                    },
                    {
                        "name": "Git and GitHub - CS50 Beyond 2019",
                        "link": "https://www.youtube.com/watch?v=eulnSXkhE7I"
                    }
                ],
                "order": 6,
                "options": []
            },
            "Checkpoint (GitHub)": {
                "description": "Now that you have learnt Git and GitHub you should be ready to work with others. You should now setup your GitHub profile and push all the projects that you have built so far to your GitHub profile. Here are some of my recommendations for your GitHub profile:Keep the repository names lowercase and use hyphens to separate words e.g. todo-app instead of TodoApp or Todo-App.Add a README.md file to each repository that you create. This file should contain a description of the project. Put some effort into the readme and make sure it clearly details what the project is about and how anyone can run it locally.Add snapshots of your project to the readme file so that anyone can see what the project looks like without having to run it locally.Add a LICENSE file to each repository that you create. This file should contain the license that you want to use for the project. You can use choosealicense.com to help you choose a license.\nYou can have a look at my GitHub profile and see how I have structured my repositories and how some of my readme files look like."
            },
            "Tailwind ": {
                "description": "CSS Framework that provides atomic CSS classes to help you style components e.g. flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.",
                "resources": [
                    {
                        "name": "Tailwind Website",
                        "link": "https://tailwindcss.com/"
                    },
                    {
                        "name": "Tailwind CSS Full Course for Beginners",
                        "link": "https://www.youtube.com/watch?v=lCxcTsOHrjo"
                    },
                    {
                        "name": "Tailwind CSS Crash Course",
                        "link": "https://www.youtube.com/watch?v=UBOj6rqRUME"
                    },
                    {
                        "name": "Should You Use Tailwind CSS?",
                        "link": "https://www.youtube.com/watch?v=hdGsFpZ0J2E?"
                    },
                    {
                        "name": "Official Screencasts",
                        "link": "https://www.youtube.com/c/TailwindLabs/videos"
                    }
                ],
                "order": 7,
                "options": []
            },
            "React": {
                "description": "React is the most popular front-end JavaScript library for building user interfaces. React can also render on the server using Node and power mobile apps using React Native.",
                "resources": [
                    {
                        "name": "Visit Dedicated React Roadmap",
                        "link": "https://roadmap.sh/react"
                    },
                    {
                        "name": "React Website",
                        "link": "https://reactjs.org/"
                    },
                    {
                        "name": "Official Getting Started",
                        "link": "https://reactjs.org/tutorial/tutorial.html"
                    },
                    {
                        "name": "The Beginners Guide to React",
                        "link": "https://egghead.io/courses/the-beginner-s-guide-to-react"
                    },
                    {
                        "name": "React JS Course for Beginners",
                        "link": "https://www.youtube.com/watch?v=nTeuhbP7wdE"
                    },
                    {
                        "name": "React Course - Beginners Tutorial for React",
                        "link": "https://www.youtube.com/watch?v=bMknfKXIFA8"
                    },
                    {
                        "name": "Understanding Reacts UI Rendering Process",
                        "link": "https://www.youtube.com/watch?v=i793Qm6kv3U"
                    }
                ],
                "order": 8,
                "options": []
            },
            "Checkpoint (Frontend)": {
                "description": "At this point you should be able to build a complete frontend application including structuring your webpages with HTML, styling your webpages with CSS, adding interactivity to your webpages with JavaScript, using the DOM API to manipulate your webpages, using the Fetch API to make HTTP requests, understanding promises and using async/await syntax to write asynchronous code, installing and using external libraries with npm, version controlling your code with Git, and pushing your code to GitHub. If you decided to skip React and Tailwind for now, that is fine also, but you should be able to build a complete frontend application using vanilla HTML, CSS, and JavaScript. However, keep in mind that modern frontend applications are mostly built with frameworks like React, Vue, and Angular, so you should learn at least one of them at any point in time.This marks the end of frontend basics that you needed, we will now be moving to the backend development. While you continue with the backend development, know that there is more to frontend development and remember to checkout the frontend roadmap later in your journey."
            },
            "Node.js": {
                "description": "Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project! Node.js runs the V8 JavaScript engine, Google Chrome’s core, outside the browser. This allows Node.js to be very performant. A Node.js app runs in a single process, without creating a new thread for every request. Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking, and generally, libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm.",
                "resources": [
                    {
                        "name": "Official Website",
                        "link": "https://nodejs.org/en/about/"
                    },
                    {
                        "name": "Learn Node.js Official Website",
                        "link": "https://nodejs.dev/en/learn/"
                    },
                    {
                        "name": "Node.js Introduction",
                        "link": "https://www.w3schools.com/nodejs/nodejs_intro.asp"
                    },
                    {
                        "name": "Node.js and Express.js Full Course",
                        "link": "https://www.youtube.com/watch?v=Oe421EPjeBE"
                    }
                ],
                "order": 9
            },
            "Checkpoint (Node.js)": {
                "description": "At this point, you should be able to build CLI applications using Node.js or whatever backend programming language you picked. You should be able to build a CLI application that can read and write files, parse command line arguments, make HTTP requests, parse JSON, use a third-party library (e.g., a library for parsing CSV files), and use a third-party API. Here are some ideas for CLI applications you can build:Create a CLI application that takes a URL and a CSS selector arguments and prints the text content of the element that matches the selector. Hint you can use cheerioAn application that takes optionally takes two dates and prints the most starred GitHub projects in that date range. Hint you can use GitHub’s search APIBulk rename files in a directory. Hint you can use fs and pathWrite a CLI application that takes a path as input and compresses all the images in that directory. It should accept an option for output path; if the output path is not given it should compress images in place otherwise write the compressed images to the output path. Hint you can use sharp."
            },
            "PostgreSQL": {
                "description": "PostgreSQL, also known as Postgres, is a free and open-source relational database management system emphasizing extensibility and SQL compliance.",
                "resources": [
                    {
                        "name": "Visit Dedicated PostgreSQL DBA Roadmap",
                        "link": "https://roadmap.sh/postgresql-dba"
                    },
                    {
                        "name": "Official Website",
                        "link": "https://www.postgresql.org/"
                    },
                    {
                        "name": "Learn PostgreSQL - Full Tutorial for Beginners",
                        "link": "https://www.postgresqltutorial.com/"
                    },
                    {
                        "name": "Learn PostgreSQL Tutorial - Full Course for Beginners",
                        "link": "https://www.youtube.com/watch?v=qw--VYLpxG4"
                    },
                    {
                        "name": "Postgres tutorial for Beginners",
                        "link": "https://www.youtube.com/watch?v=eMIxuk0nOkU"
                    }
                ],
                "order": 10
            },
            "Checkpoint (CRUD)": {
                "description": "CRUD stands for Create, Read, Update, and Delete. These are the four basic operations you can perform on any data when working with web applications, databases, and APIs. Now that you know about programming languages and databases, you should be able to build a simple CLI application that interacts with a database. We haven’t talked about APIs yet, but you don’t need an API to practice CRUD operations. Here are some of the CLI applications you can build to practice CRUD operations:A simple todo list application for the CLI with the following options:--new to add a new todo item\n--list [all|pending|done] to list the todo items\n--done [id] to update a todo item\n--delete [id] to delete a todo item\n--help to list all the available options\n--version to print the version of the application"
            },
            "Restfull APIs": {
                "description": "REST, or REpresentational State Transfer, is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.",
                "resources": [
                    {
                        "name": "What is REST?",
                        "link": "https://www.codecademy.com/article/what-is-rest"
                    },
                    {
                        "name": "What is a REST API?",
                        "link": "https://www.redhat.com/en/topics/api/what-is-a-rest-api"
                    },
                    {
                        "name": "Roy Fielding's dissertation chapter, Representational State Transfer (REST)",
                        "link": "https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm"
                    },
                    {
                        "name": "Learn REST: A RESTful Tutorial",
                        "link": "https://restapitutorial.com/"
                    }
                ],
                "order": 11
            },
            "JWT Auth": {
                "description": "JWT stands for JSON Web Token and is a token-based encryption open standard/methodology that is used to transfer information securely as a JSON object. Clients and Servers use JWT to securely share information, with the JWT containing encoded JSON objects and claims. JWT tokens are designed to be compact, safe to use within URLs, and ideal for SSO contexts.",
                "resources": [
                    {
                        "name": "jwt.io Website",
                        "link": "https://jwt.io/"
                    },
                    {
                        "name": "Introduction to JSON Web Tokens",
                        "link": "https://jwt.io/introduction"
                    },
                    {
                        "name": "What is JWT?",
                        "link": "https://www.akana.com/blog/what-is-jwt"
                    },
                    {
                        "name": "What Is JWT and Why Should You Use JWT",
                        "link": "https://www.youtube.com/watch?v=7Q17ubqLfaM"
                    },
                    {
                        "name": "What is JWT? JSON Web Token Explained",
                        "link": "https://www.youtube.com/watch?v=926mknSW9Lo"
                    },
                    {
                        "name": "JWT Authentication Tutorial - Node.js",
                        "link": "https://www.youtube.com/watch?v=mbsmsi7l3r4"
                    }
                ],
                "order": 12
            },
            "Redis": {
                "description": "Redis is an open source (BSD licensed), in-memory data structure store used as a database, cache, message broker, and streaming engine. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.",
                "resources": [
                    {
                        "name": "Redis Website",
                        "link": "https://redis.io/"
                    },
                    {
                        "name": "Redis in 100 Seconds",
                        "link": "https://www.youtube.com/watch?v=G1rOthIU-uo"
                    },
                    {
                        "name": "Redis Caching in Node.js",
                        "link": "https://www.youtube.com/watch?v=oaJq1mQ3dFI"
                    }
                ],
                "order": 13
            },
            "Checkpoint (Final)": {
                "description": "At this point, you should have everything that you need to build a complete application that has a responsive frontend that users can interact with, has a backend API that is secured with JWT authentication, and has a database that stores data. At this point, you should practice building as much as you can on your own to solidify your knowledge. If you need inspiration, here are some ideas:",
                "resources": []
            },
            "Linux Basics": {
                "description": "Knowledge of UNIX is a must for almost all kinds of development, as most of the code that you write is most likely going to be finally deployed on a UNIX/Linux machine. Linux has been the backbone of the free and open source software movement, providing a simple and elegant operating system for almost all your needs.",
                "resources": [
                    {
                        "name": "Linux Operating System - Crash Course",
                        "link": "https://www.youtube.com/watch?v=ROjZy1WbCIA"
                    },
                    {
                        "name": "Coursera - Unix Courses",
                        "link": "https://www.coursera.org/courses?query=unix"
                    },
                    {
                        "name": "Linux Basics",
                        "link": "https://dev.to/rudrakshi99/linux-basics-2onj"
                    },
                    {
                        "name": "Unix / Linux Tutorial",
                        "link": "https://www.tutorialspoint.com/unix/index.htm"
                    }
                ],
                "order": 14
            },
            "Basic AWS Services": {
                "description": "AWS has several services but you don’t need to know all of them. Here are the most common ones that you can get started with:\nEC2 - Virtual machines in the cloud\nVPC - Virtual private cloud\nS3 - Object storage\nRoute 53 - DNS\nSES - Email sending",
                "resources": [
                    {
                        "name": "Deploy Node App on AWS EC2",
                        "link": "https://youtu.be/oHAQ3TzUTro"
                    },
                    {
                        "name": "AWS VPC & Subnets For Beginners",
                        "link": "https://youtu.be/TUTqYEZZUdc"
                    },
                    {
                        "name": "Up and Running with AWS VPC",
                        "link": "https://cs.fyi/guide/up-and-running-with-aws-vpc"
                    },
                    {
                        "name": "Up and Running with AWS EC2",
                        "link": "https://cs.fyi/guide/up-and-running-with-aws-ec2"
                    },
                    {
                        "name": "VPC Basics",
                        "link": "https://cloudcasts.io/course/vpc-basics"
                    },
                    {
                        "name": "EC2 Essentials",
                        "link": "https://cloudcasts.io/course/ec2-essentials"
                    },
                    {
                        "name": "Sam Meech-Ward’s AWS Videos",
                        "link": "https://www.youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M"
                    },
                    {
                        "name": "DNS with AWS Route 53",
                        "link": "https://www.youtube.com/watch?v=yRIY7BJohfo"
                    },
                    {
                        "name": "Upload Images to S3 from Node Back End",
                        "link": "https://www.youtube.com/watch?v=NZElg91l_ms"
                    },
                    {
                        "name": "S3 Bucket Hosting a Static Website",
                        "link": "https://www.youtube.com/watch?v=RoY3ekCCxKc&list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M"
                    }
                ],
                "order": 15,
                "options": [
                    {
                        "name": "EC2",
                        "recommendation-type": "opinion",
                        "description": "Amazon Elastic Compute Cloud (EC2) is a web service that provides resizable compute capacity in the form of virtual servers, known as instances. With EC2, you can quickly scale your infrastructure up or down as your computing requirements change. This service effectively reduces the time required to obtain and boot new server instances, allowing you to easily adjust capacity according to the needs of your application.",
                        "resources": [
                            {
                                "name": "Deploy Node App on AWS EC2",
                                "link": "https://youtu.be/oHAQ3TzUTro"
                            },
                            {
                                "name": "Up and Running with AWS EC2",
                                "link": "https://cs.fyi/guide/up-and-running-with-aws-ec2"
                            },
                            {
                                "name": "EC2 Essentials",
                                "link": "https://cloudcasts.io/course/ec2-essentials"
                            }
                        ]
                    },
                    {
                        "name": "VPC",
                        "recommendation-type": "opinion",
                        "description": "VPC stands for Virtual Private Cloud and is an essential service provided by AWS that allows you to create a private, isolated section within the AWS cloud, where you can define your own virtual network. It offers a more secure and controlled environment, enabling you to easily launch and manage your resources within your personal network.",
                        "resources": [
                            {
                                "name": "AWS VPC & Subnets For Beginners",
                                "link": "https://youtu.be/TUTqYEZZUdc"
                            },
                            {
                                "name": "Up and Running with AWS VPC",
                                "link": "https://cs.fyi/guide/up-and-running-with-aws-vpc"
                            },
                            {
                                "name": "VPC Basics",
                                "link": "https://cloudcasts.io/course/vpc-basics"
                            }
                        ]
                    },
                    {
                        "name": "S3",
                        "recommendation-type": "opinion",
                        "description": "S3 is a service that allows you to store files in the cloud. It’s a simple service that you can use to store files and serve them to your users.",
                        "resources": [
                            {
                                "name": "Upload Images to S3 from Node Back End",
                                "link": "https://www.youtube.com/watch?v=NZElg91l_ms"
                            },
                            {
                                "name": "S3 Bucket Hosting a Static Website",
                                "link": "https://www.youtube.com/watch?v=RoY3ekCCxKc&list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M"
                            }
                        ]
                    },
                    {
                        "name": "Route53",
                        "recommendation-type": "opinion",
                        "description": "Route53 is AWS’s Domain Name System (DNS) service that plays a critical role in connecting user requests to your web application or other resources within your infrastructure. With Route53, you can easily manage domains, redirect traffic, and configure domain-related settings. It has several advantages, including high availability, low latency, and integration with other AWS resources.",
                        "resources": [
                            {
                                "name": "Amazon Route 53",
                                "link": "https://www.youtube.com/watch?v=RGWgfhZByAI"
                            },
                            {
                                "name": "AWS Route 53 Domain Name",
                                "link": "https://www.youtube.com/watch?v=jDz4j_kkyLA"
                            },
                            {
                                "name": "DNS with AWS Route 53",
                                "link": "https://www.youtube.com/watch?v=yRIY7BJohfo&t=2s"
                            }
                        ]
                    },
                    {
                        "name": "SES",
                        "recommendation-type": "opinion",
                        "description": "Amazon SES (Simple Email Service) is a scalable, flexible, and cost-effective cloud-based email service that is specifically designed for developers, marketers, and businesses to send and receive marketing, transactional, and notification emails. SES is useful, especially when you need to send a large volume of emails, as it offers high deliverability, reliability, and ease of use.",
                        "resources": [
                            {
                                "name": "Contact Form Submission With AWS SES",
                                "link": "https://www.youtube.com/watch?v=HiHflLTqiwU"
                            }
                        ]
                    }
                ]
            },
            "Checkpoint Deployment": {
                "description": "Now that you know the basics of AWS, you should be able to deploy your application to AWS. You don’t need to use all the AWS services, here is what you can probably get started with:\n\n1. Setup an EC2 instance using any AMI (e.g. latest version of Ubuntu)\n2. SSH into the EC2 instance using the key pair you created\n3. Install Node.js on the EC2 instance\n4. Install Git on the EC2 instance\n5. Clone your application from GitHub\n6. Install and configure a database on the EC2 instance (e.g. PostgreSQL)\n7. Make sure that the security group of the EC2 instance allows HTTP and HTTPS traffic\n8. Try to access your application using the public IP address of the EC2 instance\n9. Purchase or set up a domain name using Route53 (or any other domain name provider) and point it to the public IP address of the EC2 instance\n10. Set up HTTPS using certbot\n\nAnd voilà! You have deployed your application to AWS!\n\nIf you get stuck, here is a video that shows how to deploy a Node.js application to AWS EC2:\n\nDeploy Node App on AWS EC2",
                "resources": [
                    {
                        "name": "Deploy Node App on AWS EC2",
                        "link": "URL-del-recurso"
                    }
                ]
            },
            "Monit": {
                "description": "When it comes to monitoring the health of your applications, there are several different options available. My favorite monitoring stack is Prometheus and Grafana, but it can be a bit overwhelming to set up and configure. If you’re looking for a simpler solution, Monit is a great alternative that can be utilized to monitor and manage system resources such as services, processes, files, directories, devices, and network connections, making your application more reliable and resilient to issues like crashes, unresponsiveness, or resource exhaustion.\n\nSome of the key features of Monit are:\n\n1. Automatic Recovery: Monit can automatically restart a service or process if it fails, making your application more resistant to unexpected issues.\n2. Alert Notifications: Monit can send email notifications when a problem is detected or when a certain condition is met, keeping you informed about the health of your application.\n3. Event Logging: All events detected by Monit are stored in a log for easy troubleshooting and analysis.\n4. Resource Limit Monitoring: Monit can monitor the resource utilization (CPU, memory, network, etc.) of a process or service and take action if a specific limit is exceeded.\n5. Flexible Configuration: Monit uses a simple, human-readable configuration syntax that allows you to tailor its behavior to your needs.\n6. Web Interface: Monit provides a built-in web interface for remotely monitoring your application’s status and manage services.\n\nHave a look at the following resources to learn more about Monit:\n\n- [Monit - Opensource Self Healing Server Monitoring](link-a-monit)\n- [Monit documentation](link-a-documentacion-monit)",
                "resources": [
                    {
                        "name": "Monit - Opensource Self Healing Server Monitoring",
                        "link": "https://www.youtube.com/watch?v=3cA5lNje1Ow"
                    },
                    {
                        "name": "Monit documentation",
                        "link": "https://mmonit.com/monit/documentation/"
                    }
                ],
                "order": 16
            },
            "Checkpoint": {
                "description": "You should now implement monitoring and autorestarts for your application using monit. Regarding autorestarts, you can also use pm2.\n\nHere are some of the monitors you should implement for the application.\n\n- CPU Usage\n- Memory Usage\n- Disk Usage\n- Network Usage\n- Service Availability\n- Process Availability\n\nMonit comes with existing configurations for many services. You can find them in /etc/monit/conf-available. You can copy them (and modify if required) to /etc/monit/conf-enabled to enable them.",
                "resources": []
            },
            "Github Actions": {
                "description": "GitHub Actions is a workflow automation tool provided by GitHub that can be used to automate various tasks in the app development process.\n\n- [Github Actions](link-a-Github-Actions)\n- [Github Actions Documentation](link-a-documentacion-Github-Actions)\n- [5 Ways to DevOps-ify your App](link-a-5-Ways-to-DevOps)\n- [DevOps CI/CD Explained in 100 Seconds](link-a-DevOps-CI/CD)",
                "resources": [
                    {
                        "name": "Github Actions",
                        "link": "https://github.com/features/actions"
                    },
                    {
                        "name": "Github Actions Documentation",
                        "link": "https://docs.github.com/en/actions"
                    },
                    {
                        "name": "5 Ways to DevOps-ify your App",
                        "link": "https://www.youtube.com/watch?v=eB0nUzAI7M8"
                    },
                    {
                        "name": "DevOps CI/CD Explained in 100 Seconds",
                        "link": "https://www.youtube.com/watch?v=scEDHsr3APg"
                    }
                ],
                "order": 17
            },
            "Checkpoint — CI / CD": {
                "description": "Now that you have the infrastructure setup, it’s time to automate the deployment process. This is where CI/CD comes in. If you don’t know what CI/CD are, you should watch [DevOps CI/CD Explained in 100 Seconds](link-a-DevOps-CI/CD).\n\nThe next step at this point is to implement CI/CD for your application using GitHub actions. Setup a GitHub action that, whenever you push to master, will automatically:\n\n- Run your tests (ignore this step if you haven’t learnt it yet)\n- Deploy your application to AWS\n\nRegarding the deployment to AWS you can use rsync to copy the files to the server. Here’s a sample GitHub workflow using rsync.",
                "resources": [
                    {
                        "name": "DevOps CI/CD Explained in 100 Seconds",
                        "link": "https://gist.github.com/kamranahmedse/1e94b412006040f38e24b9443b2da41a"
                    }
                ]
            },
            "Ansible": {
                "description": "Ansible is an open-source configuration management, application deployment and provisioning tool that uses its own declarative language in YAML. Ansible is agentless, meaning you only need remote connections via SSH or Windows Remote Management via Powershell in order to function.\n\nVisit the following resources to learn more:\n\n- [Ansible Website](link-a-sitio-web-de-Ansible)\n- [Official Documentation](link-a-documentacion-oficial-Ansible)\n- [Ansible Getting Started Guide](link-a-guia-de-inicio-de-Ansible)\n- [Ansible Full Course for Beginners](link-a-curso-completo-de-Ansible-para-principiantes)",
                "resources": [
                    {
                        "name": "Ansible Website",
                        "link": "https://www.ansible.com/"
                    },
                    {
                        "name": "Official Documentation",
                        "link": "https://docs.ansible.com/"
                    },
                    {
                        "name": "Ansible Getting Started Guide",
                        "link": "https://www.ansible.com/resources/get-started"
                    },
                    {
                        "name": "Ansible Full Course for Beginners",
                        "link": "https://www.youtube.com/watch?v=9Ua2b06oAr4"
                    }
                ],
                "order": 18
            },
            "Checkpoint 2": {
                "description": "Now that you have learned ansible, you can use it to automate the deployment of your application.\n\nA task for you at this point would be to automate the steps that you manually performed earlier when setting up the EC2 instance i.e. SSH into the server, install Node.js, Git, PostgreSQL, Running the application etc. Write an ansible playbook that automates these and see if you can spin up a new EC2 instance without SSHing into it and manually installing all the dependencies.",
                "resources": []
            },
            "Terraform": {
                "description": "Terraform is an extremely popular open source Infrastructure as Code (IaC) tool that can be used with many different cloud and service provider APIs. Terraform focuses on an immutable approach to infrastructure, with a terraform state file center to tracking the status of your real-world infrastructure.",
                "resources": [
                    {
                        "name": "Terraform Website",
                        "link": "https://www.terraform.io/"
                    },
                    {
                        "name": "Terraform Documentation",
                        "link": "https://www.terraform.io/docs"
                    },
                    {
                        "name": "Terraform Tutorials",
                        "link": "https://learn.hashicorp.com/terraform"
                    },
                    {
                        "name": "Intro to Terraform Video",
                        "link": "https://www.youtube.com/watch?v=h970ZBgKINg&ab_channel=HashiCorp"
                    },
                    {
                        "name": "Terraform CDK Website",
                        "link": "https://www.terraform.io/cdktf"
                    },
                    {
                        "name": "What is the CDKTF?",
                        "link": "https://www.terraform.io/cdktf/concepts/cdktf-architecture"
                    },
                    {
                        "name": "CDKTF Getting Started Guide",
                        "link": "https://learn.hashicorp.com/tutorials/terraform/cdktf-install?in=terraform/cdktf"
                    },
                    {
                        "name": "CDKTF Examples",
                        "link": "https://www.terraform.io/cdktf/examples"
                    },
                    {
                        "name": "How to Scale Your Terraform Infrastructure",
                        "link": "https://thenewstack.io/how-to-scale-your-terraform-infrastructure/"
                    }
                ],
                "order": 19
            },
            "Checkpoint3": {
                "description": "If you remember, earlier in the roadmap, you manually logged into the AWS console and had to set up the services. Now that you know Terraform, go ahead and automate the process of creating the infrastructure for your application using Terraform, and with that, your deployments will be fully automated i.e., you should have:\n\n- Infrastructure setup using Terraform\n- Provisioning using Ansible\n- CI/CD using GitHub Actions\n- Monitoring using Monit\n\nAnd that is it! You have successfully completed the roadmap and are now a full-stack developer. Congratulations! 🎉\n\nWhat’s next? Go ahead and build something cool! Share your learnings with the community and help others learn as well. If you have any questions, feel free to join our discord server and ask away!",
                "resources": []
            }
        }
    }
}
{
  "roles": {
    "ASP.NET Core": {
      "description": "Step by step guide to becoming an ASP.NET core developer in 2023 ",
      "Learn the Basics of C#": {
        "name": "C#",
        "recommendation-type": "opinion",
        "description": "C# (pronounced 'C-sharp') is a general-purpose, object-oriented programming language developed by Microsoft. It is part of the .NET family of languages and is used to build a wide range of applications, from web and mobile applications to games and cloud services. C# is a statically-typed language, which means that the type of a variable must be specified when it is declared, and that the type of a value cannot be changed after it has been assigned. C# also supports object-oriented programming, which means that it provides features such as encapsulation, inheritance, and polymorphism. C# is a popular language for building .NET applications, and it is used by many large companies and organizations, including Microsoft, Dell, and IBM. It is a versatile language that can be used for a wide range of purposes, and it is well-suited for building scalable and maintainable software systems.",
        "resources": [
          {
            "name": "C Sharp Basics",
            "link": "https://www.codecademy.com/catalog/language/c-sharp"
          },
          {
            "name": "Introduction to C#",
            "link": "https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/tutorials/"
          },
          {
            "name": "Basics Of C#",
            "link": "https://www.c-sharpcorner.com/UploadFile/e9fdcd/basics-of-C-Sharp/"
          },
          {
            "name": "C# Tutorials",
            "link": "https://dotnettutorials.net/course/csharp-dot-net-tutorials/"
          },
          {
            "name": "C# tutorials - W3Schools",
            "link": "https://www.w3schools.com/cs/index.php"
          }
        ],
        "order": 1,
        "options": [
          {
            "name": "C#",
            "recommendation-type": "opinion",
            "description": "C# is a modern coding language that was developed by Microsoft that focuses on applying the coding style to C++ and making it so that way it’s more condensed and simple. It’s similar to Java by both being static, strong, and mani festive languages. Both use the System’s prebuilt class to do certain features like printing output to the screen, etc. C#, like Java, also contains a garbage collection, which removes lower-level maintenance code from the programmer.",
            "resources": [
              {
                "name": "C# official website?",
                "link": "https://learn.microsoft.com/en-us/dotnet/csharp//"
              },
              {
                "name": "The Beginners Guide to C#",
                "link": "https://www.w3schools.com/CS/index.php"
              },
              {
                "name": "C# Tutorial",
                "link": "https://www.w3schools.com/cs/index.php"
              },
              {
                "name": "C# Full Course - Learn C# 10 and .NET 6 in 7 hours",
                "link": "https://www.youtube.com/watch?v=q_F4PyW8GTg"
              },
              {
                "name": ".NET Framework",
                "recommendation-type": "opinion",
                "description": ".NET (pronounced 'dot net') is a software framework developed by Microsoft that can be used to create a wide range of applications, including Windows desktop and web applications, mobile apps, and gaming. The .NET Framework provides a large library of pre-built functionality, including collections, file input/output, and networking, that can be used by .NET applications. It also includes a Common Language Runtime (CLR) which manages the execution of code, providing features such as memory management, security, and exception handling.",
                "resources": [
                  {
                    "name": "What is .NET?",
                    "link": "https://dotnet.microsoft.com/en-us/learn/dotnet/what-is-dotnet"
                  },
                  {
                    "name": "Intro to .NET",
                    "link": "https://www.codecademy.com/article/what-is-net"
                  },
                  {
                    "name": "An Overview of .NET",
                    "link": "https://auth0.com/blog/what-is-dotnet-platform-overview/"
                  }
                ]
              },
              {
                "name": ".NET CLI",
                "recommendation-type": "opinion",
                "description": ".NET CLI is the command-line interface (CLI) for the .NET platform. It is a tool that provides a common interface for running .NET Core command-line tools and utilities. .NET Core is a cross-platform, open-source, and modular version of the .NET framework, and the .NET CLI provides a way to interact with it from the command line.",
                "resources": [
                  {
                    "name": "Microsoft - .NET CLI overview",
                    "link": "https://learn.microsoft.com/en-us/dotnet/core/tools/"
                  },
                  {
                    "name": "Intro To The .NET CLI",
                    "link": "https://youtu.be/RQLzp2Z8-BE"
                  }
                ]
              }
            ]
          }
        ]
      },
      "General Development Skills": {
        "description": "There are several skills that are generally considered to be important for working with .NET and C#: Object-oriented programming: Understanding the concepts of classes, objects, inheritance, and polymorphism is essential for working with C# and the .NET Framework. C# language: A strong understanding of the C# language, including its syntax, keywords, and built-in classes and types, is necessary for writing efficient and maintainable code. .NET Framework: Familiarity with the .NET Framework, including the Common Language Runtime (CLR) and the Base Class Library (BCL), is important for understanding how C# code is executed and for utilizing the framework’s many built-in features. Web & Software development: Knowledge of web development technologies such as HTML, CSS, JavaScript, and ASP.NET is important for creating web applications using C# and the .NET Framework. Knowledge of software development methodologies such as Agile, Scrum, or Waterfall is also useful. Database: Familiarity with database concepts and technologies, such as SQL and ADO.NET, is important for working with data in C# applications. Cloud computing: Familiarity with cloud computing concepts and technologies, such as Azure, is becoming increasingly important for deploying and scaling C# applications. DevOps: Understanding of DevOps concepts and practices, such as continuous integration and continuous deployment, is necessary for automating and streamlining the software development process.",
        "resources": [
          {
            "name": "A Step-by-Step Approach to Learn OOP",
            "link": "https://www.geeksforgeeks.org/a-step-by-step-approach-to-learn-object-oriented-programming/"
          },
          {
            "name": "Asp.net - Complete Tutorial",
            "link": "https://www.youtube.com/watch?v=kdPtNMb8tPw"
          },
          {
            "name": "Learn Cloud Computing",
            "link": "https://www.youtube.com/watch?v=eWwK2FKWp0g"
          },
          {
            "name": "DevOps Course for Beginners",
            "link": "https://www.youtube.com/watch?v=hQcFE0RD0cQ"
          }
        ],
        "order": 2,
        "options": [
          {
            "name": "Git",
            "recommendation-type": "opinion",
            "description": "Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.",
            "resources": [
              {
                "name": "Git & GitHub Crash Course For Beginners",
                "link": "https://www.youtube.com/watch?v=SWYqp7iY_Tc"
              },
              {
                "name": "Learn Git with Tutorials, News and Tips - Atlassian",
                "link": "https://www.atlassian.com/git"
              },
              {
                "name": "Git Cheat Sheet",
                "link": "https://cs.fyi/guide/git-cheatsheet"
              }
            ]
          },
          {
            "name": "Azure Devops Services",
            "recommendation-type": "opinion",
            "description": "Azure DevOps Services is a collection of services provided by Microsoft that can be used to plan, build, test, and deploy .NET applications. These services can be used together or independently to support various aspects of the software development process. Some of the main services include: Azure Boards: Provides features for agile planning and tracking, such as backlogs, boards, and sprint planning. Azure Repos: Provides source control management for Git and Team Foundation Version Control (TFVC) repositories. Azure Artifacts: Provides package management for NuGet, npm, and Maven packages. Azure Test Plans: Provides support for manual and exploratory testing, as well as continuous testing and testing in production. Azure Pipeline: Provides a way to build, test, and deploy code automatically, with support for multiple languages and platforms, including .NET. These services can be used to create a full-featured development environment that can be used to manage all aspects of a software development project, from planning and design to testing and deployment.",
            "resources": [
              {
                "name": "Build, test, and deploy .NET Core apps",
                "link": "https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops&tabs=dotnetfive"
              },
              {
                "name": "Microsoft Azure DevOps for ASP .NET Core Web apps",
                "link": "https://techmindfactory.com/Microsoft-Azure-DevOps-for-ASP-.NET-Core-Web-apps/"
              }
            ]
          },
          {
            "name": "Repo Hosting Services",
            "recommendation-type": "opinion",
            "description": "There are different repository hosting services with the most famous one being GitHub, GitLab and BitBucket. I would recommend creating an account on GitHub because that is where most of the OpenSource work is done and most of the developers are.",
            "resources": [
              {
                "name": "GitHub: Where the world builds software",
                "link": "https://github.com/"
              },
              {
                "name": "GitLab: Iterate faster, innovate together",
                "link": "https://gitlab.com/"
              },
              {
                "name": "BitBucket: The Git solution for professional teams",
                "link": "https://bitbucket.com/"
              }
            ]
          },
          {
            "name": "HTTP",
            "recommendation-type": "opinion",
            "description": "HTTP is the TCP/IP based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet.HTTPS  HTTPS (Hypertext Transfer Protocol Secure) is the secure version of HTTP, which is the primary protocol used to send data between a web browser and a website.HTTPS = HTTP + SSL/TLS",
            "resources": [
              {
                "name": "Everything you need to know about HTTP",
                "link": "https://cs.fyi/guide/http-in-depth"
              },
              {
                "name": "What is HTTP?",
                "link": "https://www.cloudflare.com/en-gb/learning/ddos/glossary/hypertext-transfer-protocol-http/"
              },
              {
                "name": "An overview of HTTP",
                "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview"
              },
              {
                "name": "HTTP/3 From A To Z: Core Concepts",
                "link": "https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/"
              },
              {
                "name": "HTTP Crash Course & Exploration",
                "link": "https://www.youtube.com/watch?v=iYM2zFP3Zn0"
              },
              {
                "name": "What is HTTPS?",
                "link": "https://www.cloudflare.com/en-gb/learning/ssl/what-is-https/"
              },
              {
                "name": "Why HTTPS Matters",
                "link": "https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https"
              },
              {
                "name": "Enabling HTTPS on Your Servers",
                "link": "https://web.dev/enable-https/"
              },
              {
                "name": "How HTTPS works (comic)",
                "link": "https://howhttps.works/"
              }
            ]
          },
          {
            "name": "Data Structures",
            "recommendation-type": "opinion",
            "description": "As the name indicates, a Data Structure is a way of organizing the data in the memory so it can be used efficiently. Some common data structures are array, linked list, stack, hash table, queue, tree, heap, and graph.",
            "resources": [
              {
                "name": "What are Data Structures?",
                "link": "https://www.geeksforgeeks.org/data-structures"
              },
              {
                "name": "Data Structures and Algorithms",
                "link": "https://www.javatpoint.com/data-structure-tutorial"
              },
              {
                "name": "Data Structures Illustrated",
                "link": "https://www.youtube.com/watch?v=9rhT3P1MDHk&list=PLkZYeFmDuaN2-KUIv-mvbjfKszIGJ4FaY"
              },
              {
                "name": "C# resources",
                "link": "https://dev.to/adavidoaiei/fundamental-data-structures-and-algorithms-in-c-4ocf"
              },
              {
                "name": "Interview Questions about Data Structures",
                "link": "https://www.csharpstar.com/csharp-algorithms/"
              }
            ]
          }
        ]
      },
      "Database Fundamentals": {
        "description": "A database is a collection of useful data of one or more related organizations structured in a way to make data an asset to the organization. A database management system is a software designed to assist in maintaining and extracting large collections of data in a timely fashion. A Relational database is a type of database that stores and provides access to data points that are related to one another. Relational databases store data in a series of tables. NoSQL databases offer data storage and retrieval that is modeled differently to 'traditional' relational databases. NoSQL databases typically focus more on horizontal scaling, eventual consistency, speed and flexibility and is used commonly for big data and real-time streaming applications.",
        "resources": [
          {
            "name": "Oracle: What is a Database?",
            "link": "https://www.oracle.com/database/what-is-database/"
          },
          {
            "name": "Prisma.io: What are Databases?",
            "link": "https://www.prisma.io/dataguide/intro/what-are-databases"
          },
          {
            "name": "Intro To Relational Databases",
            "link": "https://www.udacity.com/course/intro-to-relational-databases--ud197"
          },
          {
            "name": "What is Relational Database",
            "link": "https://youtu.be/OqjJjpjDRLc"
          },
          {
            "name": "NoSQL Explained",
            "link": "https://www.mongodb.com/nosql-explained"
          },
          {
            "name": "How do NoSQL Databases work",
            "link": "https://www.youtube.com/watch?v=0buKQHokLK8"
          }
        ],
        "order": 3,
        "options": [
          {
            "name": "Database design basics",
            "recommendation-type": "opinion",
            "description": "Database Design is a collection of processes that facilitate the designing, development, implementation and maintenance of enterprise data management systems. Properly designed databases are easy to maintain, improve data consistency, and are cost-effective in terms of disk storage space. The main objectives of database design in DBMS are to produce logical and physical designs models of the proposed database system.",
            "resources": [
              {
                "name": "Database design basics",
                "link": "https://support.microsoft.com/en-us/office/database-design-basics-eb2159cf-1e30-401a-8084-bd4f9c9ca1f5"
              },
              {
                "name": "Database Design Course",
                "link": "https://www.youtube.com/watch?v=ztHopE5Wnpc"
              }
            ]
          },
          {
            "name": "SQL basics",
            "recommendation-type": "opinion",
            "description": "SQL stands for Structured Query Language. SQL lets you access and manipulate databases SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987. Although SQL is an ANSI/ISO standard, there are different versions of the SQL language. However, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner.",
            "resources": [
              {
                "name": "Introduction to SQL",
                "link": "https://www.w3schools.com/sql/sql_intro.asp"
              },
              {
                "name": "SQL Tutorial - Full Database Course for Beginners",
                "link": "https://www.youtube.com/watch?v=HXV3zeQKqGY"
              }
            ]
          },
          {
            "name": "Stored Procedures",
            "recommendation-type": "opinion",
            "description": "A stored procedure is a pre-compiled collection of SQL statements that can be executed on a database server. Stored procedures are typically used to perform specific tasks, such as retrieving data from a database, inserting or updating data, or performing complex calculations. They are stored on the database server and can be called or executed from a client application or other stored procedures. Stored procedures can improve database performance by reducing the amount of SQL code needed to be executed and allowing developers to reuse common pieces of code. They can also provide security by allowing database administrators to control which users have access to specific stored procedures.",
            "resources": [
              {
                "name": "Stored Procedure Tutorial",
                "link": "https://www.w3schools.com/sql/sql_stored_procedures.asp"
              },
              {
                "name": "Stored Procedure in SQL: Benefits And How to Create It",
                "link": "https://www.simplilearn.com/tutorials/sql-tutorial/stored-procedure-in-sql"
              },
              {
                "name": "SQL Server stored procedures for beginners",
                "link": "https://www.sqlshack.com/sql-server-stored-procedures-for-beginners/"
              }
            ]
          },
          {
            "name": "Constraints",
            "recommendation-type": "opinion",
            "description": "Database constraints are rules that are used to limit the data that can be stored in a database table. These constraints can be used to ensure the integrity and accuracy of the data in the table, and they can be used to enforce business rules or other requirements. For example, a constraint might be used to ensure that a column only contains positive numbers, or to ensure that a column always has a unique value. Constraints can be specified at the time a table is created, or they can be added to an existing table. Some common types of constraints include primary keys, foreign keys, and NOT NULL constraints.",
            "resources": [
              {
                "name": "SQL Constraints",
                "link": "https://www.w3schools.com/sql/sql_constraints.asp"
              },
              {
                "name": "Constraints of SQL",
                "link": "https://www.educative.io/courses/database-design-fundamentals/m7JnY9Xm6Qp"
              },
              {
                "name": "Constraints in DBMS",
                "link": "https://beginnersbook.com/2015/04/constraints-in-dbms/"
              }
            ]
          },
          {
            "name": "Triggers",
            "recommendation-type": "opinion",
            "description": "Triggers are a special type of stored procedures that are automatically executed in response to specific events that occur within a database. These events can include: Data modification events (INSERT, UPDATE, DELETE) on a specific table or view. Data definition events (CREATE, ALTER, DROP) on specific database objects such as tables or views. Logon events (CONNECT, DISCONNECT) that occur when a user connects to or disconnects from the database.",
            "resources": [
              {
                "name": "Database Triggers",
                "link": "https://docs.oracle.com/cd/A57673_01/DOC/server/doc/SCN73/ch15.htm"
              },
              {
                "name": "Database Triggers: Examples & Overview",
                "link": "https://study.com/academy/lesson/database-triggers-examples-overview.html"
              },
              {
                "name": "What are Triggers in SQL?",
                "link": "https://www.edureka.co/blog/triggers-in-sql/"
              },
              {
                "name": "What is a SQL Trigger?",
                "link": "https://www.essentialsql.com/sql-trigger/"
              }
            ]
          }
        ]
      },
      "Basics of ASP.NET Core": {
        "description": "ASP.NET Core is an open-source, cross-platform web framework for building modern web applications using .NET. Some of the basics of ASP.NET Core are Cross-platform, Open-source, Modular, High performance, MVC pattern, Dependency Injection, Middleware, Razor Pages and Razor Components, EF Core.",
        "resources": [
          {
            "name": "ASP.NET documentation",
            "link": "https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-7.0"
          },
          {
            "name": "ASP.NET Core Tutorial",
            "link": "https://www.tutorialspoint.com/asp.net_core/index.htm"
          },
          {
            "name": "Learn ASP.NET Core from Scratch",
            "link": "https://www.tutorialsteacher.com/core"
          }
        ],
        "order": 4,
        "options": [
          {
            "name": "MVC",
            "recommendation-type": "opinion",
            "description": "MVC is an architectural design pattern used for developing applications, specifically web applications. This pattern separates an application into three main logical components Model View Controller. Each architectural component is built to handle specific development aspects of an application. Model - Handles all data-related logic. Interacts with Database. View - Handles UI part of the applications (data presentation). Controller - Handles request flow, and acts as an intermediary between view and model.",
            "resources": [
              {
                "name": "MVC Official Documentation",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/mvc/overview?WT.mc_id=dotnet-35129-website&view=aspnetcore-7.0"
              },
              {
                "name": "ASP.NET MVC Architecture",
                "link": "https://www.tutorialsteacher.com/mvc/mvc-architecture"
              },
              {
                "name": "MVC Framework - Introduction",
                "link": "https://www.tutorialspoint.com/mvc_framework/mvc_framework_introduction.htm"
              }
            ]
          },
          {
            "name": "REST (Representational State Transfer)",
            "recommendation-type": "opinion",
            "description": "REST is an architectural style for building web services. In the context of .NET, RESTful web services can be created using the ASP.NET Web API framework, which allows developers to create HTTP-based services that can be consumed by a wide range of clients, including web browsers and mobile devices. The Web API framework provides a set of tools and libraries for creating RESTful services, including routing, request/response handling, and support for a variety of data formats, such as JSON and XML.",
            "resources": [
              {
                "name": "What is REST Services?",
                "link": "http://www.codedigest.com/quick-start/16/what-is-rest-services-how-to-create-rest-services-in-aspnet"
              },
              {
                "name": "Restful API In ASP.NET: Introduction of REST & Web API",
                "link": "https://www.c-sharpcorner.com/UploadFile/4b0136/restful-api-in-Asp-Net-introduction-of-rest-web-api/"
              },
              {
                "name": "What are RESTful APIs",
                "link": "https://www.pragimtech.com/blog/blazor/what-are-restful-apis/"
              }
            ]
          },
          {
            "name": "Razor Pages",
            "recommendation-type": "opinion",
            "description": "Razor Pages is a feature of the ASP.NET Core framework that allows developers to build web applications using a combination of Razor markup (a markup syntax for defining dynamic HTML) and C# code. Razor Pages is built on top of the ASP.NET Core MVC (Model-View-Controller) framework and provides a simpler, more intuitive way to build web pages and handle user input. Razor Pages are useful for building simple, self-contained web pages that do not require a complex navigation or layout structure, and are often used for building small to medium-size web applications.",
            "resources": [
              {
                "name": "Basics of Razor Pages",
                "link": "https://www.jetbrains.com/dotnet/guide/tutorials/basics/razor-pages/"
              },
              {
                "name": "Get started with Razor Pages in ASP.NET Core",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/?view=aspnetcore-7.0"
              },
              {
                "name": "What Is Razor Pages?",
                "link": "https://www.learnrazorpages.com/"
              }
            ]
          },
          {
            "name": "Razor Components",
            "recommendation-type": "opinion",
            "description": "Razor Components is a feature of ASP.NET Core that allows developers to build reusable, self-contained components that can be used across multiple pages or even multiple applications. Razor Components is built on top of the Razor view engine, which allows developers to define components using a combination of Razor markup and C# code. Razor Components are useful for building complex, dynamic, and reusable UI elements, such as forms, tables, or dialogs, and can be used to build both small and large-scale web applications.",
            "resources": [
              {
                "name": "ASP.NET Core Razor components",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-7.0"
              },
              {
                "name": "What is Core razor components?",
                "link": "https://www.youtube.com/watch?v=KseDLejhYi0"
              },
              {
                "name": "Core Razor Components in .NET",
                "link": "https://www.c-sharpcorner.com/blogs/asp-net-core-razor-componets"
              }
            ]
          },
          {
            "name": "Middlewares",
            "recommendation-type": "opinion",
            "description": "Middleware is software that sits between an operating system and application software, facilitating communication and data exchange between them. In the context of web development, middleware refers to software components that handle requests and responses in a web application. These components are typically executed in a pipeline, with each component performing a specific task, such as authentication, logging, or routing. In the ASP.NET Core framework, middleware is a key concept that is used to build web applications. Middleware components are added to the application pipeline using the IApplicationBuilder interface and are executed in the order in which they are added. For example, an application might have middleware components for handling authentication, logging, and routing, in that order.",
            "resources": [
              {
                "name": "What is Middleware?",
                "link": "https://www.redhat.com/en/topics/middleware/what-is-middleware"
              },
              {
                "name": "Introduction to Middleware",
                "link": "https://www.techtarget.com/searchapparchitecture/definition/middleware"
              },
              {
                "name": "What is Middleware in .NET?",
                "link": "https://www.talend.com/resources/what-is-middleware/"
              }
            ]
          },
          {
            "name": "Filters and Attributes",
            "recommendation-type": "opinion",
            "description": "In the ASP.NET Core framework, filters and attributes are used to add additional functionality to controllers and action methods, such as authentication, authorization, caching, and exception handling. Filters are classes that implement one or more of the filter interfaces provided by the framework, such as IActionFilter, IResultFilter, IExceptionFilter, and IAuthorizationFilter. Filters can be applied to controllers, action methods, or globally to the entire application. They can be used to perform tasks such as logging, caching, and handling exceptions. Attributes are classes that derive from the Attribute class and are used to decorate controllers, action methods, or properties with additional metadata. For example, the Authorize attribute can be used to require that a user is authenticated before accessing a specific action method, and the ValidateAntiForgeryToken attribute can be used to protect against cross-site request forgery (CSRF) attacks.",
            "resources": [
              {
                "name": "Filters",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-7.0"
              }
            ]
          },
          {
            "name": "App Settings and Configurations",
            "recommendation-type": "opinion",
            "description": "In the ASP.NET Core framework, app settings and configurations refer to the process of storing and managing application-specific settings and configuration data. App Settings refers to the key-value pairs of data that an application uses to configure its behavior, such as database connection strings, API keys, or other settings. These settings are typically stored in configuration files, such as appsettings.json, appsettings.development.json, or appsettings.production.json, and can be accessed using the IConfiguration interface. Configurations refer to the process of loading and managing the app settings, including specifying the source of the settings and the format of the configuration files. In ASP.NET Core, the Startup class is responsible for configuring the application’s settings and typically loads configuration data from various sources, such as JSON files, environment variables, or command-line arguments.",
            "resources": [
              {
                "name": "What is Azure App Configuration?",
                "link": "https://learn.microsoft.com/en-us/azure/azure-app-configuration/overview"
              },
              {
                "name": "What are App Configurations and how do I work with them?",
                "link": "https://support.procore.com/faq/what-are-app-configurations"
              },
              {
                "name": "Configuration & AppSettings",
                "link": "https://docs.servicestack.net/appsettings"
              }
            ]
          }
        ]
      },
      "ORM": {
        "description": "ORM stands for Object-Relational Mapping, and it is a technique that allows a developer to work with a database using objects. It is a way of abstracting the database so that the developer can think in terms of objects, rather than tables and SQL queries. This can make it easier to write and maintain code, as well as improve the performance of the application.",
        "resources": [
          {
            "name": "ORM (Object Relational Mapping)",
            "link": "https://www.telerik.com/blogs/dotnet-basics-orm-object-relational-mapping"
          },
          {
            "name": "What is an ORM - The Meaning of Object Relational Mapping",
            "link": "https://www.freecodecamp.org/news/what-is-an-orm-the-meaning-of-object-relational-mapping-database-tools/"
          },
          {
            "name": "Understanding Object-Relational Mapping: Pros, Cons",
            "link": "https://www.altexsoft.com/blog/object-relational-mapping/"
          }
        ],
        "order": 5,
        "options": [
          {
            "name": "Entity Framework Core",
            "recommendation-type": "opinion",
            "description": "Entity Framework Core (EF Core) is an open-source Object-Relational Mapping (ORM) framework for .NET. It is a lightweight, cross-platform version of Entity Framework, the ORM framework that was part of the .NET Framework. EF Core allows developers to work with relational data using domain-specific objects, eliminating the need to write raw SQL statements. Instead, EF Core provides a set of APIs that can be used to interact with a database, providing a simple and efficient way to perform common database operations such as querying, inserting, updating, and deleting data.",
            "resources": [
              {
                "name": "Example of Entity Framework Core",
                "link": "https://learn.microsoft.com/en-us/ef/core/"
              },
              {
                "name": "Entity Framework Core Documentation",
                "link": "https://learn.microsoft.com/en-us/ef/"
              },
              {
                "name": "What are the Basics of Entity Framework Core?",
                "link": "https://www.jetbrains.com/dotnet/guide/tutorials/basics/entity-framework-core/"
              }
            ],
            "options": [
              {
                "name": "Framework Basics",
                "recommendation-type": "opinion",
                "description": "An ORM (Object-Relational Mapping) framework is a tool that maps the objects in an application to the database tables, allowing developers to work with the database using familiar, object-oriented concepts. ORM frameworks are tools that map the objects in an application to the database tables, allowing developers to work with the database using familiar, object-oriented concepts such as Entities, Mapping, Context, Queries, Lazy Loading, Change Tracking, and Caching.",
                "resources": [
                  {
                    "name": "ORM Framework",
                    "link": "https://www.h2kinfosys.com/blog/orm-framework/"
                  },
                  {
                    "name": "What are Frameworks in ORM",
                    "link": "https://www.killerphp.com/articles/what-are-orm-frameworks/"
                  },
                  {
                    "name": "Essentials of ORM Framework",
                    "link": "https://medium.com/@mikependon/the-essentials-of-orm-framework-in-your-software-development-837131efd91b"
                  },
                  {
                    "name": "ORM Frameworks - What is an Object-Relational Mapping Framework",
                    "link": "https://onlinecode.org/what-are-orm-frameworks/"
                  }
                ]
              },
              {
                "name": "Code First Migrations",
                "recommendation-type": "opinion",
                "description": "Code First Migrations is a feature of Entity Framework that enables you to change the model classes in your application and then propagate those changes to the database. When you use Code First Migrations, Entity Framework generates the necessary SQL commands to update the database schema to match the model classes. To use Code First Migrations, you need to enable it in your Entity Framework application. This can be done by adding a reference to the Entity Framework Migrations NuGet package, and then enabling Migrations in your application. Once Migrations is enabled, you can use the Package Manager Console to add a new migration to your application. This will generate a class that contains the necessary SQL commands to update the database schema. You can then use the Update-Database command to apply the migration to the database.",
                "resources": [
                  {
                    "name": "What is a Code First Migration?",
                    "link": "https://www.entityframeworktutorial.net/code-first/what-is-code-first.aspx"
                  },
                  {
                    "name": "Example for Code First Migrations",
                    "link": "https://learn.microsoft.com/en-us/ef/ef6/modeling/code-first/migrations/"
                  },
                  {
                    "name": "Code First Migrations in Entity Framework",
                    "link": "https://www.c-sharpcorner.com/UploadFile/26b237/code-first-migrations-in-entity-framework/"
                  }
                ]
              },
              {
                "name": "Change Tracker API",
                "recommendation-type": "opinion",
                "description": "The Change Tracker API is a feature of ORM (Object-Relational Mapping) frameworks, such as Entity Framework Core, that allows developers to track changes to entities and automatically persist them to the database. The Change Tracker API is typically exposed through the context class, which is the main class that manages the connection to the database and provides access to the entities. When an entity is retrieved from the database, the Change Tracker API marks it as 'unchanged.' When a property of the entity is modified, the Change Tracker API marks the entity as 'modified.' And when a new entity is added to the context, the Change Tracker API marks it as 'added.'",
                "resources": [
                  {
                    "name": "Change Tracking in EF Core",
                    "link": "https://learn.microsoft.com/en-us/ef/core/change-tracking/"
                  },
                  {
                    "name": "Intro to Change Tracking",
                    "link": "https://www.oreilly.com/library/view/programming-entity-framework/9781449331825/ch05.html"
                  },
                  {
                    "name": "ChangeTracker in Entity Framework Core",
                    "link": "https://www.entityframeworktutorial.net/efcore/changetracker-in-ef-core.aspx"
                  }
                ]
              },
              {
                "name": "Lazy Eager Explicit Loading",
                "recommendation-type": "opinion",
                "description": "Eager Loading helps you to load all your needed entities at once; i.e., all your child entities will be loaded at a single database call. This can be achieved, using the Include method, which returns the related entities as part of the query and a large amount of data is loaded at once. Lazy Loading is the default behavior of an Entity Framework, where a child entity is loaded only when it is accessed for the first time. It simply delays the loading of the related data until you ask for it.",
                "resources": [
                  {
                    "name": "Eager Loading & Lazy Loading",
                    "link": "https://www.c-sharpcorner.com/article/eager-loading-lazy-loading-and-explicit-loading-in-entity-framework/"
                  },
                  {
                    "name": "Difference between Eager and Lazy Loading",
                    "link": "https://stackoverflow.com/questions/31366236/lazy-loading-vs-eager-loading"
                  },
                  {
                    "name": "Working With Lazy & Eager Loading in Entity Framework",
                    "link": "https://dzone.com/articles/working-with-lazy-loading-and-eager-loading-in-ent"
                  }
                ]
              }
            ]
          },
          {
            "name": "Dapper",
            "recommendation-type": "opinion",
            "description": "Dapper is a lightweight object-relational mapper (ORM) for the .NET framework. It is designed to provide fast and simple access to data stored in a database by mapping the data to objects in the application. Dapper helps you to write efficient and concise code for interacting with databases, without the need for a full-featured ORM like Entity Framework. It provides a set of extension methods for the IDbConnection interface, which you can use to execute SQL queries and map the results to strongly-typed objects.",
            "resources": [
              {
                "name": "The official Dapper website",
                "link": "https://github.com/StackExchange/Dapper"
              },
              {
                "name": "The Dapper Documentation",
                "link": "https://dapper-tutorial.net/"
              }
            ]
          },
          {
            "name": "RepoDB",
            "recommendation-type": "opinion",
            "description": "RepoDB is an open-source ORM (Object-Relational Mapping) library for .NET that simplifies the process of working with databases. It is a lightweight, fast, and easy-to-use library that provides a simple and consistent API for performing common database operations such as querying, inserting, updating, and deleting data. RepoDB is built on top of ADO.NET, which is the native data access technology in .NET, and provides a higher-level abstraction on top of it. This allows RepoDB to take advantage of the performance and scalability of ADO.NET while providing a simpler and more convenient API for developers.",
            "resources": [
              {
                "name": "Get Started with RepoDB",
                "link": "https://repodb.net/"
              },
              {
                "name": "Complete Guide to RepoDB",
                "link": "https://medium.com/nerd-for-tech/everything-you-need-to-know-about-repodb-23cd4b9939c1"
              },
              {
                "name": "Why Choose RepoDB?",
                "link": "https://blog.devgenius.io/why-choose-repodb-orm-over-dapper-da87432c7830"
              }
            ]
          },
          {
            "name": "NHibernate",
            "recommendation-type": "opinion",
            "description": "NHibernate is an open-source Object-Relational Mapping (ORM) framework for .NET. It is a powerful and flexible framework that can greatly simplify working with relational data in .NET. NHibernate is similar to other ORM frameworks such as Entity Framework and RepoDB in that it provides a higher-level abstraction on top of the underlying data access technology (ADO.NET in this case) and allows developers to work with data using domain-specific objects, eliminating the need to write raw SQL statements. NHibernate uses the concept of 'mapping files' which are XML files that define how the classes in the application map to the tables and columns in the database. These mapping files are used to create a conceptual model of the data in the form of classes, and then NHibernate uses this model to generate the SQL statements necessary to interact with the database.",
            "resources": [
              {
                "name": "What is Nhibernate?",
                "link": "https://www.partech.nl/en/publications/2021/08/what-is-nhibernate-and-how-is-it-different-from-entity-framework"
              },
              {
                "name": "NHibernate - ORM",
                "link": "https://www.tutorialspoint.com/nhibernate/nhibernate_orm.htm"
              },
              {
                "name": "Get Started with NHibernate",
                "link": "https://nhibernate.info/"
              }
            ]
          }
        ]
      },
      "Dependency Injection": {
        "description": "Dependency injection (DI) is a software design pattern that is used to manage the dependencies of an application. It is a technique that allows developers to write loosely-coupled code, by separating the responsibility of creating and managing objects from the objects themselves. In a typical implementation, a DI container is used to manage the dependencies of the application. The container is responsible for creating and managing instances of objects and their dependencies, and providing them to other objects as needed.",
        "resources": [
          {
            "name": "What is Dependency Injection?",
            "link": "https://stackoverflow.com/questions/130794/what-is-dependency-injection"
          },
          {
            "name": "Dependency Injection, It’s Definition & principles",
            "link": "https://www.growin.com/blog/what-is-dependency-injection/"
          },
          {
            "name": "Intro to Dependency Injections",
            "link": "https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/"
          }
        ],
        "order": 6,
        "options": [
          {
            "name": "Scrutor",
            "recommendation-type": "opinion",
            "description": "Scrutor is an open-source library for .NET that extends the functionality of the built-in dependency injection framework in .NET Core. It provides a set of extension methods for the IServiceCollection interface, which can be used to register and configure services in a more convenient and flexible way. One of the main features of Scrutor is its ability to automatically scan assemblies for services and register them with the dependency injection container, allowing you to avoid having to manually register each service one by one. It also provides a fluent API that makes it easy to configure services, such as specifying the lifetime of a service, adding decorators, and more.",
            "resources": [
              {
                "name": "How to use Scrutor in ASP.Net Core?",
                "link": "https://www.infoworld.com/article/3321356/how-to-use-scrutor-in-aspnet-core.html"
              },
              {
                "name": "Complete Guide to Scrutor",
                "link": "https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/"
              }
            ]
          },
          {
            "name": "Life Cycles",
            "recommendation-type": "opinion",
            "description": "In ASP.NET, dependency injection (DI) lifecycles determine the lifetime of objects that are resolved through the DI container. There are several predefined lifecycle options in the Microsoft.Extensions.DependencyInjection library, including: Transient, Scoped, Singleton. Additionally, you can also create a custom lifecycle by implementing the Microsoft.Extensions.DependencyInjection.IServiceScopeFactory interface.",
            "resources": [
              {
                "name": "Complete Guide to Dependency Injection Lifecycles",
                "link": "https://www.youtube.com/watch?v=wA5bPsv2CLA"
              },
              {
                "name": "What are Service Life Cyles in ASP.NET Core?",
                "link": "https://endjin.com/blog/2022/09/service-lifetimes-in-aspnet-core"
              },
              {
                "name": "Learn Service Lifetimes in .NET Core",
                "link": "https://henriquesd.medium.com/dependency-injection-and-service-lifetimes-in-net-core-ab9189349420"
              }
            ],
            "options": [
              {
                "name": "Scoped",
                "recommendation-type": "opinion",
                "description": "Scoped lifetime is a type of dependency injection that creates a new instance of an object for each unique request but reuses the same instance for the same request. Scoped lifetime is useful when you have services that are specific to a given request, such as a request-scoped database context. This allows you to have a separate and isolated instance of a service for each unique request, which can help to prevent cross-request contamination of data and improve performance.",
                "resources": [
                  {
                    "name": "Dependency Injection - What is Scope?",
                    "link": "https://javaranch.com/journal/2008/10/dependency-injection-what-is-scope.html"
                  },
                  {
                    "name": "Effective Dependency Injection Scoping",
                    "link": "https://medium.com/android-news/effective-dependency-injection-scoping-4bac813d4491"
                  }
                ]
              },
              {
                "name": "Transient",
                "recommendation-type": "opinion",
                "description": "Transient lifetime is a type of dependency injection that creates a new instance of an object each time it is requested. Transient lifetime is useful when you have services that are stateless and do not need to maintain any data between requests, such as a service that performs a simple calculation or returns data from a database.",
                "resources": [
                  {
                    "name": "What are Transient Dependencies?",
                    "link": "https://blazor-university.com/dependency-injection/dependency-lifetimes-and-scopes/transient-dependencies/"
                  },
                  {
                    "name": "Dependency Injection Lifetime",
                    "link": "https://www.tektutorialshub.com/asp-net-core/asp-net-core-dependency-injection-lifetime/"
                  },
                  {
                    "name": "Dependency Injection Explained with Transient",
                    "link": "https://www.youtube.com/watch?v=NkTF_6IQPiY"
                  }
                ]
              },
              {
                "name": "Singleton",
                "recommendation-type": "opinion",
                "description": "Singleton lifetime is a type of dependency injection that creates a single instance of an object and reuses it throughout the lifetime of the application. Singleton lifetime is useful when you have services that need to maintain state or shared data across requests, such as a service that caches data or maintains a connection to a resource.",
                "resources": [
                  {
                    "name": "What are Singleton Dependencies?",
                    "link": "https://blazor-university.com/dependency-injection/dependency-lifetimes-and-scopes/transient-dependencies/"
                  },
                  {
                    "name": "Dependency Injection Lifetime",
                    "link": "https://www.tektutorialshub.com/asp-net-core/asp-net-core-dependency-injection-lifetime/"
                  },
                  {
                    "name": "Dependency Injection Explained with Singleton",
                    "link": "https://www.youtube.com/watch?v=NkTF_6IQPiY"
                  }
                ]
              }
            ]
          },
          {
            "name": "DI Containers",
            "recommendation-type": "opinion",
            "description": "A dependency injection (DI) container is a software component that is responsible for managing the dependencies of an application. It is used to create and manage instances of objects and their dependencies and is particularly useful for implementing the Dependency Inversion Principle in software development. A DI container typically consists of two main parts: a configuration API, which is used to register the types and their dependencies, and a resolution API, which is used to retrieve instances of the registered types. The DI container automatically resolves the dependencies of the objects it creates and manages the lifetime of the objects and their dependencies.",
            "resources": [
              {
                "name": "What is DI Container?",
                "link": "https://www.dotnettricks.com/learn/dependencyinjection/what-is-ioc-container-or-di-container"
              },
              {
                "name": "Getting Started with DI Container",
                "link": "https://stackoverflow.com/questions/50718586/what-is-a-di-container"
              },
              {
                "name": "How to Use DI Container?",
                "link": "https://learn.userfrosting.com/services/the-di-container"
              }
            ],
            "options": [
              {
                "name": "Microsoft Extensions Dependency Injection",
                "recommendation-type": "opinion",
                "description": "Microsoft.Extensions.DependencyInjection is a dependency injection framework that is part of the Microsoft.Extensions.DependencyInjection NuGet package. It is used to create and manage instances of objects and their dependencies and is particularly useful for implementing the Dependency Inversion Principle in .NET applications. The package provides a simple and consistent API for registering services and resolving dependencies, which can be used to configure and manage the lifetime of objects in an application. It also provides built-in support for various types of service lifetime, such as transient, singleton, and scoped.",
                "resources": [
                  {
                    "name": "Guide to Microsoft Extensions Dependency Injection",
                    "link": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection?view=dotnet-plat-ext-7.0"
                  },
                  {
                    "name": "Exploring the Microsoft.Extensions.DependencyInjection",
                    "link": "https://www.codeproject.com/Articles/5339241/Exploring-the-Microsoft-Extensions-DependencyInjec"
                  },
                  {
                    "name": "How to use Microsoft.Extensions.DependencyInjection",
                    "link": "https://stackoverflow.com/questions/53825155/how-can-i-use-microsoft-extensions-dependencyinjection-in-an-net-core-console-a"
                  }
                ]
              },
              {
                "name": "Autofac",
                "recommendation-type": "opinion",
                "description": "Autofac is an open-source dependency injection framework for .NET. It is designed to make it easier to manage the dependencies of an application by automatically resolving and managing the lifetime of objects and their dependencies. Autofac uses a technique called “component registration” to define the objects and dependencies of an application. This is done by creating instances of the ContainerBuilder class and using its methods to register types, instances, and factories. Then, the Build() method is called to create an instance of the IContainer interface, which can be used to resolve dependencies throughout the application.",
                "resources": [
                  {
                    "name": "Autofac’s Documentation",
                    "link": "https://autofac.readthedocs.io/en/latest/"
                  },
                  {
                    "name": "Getting started with Autofac",
                    "link": "https://autofac.org/"
                  },
                  {
                    "name": "Dependency Injection with Autofac",
                    "link": "https://www.codeproject.com/Articles/25380/Dependency-Injection-with-Autofac"
                  }
                ]
              },
              {
                "name": "Ninject",
                "recommendation-type": "opinion",
                "description": "Ninject is an open-source dependency injection framework for .NET. It is designed to make it easier to manage the dependencies of an application by automatically resolving and managing the lifetime of objects and their dependencies. Ninject uses a technique called “binding” to define the objects and dependencies of an application. This is done by creating instances of the StandardKernel class and using its methods to register types, instances, and factories. Then, the Get() method is called to resolve the dependencies throughout the application.",
                "resources": [
                  {
                    "name": "Intro to Ninject",
                    "link": "http://www.ninject.org/"
                  },
                  {
                    "name": "What is Ninject and when do you use it?",
                    "link": "https://stackoverflow.com/questions/17375234/what-is-ninject-and-when-do-you-use-it"
                  },
                  {
                    "name": "How to use NInject?",
                    "link": "https://www.infoworld.com/article/3191648/how-to-implement-di-in-webapi-using-ninject.html"
                  }
                ]
              },
              {
                "name": "Castle Windsor",
                "recommendation-type": "opinion",
                "description": "Castle Windsor is an open-source dependency injection framework for .NET. It is designed to make it easier to manage the dependencies of an application by automatically resolving and managing the lifetime of objects and their dependencies. Castle Windsor uses a technique called “registration” to define the objects and dependencies of an application. This is done by creating instances of the WindsorContainer class and using its methods to register types, instances, and factories. Then, the Resolve() method is called to resolve the dependencies throughout the application.",
                "resources": [
                  {
                    "name": "Getting Started with Dependency Injection Using Castle Windsor",
                    "link": "https://www.codementor.io/@copperstarconsulting/getting-started-with-dependency-injection-using-castle-windsor-4meqzcsvh"
                  },
                  {
                    "name": "What is Castle Windsor?",
                    "link": "https://stackoverflow.com/questions/124871/what-is-castle-windsor-and-why-should-i-care"
                  },
                  {
                    "name": "Intro to Castle Windsor",
                    "link": "http://www.castleproject.org/projects/windsor/"
                  }
                ]
              },
              {
                "name": "Simple Injector",
                "recommendation-type": "opinion",
                "description": "Simple Injector is an open-source dependency injection framework for .NET. It is designed to make it easy to manage the dependencies of an application by automatically resolving and managing the lifetime of objects and their dependencies. Simple Injector uses a technique called “registration” to define the objects and dependencies of an application. This is done by creating an instance of the Container class and using its methods to register types, instances, and factories. Then, the GetInstance() method is called to resolve the dependencies throughout the application.",
                "resources": [
                  {
                    "name": "How to use Simple Injector?",
                    "link": "https://www.infoworld.com/article/3636242/how-to-use-simple-injector-in-aspnet-core-mvc.html"
                  },
                  {
                    "name": "Simple Injector’s Documentation",
                    "link": "https://docs.simpleinjector.org/en/latest/"
                  },
                  {
                    "name": "Example of Dependency Injection Using Simple Injector",
                    "link": "https://www.c-sharpcorner.com/UploadFile/4d9083/dependency-injection-using-simple-injector/"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Caching": {
        "description": "Caching is a technique of storing frequently used data or information in local memory for a certain time period. So, next time, when the client requests the same information, instead of retrieving the information from the database, it will give the information from the local memory. The main advantage of caching is that it improves performance by reducing the processing burden.",
        "resources": [
          {
            "name": "Caching in ASP.Net",
            "link": "https://www.c-sharpcorner.com/UploadFile/2072a9/caching-in-Asp-Net/"
          },
          {
            "name": "Overview of caching in ASP.NET Core",
            "link": "https://learn.microsoft.com/en-us/aspnet/core/performance/caching/overview?view=aspnetcore-7.0"
          },
          {
            "name": "Intro to Data Caching in ASP.NET",
            "link": "https://www.tutorialspoint.com/asp.net/asp.net_data_caching.htm"
          }
        ],
        "order": 7,
        "options": [
          {
            "name": "Memory Cache",
            "recommendation-type": "opinion",
            "description": "Memory caching (often simply referred to as caching) is a technique in which computer applications temporarily store data in a computer’s main memory (i.e., random access memory, or RAM) to enable fast retrievals of that data. The RAM that is used for the temporary storage is known as the cache.",
            "resources": [
              {
                "name": "Cache in-memory in ASP.NET Core",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/performance/caching/memory?view=aspnetcore-7.0"
              },
              {
                "name": "Intro to In-Memory Caching in C#",
                "link": "https://www.youtube.com/watch?v=2jj2wH60QuE"
              },
              {
                "name": "What is Memory Caching?",
                "link": "https://hazelcast.com/glossary/memory-caching/"
              }
            ]
          },
          {
            "name": "Entity Framework Cache",
            "recommendation-type": "opinion",
            "description": "Entity Framework Core (EF Core) is a cross-platform version of the popular Entity Framework data access technology that is lightweight, extendable, and open source. It can be used as an object-relational mapper (O/RM), allowing .NET developers to use .NET objects to interact with a database and removing the requirement for most of the data-access code that is generally required. However, during peak loads, high-transaction .NET Core apps using EF Core have performance and scalability problems in the database tier. This is because, although you can scale the application layer by adding more application servers, you can’t scale the database tier by adding more database servers.",
            "resources": [
              {
                "name": "Entity Framework 2nd Level Cache",
                "link": "https://www.gridgain.com/docs/latest/developers-guide/net-specific/net-entity-framework-cache"
              },
              {
                "name": "What is Entity Framework?",
                "link": "https://www.youtube.com/watch?v=Z7713GBhi4k"
              },
              {
                "name": "Caching In Entity Framework",
                "link": "https://www.c-sharpcorner.com/article/caching-in-entity-framework-ef-core-using-ncache/"
              }
            ]
          },
          {
            "name": "Distributed Cache",
            "recommendation-type": "opinion",
            "description": "A distributed cache is a cache shared by multiple app servers, typically maintained as an external service to the app servers that access it. A distributed cache can improve the performance and scalability of an ASP.NET Core app, especially when the app is hosted by a cloud service or a server farm.",
            "resources": [
              {
                "name": "Distributed caching in ASP.NET Core",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/performance/caching/distributed?view=aspnetcore-7.0"
              },
              {
                "name": "Distributed Caching In ASP.NET Core With Redis",
                "link": "https://www.youtube.com/watch?v=Tt5zIKVMMbs"
              },
              {
                "name": "What is a Distributed Cache?",
                "link": "https://hazelcast.com/glossary/distributed-cache/"
              }
            ],
            "options": [
              {
                "name": "Memcached",
                "recommendation-type": "opinion",
                "description": "Memcached is an open-source, high-performance, distributed memory object caching system which helps in reducing database load. It maintains data as an in-memory key-value store for small chunks of arbitrary data (strings, objects) which can be the result of API calls, database reads, and so on.",
                "resources": [
                  {
                    "name": "Using Memcached as Distributed Cache in .NET Core",
                    "link": "https://dotnetcorecentral.com/blog/using-memcached-as-distributed-cache-in-net-core/"
                  },
                  {
                    "name": "Memcached as Distributed Cache in .Net Core Application",
                    "link": "https://www.youtube.com/watch?v=yQ8Kwx9M_Hg"
                  },
                  {
                    "name": "Intro to Memcached",
                    "link": "https://memcached.org/"
                  }
                ]
              },
              {
                "name": "Redis",
                "recommendation-type": "opinion",
                "description": "Redis is an open source (BSD licensed) in-memory data structure store used as a database, cache, message broker, and streaming engine. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyper loglogs, geos patial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and various levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. You can use Redis in many programming languages. It is such a popular and widely used cache that Microsoft Azure also provides its cloud-based version with the name Azure Cache for Redis.",
                "resources": [
                  {
                    "name": "Learn how to build with Redis Stack and .NET",
                    "link": "https://redis.io/docs/stack/get-started/tutorials/stack-dotnet/"
                  },
                  {
                    "name": "Redis Cache In ASP.NET 6.0 Web API",
                    "link": "https://www.c-sharpcorner.com/article/easily-use-redis-cache-in-asp-net-6-0-web-api/"
                  },
                  {
                    "name": "ASP.Net Core Distributed Caching - Redis Caching",
                    "link": "https://www.youtube.com/watch?v=4Br-QnBo6Yw"
                  }
                ],
                "options": [
                  {
                    "name": "StackExchange Redis",
                    "recommendation-type": "opinion",
                    "description": "StackExchange.Redis is a high-performance general-purpose redis client for .NET languages (C#, etc.). It is the logical successor to BookSleeve and is the client developed by (and used by) Stack Exchange for busy sites like Stack Overflow.",
                    "resources": [
                      {
                        "name": "Using StackExchange.Redis with .NET",
                        "link": "https://docs.redis.com/latest/rs/references/client_references/client_csharp/"
                      },
                      {
                        "name": "Introduction to StackExchange.Redis",
                        "link": "https://www.youtube.com/watch?v=rsXvpCHdldg"
                      },
                      {
                        "name": "Getting Started with Stackexchange Redis",
                        "link": "https://stackexchange.github.io/StackExchange.Redis/"
                      }
                    ]
                  },
                  {
                    "name": "Easy Caching",
                    "recommendation-type": "opinion",
                    "description": "EasyCaching is an open-source caching library that contains basic usages and some advanced usages of caching which can help us to handle caching more easily.",
                    "resources": [
                      {
                        "name": "Easy Caching using Redis",
                        "link": "https://easycaching.readthedocs.io/en/latest/Redis/"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "Databases": {
        "description": "In an ASP.NET application, there are several types of databases that can be used to store and retrieve data. Some of the most commonly used databases include: Relational databases, NoSQL databases, In-memory databases, Embedded databases, Cloud-based databases. Each database type has its own set of features and use cases, and the choice of which database to use will depend on the specific requirements of the application.",
        "resources": [
          {
            "name": "ASP.NET Database Tutorial",
            "link": "https://www.guru99.com/insert-update-delete-asp-net.html"
          },
          {
            "name": "Introduction to Working with a Database in ASP.NET",
            "link": "https://learn.microsoft.com/en-us/aspnet/web-pages/overview/data/5-working-with-data"
          },
          {
            "name": "ASP.NET Web Pages - Databases",
            "link": "https://www.w3schools.com/asp/webpages_database.asp"
          }
        ],
        "order": 8,
        "options": [
          {
            "name": "Search Engines",
            "recommendation-type": "opinion",
            "description": "A search engine in an ASP.NET application is a tool or module that allows users to search for and retrieve specific information from the application’s database or other data sources. Search engines can be used to perform full-text search, faceted search, and geospatial search, among other things. Search engines can be integrated into an ASP.NET application by using libraries or frameworks that provide a .NET client for interacting with the search engine. Some popular search engines that can be integrated with an ASP.NET application include Elasticsearch, Apache Solr, Sphinx, and Microsoft Azure Search.",
            "resources": [
              {
                "name": "Search Engine Optimization with ASP.NET",
                "link": "https://learn.microsoft.com/en-us/archive/msdn-magazine/2009/september/search-engine-optimization-with-asp-net-4-0-visual-studio-2010-and-iis7"
              },
              {
                "name": "Creating an ASP.NET Search Engine",
                "link": "https://www.developerfusion.com/article/4389/create-a-site-search-engine-in-aspnet/"
              },
              {
                "name": "Simple Search Engine in ASP.NET",
                "link": "https://www.youtube.com/watch?v=KTkubhS-u50"
              }
            ],
            "options": [
              {
                "name": "Elasticsearch",
                "recommendation-type": "opinion",
                "description": "Elasticsearch is a distributed, open-source search and analytics engine that can be used to index, search, and analyze large volumes of data quickly and in near real-time. In an ASP.NET application, Elasticsearch can be integrated as a search engine to provide advanced search functionality. There are several libraries available for integrating Elasticsearch with an ASP.NET application, such as Nest and Elasticsearch.Net.",
                "resources": [
                  {
                    "name": "Elasticsearch in ASP.NET Core",
                    "link": "https://code-maze.com/elasticsearch-aspnet-core/"
                  },
                  {
                    "name": "An Elasticsearch Tutorial for .NET Developers",
                    "link": "https://www.toptal.com/dot-net/elasticsearch-dot-net-developers"
                  },
                  {
                    "name": "How to integrate ElasticSearch in ASP.NET?",
                    "link": "https://blexin.com/en/blog-en/how-to-integrate-elasticsearch-in-asp-net-core/"
                  }
                ]
              },
              {
                "name": "Solr",
                "recommendation-type": "opinion",
                "description": "Apache Solr is a search engine platform based on the Apache Lucene library. It is a standalone enterprise search server that provides a REST-like API for indexing, searching, and updating documents. Solr can be useful in ASP.NET applications to provide advanced search capabilities, such as full-text search, faceted search, and geospatial search.",
                "resources": [
                  {
                    "name": "Guide to Solr in ASP.NET",
                    "link": "https://www.codeproject.com/Tips/480091/Using-Solr-for-Search-with-NET-Csharp"
                  },
                  {
                    "name": "How to get Started with Solr.NET?",
                    "link": "https://stackoverflow.com/questions/5646615/how-to-get-started-with-solr-net"
                  },
                  {
                    "name": "Integrate Solr Instance With .NET Core",
                    "link": "https://stacksecrets.com/dot-net-core/integrate-solr-instance-with-net-core"
                  }
                ]
              },
              {
                "name": "Sphinx",
                "recommendation-type": "opinion",
                "description": "Sphinx is an open-source full-text search engine that can be used to index, search, and analyze large volumes of data quickly and in near real-time. In an ASP.NET application, Sphinx can be integrated as a search engine to provide advanced search functionality. There are several libraries available for integrating Sphinx with an ASP.NET application, such as SphinxQL.NET and SphinxClient.",
                "resources": [
                  {
                    "name": "Overview of Sphinx in ASP.NET",
                    "link": "https://www.sphinxconnector.net/"
                  },
                  {
                    "name": "Intro to Sphinx",
                    "link": "http://sphinxsearch.com/forum/view.html?id=3609"
                  },
                  {
                    "name": "Documentation of Sphinx in ASP.NET",
                    "link": "https://www.ericholscher.com/blog/2016/jul/1/sphinx-and-rtd-for-writers/"
                  }
                ]
              }
            ]
          },
          {
            "name": "NoSQL",
            "recommendation-type": "opinion",
            "description": "NoSQL (Not Only SQL) is a type of database that does not use the traditional table-based relational model. It is designed to handle large amounts of unstructured or semi-structured data and is often used in big data and real-time web applications. There are several types of NoSQL databases, each with their own unique features and use cases, such as document databases, key-value databases, graph databases, and column-family databases.",
            "resources": [
              {
                "name": "NoSQL in .NET Applications",
                "link": "https://www.slideshare.net/shijucv/nosql-database-in-net-apps"
              },
              {
                "name": "Open Source NoSQL Database for .NET",
                "link": "https://www.alachisoft.com/nosdb/"
              },
              {
                "name": "Use NoSQL databases in ASP.NET",
                "link": "https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure"
              }
            ],
            "options": [
              {
                "name": "Redis",
                "recommendation-type": "opinion",
                "description": "Redis (Remote Dictionary Server) is an open-source, in-memory data structure store that can be used as a database, cache, and message broker. In an ASP.NET application, Redis can be used as a caching mechanism to store frequently accessed data in memory, improving performance by reducing the need for database queries.",
                "resources": [
                  {
                    "name": "Redis OM .NET",
                    "link": "https://redis.io/docs/stack/get-started/tutorials/stack-dotnet/"
                  },
                  {
                    "name": "Caching in ASP.NET using Redis",
                    "link": "https://www.codemag.com/Article/2205091/Distributed-Caching-in-ASP.NET-Core-6-Using-Redis-in-Azure"
                  },
                  {
                    "name": "Getting started in Redis with .NET",
                    "link": "https://docs.redis.com/latest/rs/references/client_references/client_csharp/"
                  }
                ],
                "options": [
                  {
                    "name": "MongoDB",
                    "recommendation-type": "opinion",
                    "description": "MongoDB is a cross-platform, open-source, NoSQL document-oriented database that can be used to store and retrieve large amounts of data. It uses a flexible, JSON-like data structure called BSON (binary JSON) and is designed to handle large amounts of unstructured data. In an ASP.NET application, MongoDB can be used as a data store to persist and retrieve application data.",
                    "resources": [
                      {
                        "name": "Use MongoDB in Your C# ASP.NET Apps",
                        "link": "https://developer.okta.com/blog/2020/01/02/mongodb-csharp-aspnet-datastore"
                      },
                      {
                        "name": "MongoDB With ASP.NET Core Web API",
                        "link": "https://www.c-sharpcorner.com/article/using-mongodb-with-asp-net-core-web-api/"
                      }
                    ]
                  },
                  {
                    "name": "LiteDB",
                    "recommendation-type": "opinion",
                    "description": "LiteDB is a lightweight, open-source, NoSQL embedded document-oriented database engine for .NET and .NET Core. It uses a file-based storage system, meaning that the entire database is stored in a single file on disk. LiteDB supports data types like string, int, decimal, DateTime, and also supports binary data and serialized objects. It is designed to be simple and easy to use, and it does not require a separate server or installation.",
                    "resources": [
                      {
                        "name": "Getting started with LiteDB",
                        "link": "https://www.litedb.org/"
                      },
                      {
                        "name": "Overview of LiteDB in ASP.NET",
                        "link": "https://www.litedb.org/docs/"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "Cassandra",
                "recommendation-type": "opinion",
                "description": "Apache Cassandra is a free and open-source, NoSQL, distributed, wide-column store, and high-performance database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure. It is based on a data model similar to Google’s Bigtable and provides a query language similar to SQL.",
                "resources": [
                  {
                    "name": "Introduction to Cassandra",
                    "link": "https://www.tutorialspoint.com/cassandra/cassandra_introduction.htm"
                  },
                  {
                    "name": "Overview of Cassandra in ASP.NET",
                    "link": "https://www.spiceworks.com/tech/big-data/articles/what-is-cassandra/"
                  },
                  {
                    "name": "Introduction to Apache Cassandra",
                    "link": "https://www.geeksforgeeks.org/introduction-to-apache-cassandra/"
                  }
                ],
                "options": [
                  {
                    "name": "RavenDB",
                    "recommendation-type": "opinion",
                    "description": "RavenDB is an open-source, NoSQL document database designed for the .NET platform. It is a document database that stores data in semi-structured JSON format and is designed to be simple and easy to use. In an ASP.NET application, RavenDB can be used as a data store to persist and retrieve application data.",
                    "resources": [
                      {
                        "name": "Using RavenDB in ASP.NET Applications",
                        "link": "https://www.codeguru.com/dotnet/using-ravendb-in-asp-net-applications/"
                      },
                      {
                        "name": "Getting started with RavenDB",
                        "link": "https://ravendb.net/docs/article-page/5.4/csharp/start/getting-started"
                      },
                      {
                        "name": "Using RavenDB Unit of Work and .NET Core MVC",
                        "link": "https://ayende.com/blog/187906-B/using-ravendb-unit-of-work-and-net-core-mvc"
                      }
                    ]
                  },
                  {
                    "name": "CouchDB",
                    "recommendation-type": "opinion",
                    "description": "CouchDB is an open-source, NoSQL document database designed for the web. It uses a document-oriented data model, stores data in semi-structured JSON format, and provides a built-in web interface called Futon. CouchDB can be used as a data store in an ASP.NET application, and there are libraries available, such as Couchbase, that provide a .NET client for CouchDB.",
                    "resources": [
                      {
                        "name": "CouchDB in ASP.NET Core Application",
                        "link": "https://www.c-sharpcorner.com/article/crud-operation-to-couchdb-via-rest-api-in-asp-net-core-application/"
                      },
                      {
                        "name": "Use CouchDB with .NET",
                        "link": "https://stackoverflow.com/questions/1050152/use-couchdb-with-net"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "Cloud",
                "recommendation-type": "opinion",
                "description": "Cloud in the context of ASP.NET refers to the use of cloud computing services to host and run ASP.NET web applications. Cloud computing is a model of delivering computing resources over the internet on a pay-per-use basis. Cloud providers such as Microsoft Azure, Amazon Web Services (AWS), and Google Cloud Platform (GCP) offer services tailored to host and run ASP.NET web applications, including virtual machines, web roles, and serverless computing.",
                "resources": [
                  {
                    "name": "Building a .NET Cloud Application",
                    "link": "https://www.c-sharpcorner.com/article/building-the-net-cloud-application/"
                  },
                  {
                    "name": "How to make a .NET Cloud Application?",
                    "link": "https://dotnet.microsoft.com/en-us/apps/cloud"
                  },
                  {
                    "name": "Getting started with Cloud",
                    "link": "https://aws.amazon.com/free/"
                  }
                ],
                "options": [
                  {
                    "name": "DynamoDB",
                    "recommendation-type": "opinion",
                    "description": "Amazon DynamoDB is a fully-managed, NoSQL database service provided by Amazon Web Services (AWS). It is highly-scalable, fast, and flexible, supporting both document and key-value data models. DynamoDB is designed to handle extremely high levels of read and write throughput, automatically scaling to accommodate application traffic. It provides built-in support for data replication, spreading data across multiple availability zones for increased durability and availability.",
                    "resources": [
                      {
                        "name": "Getting started with DynamoDB",
                        "link": "https://aws.amazon.com/dynamodb/"
                      },
                      {
                        "name": "Introduction to DynamoDB",
                        "link": "https://cloudacademy.com/lab/introduction-dynamodb/"
                      }
                    ]
                  },
                  {
                    "name": "CosmosDB",
                    "recommendation-type": "opinion",
                    "description": "Azure Cosmos DB is a globally distributed, multi-model database service provided by Microsoft Azure. It supports multiple data models, including document, key-value, graph, and column-family. Cosmos DB offers features like automatic and instant scalability, multiple consistency models, and global distribution. It is suitable for building highly responsive and globally distributed applications.",
                    "resources": [
                      {
                        "name": "What is Azure Cosmos DB?",
                        "link": "https://intellipaat.com/blog/what-is-azure-cosmos-db/"
                      },
                      {
                        "name": "Cosmos DB, Its Features, Benefits, Pricing etc",
                        "link": "https://stackify.com/what-is-azure-cosmos-db/"
                      },
                      {
                        "name": "Getting started with Cosmos DB",
                        "link": "https://acloudguru.com/blog/engineering/azure-cosmos-db-lets-you-focus-on-the-good-stuff"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "Relational",
                "recommendation-type": "opinion",
                "description": "A relational database stores data in a structured format using tables and relationships between them, based on the relational model. It organizes data into tables consisting of rows and columns. The main feature is the ability to establish relationships between tables using foreign keys, allowing data to be connected and easily accessed through these relationships.",
                "resources": [
                  {
                    "name": "Introduction to Working with Database in ASP.NET",
                    "link": "https://learn.microsoft.com/en-us/aspnet/web-pages/overview/data/5-working-with-data"
                  },
                  {
                    "name": "Implement a Relational Database with ASP.NET",
                    "link": "https://openclassrooms.com/en/courses/5671811-implement-a-relational-database-with-asp-net-core"
                  }
                ],
                "options": [
                  {
                    "name": "SQL Server",
                    "recommendation-type": "opinion",
                    "description": "Microsoft SQL Server (MS SQL) is a Microsoft-developed relational database management system (RDBMS) using the T-SQL query language. It offers different versions and editions, providing features for high-performance, high-availability, and scalability. MS SQL is widely used in web and enterprise applications.",
                    "resources": [
                      {
                        "name": "MS SQL website",
                        "link": "https://www.microsoft.com/en-ca/sql-server/"
                      },
                      {
                        "name": "Tutorials for SQL Server",
                        "link": "https://docs.microsoft.com/en-us/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver15"
                      },
                      {
                        "name": "Getting started with SQL",
                        "link": "https://www.w3schools.com/sql/default.asp"
                      }
                    ]
                  },
                  {
                    "name": "PostgreSQL",
                    "recommendation-type": "opinion",
                    "description": "PostgreSQL, or 'Postgres', is an open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance. Developed at the University of California, Berkeley, it is known for robustness, reliability, and support for advanced features such as concurrency control, full-text search, and geospatial data. PostgreSQL is highly extensible, allowing custom functions and operators in various programming languages.",
                    "resources": [
                      {
                        "name": "Postgresql - Open Source Relational Database",
                        "link": "https://www.postgresql.org/"
                      },
                      {
                        "name": "What is Postgresql?",
                        "link": "https://postgresqltutorial.com/postgresql-getting-started/what-is-postgresql/"
                      },
                      {
                        "name": "Introduction, Advantages & Disadvantages of PostgreSQL",
                        "link": "https://guru99.com/introduction-postgresql.htmlPostgresql"
                      }
                    ]
                  },
                  {
                    "name": "MariaDB",
                    "recommendation-type": "opinion",
                    "description": "MariaDB is an open-source relational database management system (RDBMS) and a fork of the MySQL database. It is fully compatible with MySQL but includes additional features and improvements. MariaDB is widely used as a replacement for MySQL in web and enterprise applications. Libraries like MariaDB.Data, MySql.Data, and Dapper provide a .NET client for MariaDB integration in ASP.NET applications.",
                    "resources": [
                      {
                        "name": "How to use MariaDB in ASP.NET?",
                        "link": "https://blog.georgekosmidis.net/using-mariadb-in-an-aspnet-core-api-with-entity-framework-core.html"
                      },
                      {
                        "name": "Working with MariaDB and .Net",
                        "link": "https://mariadb.com/kb/en/mariadb-and-net/"
                      },
                      {
                        "name": "Building an application with ASP.NET & MariaDB",
                        "link": "https://medium.com/@BMatt92656920/building-a-web-application-with-asp-net-core-mvc-entity-framework-core-mariadb-bootstrap-a2bf0927d20e"
                      }
                    ]
                  },
                  {
                    "name": "MySQL",
                    "recommendation-type": "opinion",
                    "description": "MySQL is an open-source relational database management system (RDBMS) widely used in web and enterprise applications. Developed, distributed, and supported by Oracle Corporation, MySQL provides a rich set of features for handling high-performance, high-availability, and high-scalability requirements of modern web applications. Libraries like MySql.Data, Dapper, and EF Core offer a .NET client for MySQL integration in ASP.NET applications.",
                    "resources": [
                      {
                        "name": "Getting started with ASP.NET Core and MySQL",
                        "link": "https://dev.mysql.com/blog-archive/getting-started-with-asp-net-core-and-mysql-connectornet/"
                      },
                      {
                        "name": "MySql database connectivity with ASP.Net",
                        "link": "https://www.c-sharpcorner.com/UploadFile/brij_mcn/mysql-database-connectivity-with-Asp-Net/"
                      },
                      {
                        "name": "How To Connect MySQL With ASP.NET",
                        "link": "https://www.youtube.com/watch?v=g5rVd1JGbIg"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "Log Frameworks": {
        "description": "In ASP.NET, log frameworks are libraries that provide a way to log and analyze data in an application. Some popular log frameworks for ASP.NET include: Serilog, NLog, Log4Net, ELMAH, Microsoft.Extensions.Logging. These are some of the most popular log frameworks in ASP.NET, each with its own set of features and use cases. The choice of which log framework to use will depend on the specific requirements of the application.",
        "resources": [
          {
            "name": "Implement logging in ASP.NET",
            "link": "https://learn.microsoft.com/en-us/training/modules/aspnet-logging/"
          },
          {
            "name": "ASP.NET Core: Logging with log4net",
            "link": "https://www.linkedin.com/learning/asp-dot-net-core-logging-with-log4net"
          }
        ],
        "order": 9,
        "options": [
          {
            "name": "Serilog",
            "recommendation-type": "opinion",
            "description": "Serilog is a third-party logging library for ASP.NET Core that allows developers to easily create structured and searchable log data. Built on top of the Microsoft.Extensions.Logging framework, Serilog provides features such as automatic logging of request and response data, and the ability to write logs to various destinations, including the console, files, and various logging services. It also supports filtering and formatting log messages.",
            "resources": [
              {
                "name": "How to Work with Serilog in ASP.NET?",
                "link": "https://www.codeguru.com/dotnet/serilog-c-sharp/"
              },
              {
                "name": "Complete guide to Serilog in ASP.NET",
                "link": "https://github.com/serilog/serilog-aspnetcore"
              },
              {
                "name": "Advanced Serilog features in ASP.NET",
                "link": "https://www.infoworld.com/article/3624022/how-to-use-advanced-serilog-features-in-aspnet-core-mvc.html"
              },
              {
                "name": "NLog",
                "recommendation-type": "opinion",
                "description": "NLog is an open-source logging library for .NET applications, including ASP.NET. It is designed to be easy to use, highly configurable, and extensible, providing features that help developers log and analyze data in their applications. NLog is a powerful, flexible, and easy-to-use logging library that can be used in ASP.NET applications to provide detailed log data. It allows developers to easily configure their logging pipeline and write log data to various destinations.",
                "resources": [
                  {
                    "name": "Logging with NLog in ASP.NET",
                    "link": "https://codewithmukesh.com/blog/logging-with-nlog-in-aspnet-core/"
                  },
                  {
                    "name": "Introduction To NLog With ASP.NET Core",
                    "link": "https://www.c-sharpcorner.com/article/introduction-to-nlog-with-asp-net-core2/"
                  },
                  {
                    "name": "Tutorial of Nlog with ASP.NET",
                    "link": "https://www.youtube.com/watch?v=PnlxRmHg0lU"
                  }
                ]
              },
              {
                "name": "Log Management System",
                "recommendation-type": "opinion",
                "description": "A log management system is a software or service designed to collect, store, and analyze log data from various sources. It helps gather, store, and analyze logs to provide insight into the performance, stability, and security of a system. A log management system is crucial for identifying and troubleshooting issues, monitoring performance, detecting security threats, meeting regulatory compliance requirements, and measuring the health and security of the system.",
                "resources": [
                  {
                    "name": "Structured Logging and Logs Management in ASP.NET",
                    "link": "https://medium.com/@stavsofer/structured-logging-and-logs-management-asp-net-core-serilog-seq-61109f740696"
                  },
                  {
                    "name": "ASP.NET Logging Basics",
                    "link": "https://www.loggly.com/ultimate-guide/net-logging-basics/"
                  }
                ],
                "options": [
                  {
                    "name": "ELK Stack",
                    "recommendation-type": "opinion",
                    "description": "The ELK Stack is a collection of three open-source products — Elasticsearch, Logstash, and Kibana. It provides centralized logging to identify problems with servers or applications. ELK stack allows searching all logs in a single place and helps find issues in multiple servers. It includes ElasticSearch for storing logs, LogStash for shipping, processing, and storing logs, and Kibana for visualization. ELK Stack is useful for troubleshooting and analyzing logs.",
                    "resources": [
                      {
                        "name": "What Is Elk?",
                        "link": "https://aws.amazon.com/what-is/elk-stack/"
                      },
                      {
                        "name": "Complete Guide to Elk",
                        "link": "https://logz.io/learn/complete-guide-elk-stack/"
                      },
                      {
                        "name": "ELK Stack Tutorial: What is Kibana, Logstash & Elasticsearch?",
                        "link": "https://www.guru99.com/elk-stack-tutorial.html"
                      }
                    ]
                  },
                  {
                    "name": "Sentry",
                    "recommendation-type": "opinion",
                    "description": "Sentry is an open-source error tracking platform that helps developers identify and fix errors in their applications. It provides detailed error reports, including stack traces, context data, and user feedback, making it easy to understand and reproduce errors. Sentry can be integrated with various platforms, including .NET and ASP.NET, to capture and track errors. In an ASP.NET application, Sentry provides an SDK (Sentry.NET) for automatic error capture and tracking.",
                    "resources": [
                      {
                        "name": "Sentry Documentation in .NET",
                        "link": "https://docs.sentry.io/platforms/dotnet/"
                      },
                      {
                        "name": "ASP.NET and Sentry",
                        "link": "https://docs.sentry.io/platforms/dotnet/guides/aspnetcore/"
                      },
                      {
                        "name": "Usage of Sentry in ASP.NET",
                        "link": "https://docs.sentry.io/platforms/dotnet/guides/aspnetcore/usage/"
                      }
                    ]
                  },
                  {
                    "name": "Datadog",
                    "recommendation-type": "opinion",
                    "description": "Datadog is a cloud-based monitoring and analytics platform for monitoring, troubleshooting, and optimizing applications and infrastructure. It provides real-time monitoring, log management, tracing, and alerting features. Datadog can be integrated with various platforms, including .NET and ASP.NET. In an ASP.NET application, Datadog's SDK (Datadog.Trace) can be integrated for automatic collection and reporting of performance data.",
                    "resources": [
                      {
                        "name": "Documentation of Datadog",
                        "link": "https://www.datadoghq.com/"
                      },
                      {
                        "name": "Configuring the .NET Core with Datadog",
                        "link": "https://docs.datadoghq.com/tracing/trace_collection/library_config/dotnet-core/?tab=environmentvariables"
                      }
                    ]
                  },
                  {
                    "name": "Loggly",
                    "recommendation-type": "opinion",
                    "description": "Loggly is a cloud-based log management and analytics platform for collecting, storing, and analyzing log data from various sources, including .NET and ASP.NET applications. It offers real-time log search and analysis, alerting, and reporting features. Loggly provides an SDK (Loggly.Serilog) that can be integrated with an ASP.NET application to automatically collect log data and send it to Loggly.",
                    "resources": [
                      {
                        "name": "Loggly in ASP.NET Core using Serilog",
                        "link": "https://itnext.io/loggly-in-asp-net-core-using-serilog-dc0e2c7d52eb"
                      },
                      {
                        "name": "Using Loggly For Troubleshooting Bugs",
                        "link": "https://www.loggly.com/blog/use-loggly-troubleshooting-bugs-code/"
                      }
                    ]
                  },
                  {
                    "name": "ELMAH",
                    "recommendation-type": "opinion",
                    "description": "ELMAH (Error Logging Modules and Handlers) is an open-source error logging and management library for ASP.NET applications. It is designed to be easy to use and integrate into existing ASP.NET applications. ELMAH is widely used for error logging, management, and tracking in ASP.NET applications. It provides features to identify, diagnose, and fix errors easily.",
                    "resources": [
                      {
                        "name": "Introduction To ELMAH",
                        "link": "https://www.c-sharpcorner.com/article/introduction-to-elmah-in-mvc/"
                      },
                      {
                        "name": "How to Configure Elmah in ASP.net MVC",
                        "link": "https://www.youtube.com/watch?v=oqheVBZR0PM"
                      },
                      {
                        "name": "ELMAH Integration in ASP.NET MVC Application",
                        "link": "https://www.ecanarys.com/Blogs/ArticleID/184/ELMAH-Integration-in-ASP-NET-MVC-Application"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "API Clients and Communication": {
        "description": "API clients in ASP.NET are software libraries that allow applications to interact with external APIs. They provide a set of methods and classes that make it easy to send requests to an API and process the responses. API clients can be used to access a wide variety of services, such as web services, cloud services, and social media platforms. They can be used to perform tasks such as fetching data, posting updates, and deleting resources. API clients in ASP.NET are typically built using the HttpClient class, which is part of the System.Net.Http namespace. This class provides a set of methods for sending HTTP requests and receiving HTTP responses.",
        "resources": [
          {
            "name": "How to Call a Web API From a .NET Client",
            "link": "https://learn.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client"
          },
          {
            "name": "Overview of Web API REST Service in ASP.NET",
            "link": "https://www.c-sharpcorner.com/article/consuming-asp-net-web-api-rest-service-in-asp-net-mvc-using-http-client/"
          },
          {
            "name": "Building an ASP.NET Web API With ASP.NET",
            "link": "https://www.toptal.com/asp-dot-net/asp-net-web-api-tutorial"
          }
        ],
        "order": 10,
        "options": [
          {
            "name": "gRPC",
            "recommendation-type": "opinion",
            "description": "gRPC is a high-performance, open-source framework for building remote procedure call (RPC) APIs. It uses the Protocol Buffers data serialization format and the HTTP/2 protocol to create highly efficient and scalable APIs. gRPC supports a variety of programming languages, including C# and ASP.NET. In ASP.NET, gRPC can be used to create high-performance, low-latency APIs for a variety of use cases. gRPC allows for bi-directional streaming of data, which can be useful for real-time applications such as gaming, financial trading, and more.",
            "resources": [
              {
                "name": "Overview for gRPC on .NET",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/grpc/?view=aspnetcore-7.0"
              },
              {
                "name": "Getting Started with ASP.NET Core and gRPC",
                "link": "https://blog.jetbrains.com/dotnet/2021/07/19/getting-started-with-asp-net-core-and-grpc/"
              },
              {
                "name": "Create a gRPC client & server in ASP.NET",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/tutorials/grpc/grpc-start?view=aspnetcore-7.0&tabs=visual-studio"
              }
            ]
          },
          {
            "name": "GraphQL",
            "recommendation-type": "opinion",
            "description": "GraphQL is a query language for your API that allows clients to define the structure of the data they need, and the server will return only the requested data. It is an alternative to RESTful web services, and it is gaining popularity because of its flexibility and efficiency. In ASP.NET, GraphQL can be used to create web services that expose data in a more flexible and efficient way. There are several libraries available to implement GraphQL in an ASP.NET application, such as GraphQL.NET, Hot Chocolate, and others. These libraries provide a set of classes and methods that make it easy to create a GraphQL schema, handle requests, and generate responses.",
            "resources": [
              {
                "name": "How to implement GraphQL in ASP.Net",
                "link": "https://blog.christian-schou.dk/how-to-implement-graphql-in-asp-net-core/"
              },
              {
                "name": "Intro to GraphQL",
                "link": "https://graphql-dotnet.github.io/docs/getting-started/introduction/"
              },
              {
                "name": "Developing API In .NET Core With GraphQL",
                "link": "https://www.c-sharpcorner.com/article/building-api-in-net-core-with-graphql2/"
              }
            ],
            "options": [
              {
                "name": "GraphQL .NET",
                "recommendation-type": "opinion",
                "description": "GraphQL is a query language for your API that allows clients to define the structure of the data they need, and the server will return only the requested data. It is an alternative to RESTful web services, and it is gaining popularity because of its flexibility and efficiency. In ASP.NET, GraphQL can be used to create web services that expose data in a more flexible and efficient way. GraphQL.NET is a popular open-source library that can be used to create GraphQL services in ASP.NET. This library provides a set of classes and methods that make it easy to create a GraphQL schema, handle requests, and generate responses.",
                "resources": [
                  {
                    "name": "Introduction to GraphQL .NET in ASP.NET",
                    "link": "https://graphql-dotnet.github.io/docs/getting-started/introduction/"
                  },
                  {
                    "name": "How to use GraphQL in .NET?",
                    "link": "https://softchris.github.io/pages/dotnet-graphql.html"
                  },
                  {
                    "name": "Building and consuming GraphQL API in ASP.NET",
                    "link": "https://www.red-gate.com/simple-talk/development/dotnet-development/building-and-consuming-graphql-api-in-asp-net-core-5/"
                  }
                ]
              },
              {
                "name": "Hot Chocolate",
                "recommendation-type": "opinion",
                "description": "Hot Chocolate is a GraphQL server implementation for .NET and .NET Core. It is an open-source library that provides a simple and flexible way to build GraphQL APIs in ASP.NET. Hot Chocolate provides a set of classes and methods that make it easy to create a GraphQL schema, handle requests, and generate responses. It also provides a number of features to help with things such as validation, authorization, caching, and more.",
                "resources": [
                  {
                    "name": "Getting started with HotChocolate",
                    "link": "https://learn.microsoft.com/en-us/shows/on-net/getting-started-with-hotchocolate"
                  },
                  {
                    "name": "ASP.NET Core and HotChocolate",
                    "link": "https://chillicream.com/docs/hotchocolate/v12/api-reference/aspnetcore"
                  },
                  {
                    "name": "Intro to HotChocolate",
                    "link": "https://chillicream.com/docs/hotchocolate"
                  }
                ]
              }
            ]
          },
          {
            "name": "REST",
            "recommendation-type": "opinion",
            "description": "REST (Representational State Transfer) is an architectural style for building web services. It is based on the principles of the HTTP protocol, and it uses the conventions of HTTP to create a standard interface for interacting with web services. In ASP.NET, REST can be used to create web services that expose data in a standardized way. RESTful web services in ASP.NET are typically built using the Web API framework, which provides a set of libraries and tools for building RESTful web services.",
            "resources": [
              {
                "name": "What is REST Services in ASP.NET?",
                "link": "http://www.codedigest.com/quick-start/16/what-is-rest-services-how-to-create-rest-services-in-aspnet"
              },
              {
                "name": "What are RESTful APIs?",
                "link": "https://www.pragimtech.com/blog/blazor/what-are-restful-apis/"
              },
              {
                "name": "Tutorial of Rest and Restful API",
                "link": "https://www.youtube.com/watch?v=4r1CIUs5s2I"
              }
            ],
            "options": [
              {
                "name": "OData",
                "recommendation-type": "opinion",
                "description": "OData (Open Data Protocol) is a web protocol for querying and updating data. It is an open standard for creating and consuming RESTful web services. OData is built on top of the HTTP protocol, and it uses the conventions of REST to expose data through a standard interface. In ASP.NET, OData can be used to create RESTful web services that expose data in a standardized way. OData provides a set of conventions for defining the structure of the data, and it also provides a set of conventions for querying and updating the data.",
                "resources": [
                  {
                    "name": "Create an OData v4 Endpoint Using ASP.NET",
                    "link": "https://learn.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/create-an-odata-v4-endpoint"
                  },
                  {
                    "name": "Example of OData Protocol With ASP.NET Core",
                    "link": "https://www.youtube.com/watch?v=L9HdnNCi0R0"
                  }
                ]
              },
              {
                "name": "Sieve",
                "recommendation-type": "opinion",
                "description": "Sieve is a language for filtering email messages, defined in the Internet standard. It's also called Sieve: An Email Filtering Language. It provides a simple, human-readable syntax for specifying rules that determine what actions to take on incoming email messages. These actions can include filing messages into different folders, forwarding messages to other addresses, discarding messages, and more. Sieve is typically used in email servers and clients, and it can be used to implement server-side and client-side email filtering. It allows users to create their own rules for filtering email, without requiring access to the server’s configuration or the need for complex server-side scripts.",
                "resources": [
                  {
                    "name": "Analysis of Sieve",
                    "link": "https://en.wikipedia.org/wiki/Sieve_analysis"
                  },
                  {
                    "name": "Sorting in a .NET Core API using Sieve",
                    "link": "https://www.youtube.com/watch?v=x0utCah3cFk"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Real Time Communication": {
        "description": "Real-time communication in ASP.NET refers to the ability to send and receive data between a client and a server in real-time, typically with low latency. It allows the server to push updates to the client as they happen, instead of the client having to continuously poll the server for updates. There are several technologies and libraries available for implementing real-time communication in ASP.NET, such as WebSockets, SignalR, gRPC, and more.",
        "resources": [
          {
            "name": "Overview of ASP.NET Core SignalR",
            "link": "https://learn.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-7.0"
          },
          {
            "name": "Real-time ASP.NET with SignalR",
            "link": "https://dotnet.microsoft.com/en-us/apps/aspnet/signalr"
          }
        ],
        "order": 11,
        "options": [
          {
            "name": "Web Sockets",
            "recommendation-type": "opinion",
            "description": "WebSockets is a protocol that allows for real-time, bidirectional communication between a client and a server. It is based on the same principle as HTTP, but it uses a different protocol to establish and maintain a connection between the client and the server. Once a connection is established, WebSockets enables the client and server to send messages to each other in real-time. In ASP.NET, WebSockets can be used to create real-time, highly interactive web applications. The ASP.NET Core framework provides built-in support for WebSockets through the Microsoft.AspNetCore.WebSockets package. This package provides a set of classes and methods that make it easy to create and manage WebSockets connections.",
            "resources": [
              {
                "name": "WebSockets support in ASP.NET",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/fundamentals/websockets?view=aspnetcore-7.0"
              },
              {
                "name": "Understanding WebSockets with ASP.NET",
                "link": "https://sahansera.dev/understanding-websockets-with-aspnetcore-5/"
              },
              {
                "name": "Writing a WebSocket server in ASP.NET",
                "link": "https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_server"
              }
            ]
          },
          {
            "name": "SignalR Core",
            "recommendation-type": "opinion",
            "description": "SignalR is a real-time communication library for .NET that allows for the creation of real-time web applications. SignalR Core is the latest version of SignalR, rebuilt from the ground up to be cross-platform and lightweight. It allows for bidirectional communication between a client (such as a web page) and a server, enabling real-time updates, notifications, and other interactions. SignalR Core can be used in a variety of scenarios such as chat applications, gaming, and real-time dashboards. It supports multiple transports like WebSockets, Server-Sent Events, and Long polling. It also supports for authentication and authorization.",
            "resources": [
              {
                "name": "Overview of ASP.NET Core SignalR",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-7.0"
              }
            ]
          }
        ]
      },
      "Object Mapping": {
        "description": "Object mapping in ASP.NET refers to the process of converting an object of one type to an object of another type. This can be useful in a number of scenarios, such as when working with domain models and data transfer objects (DTOs) in a layered architecture, or when mapping between different versions of an object or different formats such as JSON and XML. There are several libraries available for object mapping in ASP.NET, such as AutoMapper, ExpressMapper, AgileMapper, Agile Mapster, and Mapster. These libraries provide a convenient and flexible way to map between objects, using a convention-based approach or a fluent API to configure more complex mappings. They also support a wide range of mapping scenarios, including nested and circular object graphs, collections, and different types of inheritance.",
        "resources": [
          {
            "name": "Building a Fast Object-to-Object Mapper in .NET",
            "link": "https://www.twilio.com/blog/building-blazing-fast-object-mapper-c-sharp-net-core"
          },
          {
            "name": "Overview of Object Mapping in ASP.NET",
            "link": "https://docs.abp.io/en/abp/latest/Object-To-Object-Mapping"
          },
          {
            "name": "Comparison of Object Mapper Libraries",
            "link": "https://www.simplilearn.com/tutorials/asp-dot-net-tutorial/automapper-in-c-sharp"
          }
        ],
        "order": 12,
        "module bundlers": {
          "options": [
            {
              "name": "AutoMapper",
              "recommendation-type": "opinion",
              "description": "AutoMapper is a library for .NET that allows you to easily map between objects of different types. It is particularly useful when working with domain models and data transfer objects (DTOs) in a layered architecture. It can also be used to map between different versions of an object or between objects in different formats, such as JSON and XML. AutoMapper uses a convention-based approach to mapping, automatically mapping properties with the same name and type from one object to another. It also provides a fluent API for configuring more complex mappings, such as ignoring certain properties, using custom logic to map properties, or mapping properties based on a value in another property.",
              "resources": [
                {
                  "name": "What is Automapper in ASP.NET?",
                  "link": "https://www.simplilearn.com/tutorials/asp-dot-net-tutorial/automapper-in-c-sharp"
                },
                {
                  "name": "Getting Started with AutoMapper in ASP.NET",
                  "link": "https://code-maze.com/automapper-net-core/"
                },
                {
                  "name": "Examples of AutoMapper in ASP.NET",
                  "link": "https://dotnettutorials.net/lesson/automapper-in-c-sharp/"
                }
              ]
            },
            {
              "name": "Express Mapper",
              "recommendation-type": "opinion",
              "description": "ExpressMapper is an open-source object-to-object mapping library for .NET, similar to AutoMapper. It allows you to easily map between objects of different types, and it is particularly useful when working with domain models and data transfer objects (DTOs) in a layered architecture. ExpressMapper uses a convention-based approach to mapping, automatically mapping properties with the same name and type from one object to another. It also provides a fluent API for configuring more complex mappings, such as ignoring certain properties, using custom logic to map properties, or mapping properties based on a value in another property.",
              "resources": [
                {
                  "name": "Intro to Express Mapper",
                  "link": "https://expressmapper.org/"
                },
                {
                  "name": "Express Mapper - The New .NET Mapper",
                  "link": "https://www.codeproject.com/Tips/1009198/Expressmapper-The-New-NET-Mapper"
                }
              ]
            },
            {
              "name": "Agile Mapper",
              "recommendation-type": "opinion",
              "description": "AgileMapper is an open-source, convention-based object-to-object mapping library for .NET, similar to AutoMapper and ExpressMapper. It allows you to easily map between objects of different types, and it is particularly useful when working with domain models and data transfer objects (DTOs) in a layered architecture. AgileMapper uses a convention-based approach to mapping, automatically mapping properties with the same name and type from one object to another. It also provides a fluent API for configuring more complex mappings, such as ignoring certain properties, using custom logic to map properties, or mapping properties based on a value in another property.",
              "resources": [
                {
                  "name": "Comparison of Object Mapper Libraries",
                  "link": "https://www.simplilearn.com/tutorials/asp-dot-net-tutorial/automapper-in-c-sharp"
                },
                {
                  "name": "Overview of Agile Mapper",
                  "link": "https://readthedocs.org/projects/agilemapper/"
                }
              ]
            },
            {
              "name": "Mapster",
              "recommendation-type": "opinion",
              "description": "Mapster is an open-source, high-performance object-to-object mapping library for .NET, similar to AutoMapper, ExpressMapper, AgileMapper, and AgileMapster. It allows you to easily map between objects of different types and is particularly useful when working with domain models and data transfer objects (DTOs) in a layered architecture. Mapster uses a convention-based approach to mapping, automatically mapping properties with the same name and type from one object to another. It also provides a fluent API for configuring more complex mappings, such as ignoring certain properties, using custom logic to map properties, or mapping properties based on a value in another property.",
              "resources": [
                {
                  "name": "Getting Started With Mapster in ASP.NET",
                  "link": "https://code-maze.com/mapster-aspnetcore-introduction/"
                },
                {
                  "name": "Overview of Mapster in .Net",
                  "link": "https://medium.com/@M-S-2/enjoy-using-mapster-in-net-6-2d3f287a0989"
                },
                {
                  "name": "Introduction to Mapster",
                  "link": "https://youtube.com/watch?v=bClE7Uon9e8"
                }
              ]
            }
          ]
        }
      },
      "Task Scheduling": {
        "description": "Task scheduling in ASP.NET refers to the process of scheduling and executing background tasks in an application. This can include tasks such as sending emails, processing data, generating reports, or performing maintenance tasks. In ASP.NET, task scheduling can be implemented using a variety of libraries and frameworks such as Quartz.NET, Hangfire, Coravel, and Microsoft’s built-in IHostedService interface. These libraries and frameworks provide a way to schedule tasks to run at specific times or intervals and also provide APIs for managing and monitoring the progress of scheduled tasks.",
        "resources": [
          {
            "name": "Task Scheduling in ASP.NET",
            "link": "https://www.youtube.com/watch?v=Vg4AOpb7OqA"
          },
          {
            "name": "How to schedule Tasks in ASP.NET?",
            "link": "https://beansoftware.com/ASP.NET-Tutorials/Scheduled-Tasks.aspx"
          }
        ],
        "order": 13,
        "options": [
          {
            "name": "Hangfire",
            "recommendation-type": "opinion",
            "description": "Hangfire is an open-source, lightweight library for .NET that allows you to easily perform background processing in your ASP.NET application. It provides a simple and elegant way to run background jobs, schedule future tasks, and monitor the progress of your background jobs. Hangfire uses a storage backend, such as SQL Server or Redis, to persist the state of your background jobs. This allows you to easily scale your background processing and to monitor and manage your background jobs, even if your application restarts or crashes.",
            "resources": [
              {
                "name": "Hangfire with ASP.NET Core",
                "link": "https://code-maze.com/hangfire-with-asp-net-core/"
              },
              {
                "name": "Intro to Hangfire",
                "link": "https://www.partech.nl/nl/publicaties/2021/05/a-beginners-guide-to-hangfire"
              },
              {
                "name": "How to use Hangfire with ASP.NET",
                "link": "https://blog.christian-schou.dk/how-to-use-hangfire-with-asp-net-core-5-0-api/"
              }
            ]
          },
          {
            "name": "Native Background Service",
            "recommendation-type": "opinion",
            "description": "A Native Background Service in ASP.NET is a type of service that can run in the background on a device, without the need for an active user session. These services are typically used for tasks that need to run continuously, such as sending notifications, polling for updates, or processing data. In ASP.NET, a Native Background Service can be implemented using the IHostedService interface, which is part of the Microsoft.Extensions.Hosting namespace. This interface allows you to create a background service that can run continuously, even when the main application is not running.",
            "resources": [
              {
                "name": "Background tasks with hosted services in ASP.NET",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-7.0&tabs=visual-studio"
              },
              {
                "name": "BackgroundService in ASP.NET Core",
                "link": "https://medium.com/@daniel.sagita/backgroundservice-for-a-long-running-work-3debe8f8d25b"
              },
              {
                "name": "Tutorial on Background Tasks in ASP.NET",
                "link": "https://youtube.com/watch?v=rugxQIH_p3A"
              }
            ]
          },
          {
            "name": "Quartz",
            "recommendation-type": "opinion",
            "description": "Quartz is an open-source, job scheduling library for .NET that can be used in ASP.NET applications. It is based on the popular Quartz scheduler for Java and provides a similar feature set for scheduling and executing background jobs in .NET applications. With Quartz, you can schedule jobs to run at specific times or intervals, and you can also set up triggers to start a job based on certain events. Quartz also provides a rich set of options for configuring and managing your jobs, such as pausing, resuming, and canceling jobs, as well as job chaining and priorities.",
            "resources": [
              {
                "name": "Intro to Quartz in ASP.NET",
                "link": "https://aspnetboilerplate.com/Pages/Documents/Quartz-Integration"
              },
              {
                "name": "How to work with Quartz.Net in ASP.NET",
                "link": "https://www.infoworld.com/article/3078781/how-to-work-with-quartz-net-in-c.html"
              }
            ]
          },
          {
            "name": "Coravel",
            "recommendation-type": "opinion",
            "description": "Coravel is an open-source, lightweight library for .NET that allows you to easily perform background processing and scheduling in your ASP.NET Core application. It provides a simple and elegant way to schedule tasks, run background jobs, and manage queues in your application. Coravel is inspired by Laravel’s task scheduler and it’s built on top of the .NET Core built-in Dependency Injection. It uses a fluent API to schedule tasks, allowing you to easily specify the frequency, start time, and end time of the task. It also provides a simple way to queue and process background jobs, allowing you to easily process large amounts of data or perform long-running tasks.",
            "resources": [
              {
                "name": "Documentation of Coravel",
                "link": "https://docs.coravel.net/"
              },
              {
                "name": "ASP.NET Task Scheduling with Coravel",
                "link": "https://www.youtube.com/watch?v=vu0fxlWl0wo"
              },
              {
                "name": "How to Run a .Net Console App with Coravel",
                "link": "https://www.youtube.com/watch?v=KQpw_OYkKq8"
              }
            ]
          }
        ]
      },
      "Testing": {
        "description": "Testing in ASP.NET is the process of evaluating the performance, functionality, and overall correctness of an application developed using the ASP.NET framework. There are several types of testing that can be performed on an ASP.NET application, including unit testing, integration testing, acceptance testing, and E2E testing. Each type of testing has a different focus and is used at a different stage of the development process. Common testing frameworks for ASP.NET include MSTest, XUnit, NUnit, Selenium, Playwright, Puppeteer, Cypress, Specflow, Cucumber, and LightBDD.",
        "resources": [
          {
            "name": "A Complete Tutorial on ASP.NET Testing",
            "link": "https://www.lambdatest.com/blog/aspnet-testing/"
          },
          {
            "name": "Unit test controller logic in ASP.NET",
            "link": "https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/testing?view=aspnetcore-7.0"
          },
          {
            "name": "Integration tests in ASP.NET Core",
            "link": "https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0"
          }
        ],
        "order": 14,
        "options": [
          {
            "name": "E2E Testing",
            "recommendation-type": "opinion",
            "description": "E2E testing is a method of testing the complete functionality of an application, from start to finish. It’s used to test the entire workflow of an application and ensure that all the different components and features work together seamlessly. In the context of ASP.NET, E2E testing can be used to test web applications built using the ASP.NET framework. E2E testing can be done using frameworks such as Selenium, Playwright, and Cypress, which allow developers to automate browser interactions and simulate user interactions with the application. E2E testing is an important aspect of software development, helping to identify and fix issues early in the development process and ensure that the application behaves as expected when it is released to the users.",
            "resources": [
              {
                "name": "End-to-End Testing ASP.NET Core APIs",
                "link": "https://www.youtube.com/watch?v=WWN-9ahbdIU"
              },
              {
                "name": "ASP.NET Core and its testing",
                "link": "https://blog.devgenius.io/asp-net-core-end-to-end-testing-52325e28e387"
              },
              {
                "name": "Unit Test and E2E Test in ASP.NET",
                "link": "https://learn.microsoft.com/en-us/odata/webapi/unittest-e2etest"
              }
            ],
            "options": [
              {
                "name": "Selenium",
                "recommendation-type": "opinion",
                "description": "Selenium is an open-source library that allows developers to automate web browsers and simulate user interactions. It’s commonly used for testing web applications and can be integrated with .NET, providing a .NET binding for interacting with the Selenium API. The Selenium WebDriver API for .NET allows developers to write tests for web applications in C# or other .NET languages and supports various programming paradigms like Page Object Model.",
                "resources": [
                  {
                    "name": "Automated UI Tests with Selenium and ASP.NET",
                    "link": "https://code-maze.com/selenium-aspnet-core-ui-tests/"
                  },
                  {
                    "name": "Selenium Web Driver in .NET",
                    "link": "https://stephan-bester.medium.com/automated-testing-with-selenium-web-driver-in-net-bde6854d3207"
                  }
                ]
              },
              {
                "name": "Playwright",
                "recommendation-type": "opinion",
                "description": "Playwright is an open-source library for automating web browsers built by Microsoft. Similar to Selenium, it’s commonly used for testing web applications. Built on top of the .NET Core runtime, Playwright provides bindings for C#, allowing developers to write tests for web applications in C# or other .NET languages. Playwright is designed to be fast and reliable, allowing developers to run tests in multiple browsers.",
                "resources": [
                  {
                    "name": "Playwright for .NET",
                    "link": "https://github.com/microsoft/playwright-dotnet"
                  },
                  {
                    "name": "How to test Apps with Playwright and .NETs",
                    "link": "https://www.twilio.com/blog/test-web-apps-with-playwright-and-csharp-dotnet"
                  },
                  {
                    "name": "End-to-End Tests With ASP.NET and Playwright",
                    "link": "https://khalidabuhakmeh.com/end-to-end-test-with-aspnet-core-xunit-and-playwright"
                  }
                ]
              },
              {
                "name": "Puppeteer",
                "recommendation-type": "opinion",
                "description": "Puppeteer is an open-source library for automating web browsers, similar to Selenium and Playwright. Built on top of the Chrome DevTools protocol, it provides a set of APIs that allows developers to interact with web browsers and simulate user interactions. It’s commonly used for testing web applications, web scraping, and generating screenshots and PDFs of web pages. Puppeteer for .NET is built on top of the .NET Core runtime, providing bindings for C# and allowing developers to write tests for web applications in C# or other .NET languages.",
                "resources": [
                  {
                    "name": "Why use Puppeteer?",
                    "link": "https://www.kiltandcode.com/puppeteer-sharp-crawl-the-web-using-csharp-and-headless-chrome/"
                  },
                  {
                    "name": "Documentations of Puppeteer",
                    "link": "https://www.puppeteersharp.com/"
                  }
                ]
              },
              {
                "name": "Cypress",
                "recommendation-type": "opinion",
                "description": "Cypress is an open-source end-to-end testing framework for web applications. Built on top of JavaScript, it provides a set of APIs that allows developers to automate browser interactions. Commonly used for testing web applications, Cypress can be used to automate browser-based tests and assert that the application behaves as expected. Cypress for .NET is not built on top of the .NET Core runtime and does not provide bindings for C# or any other .NET languages. Instead, it’s built on top of JavaScript and can be run in the browser.",
                "resources": [
                  {
                    "name": "Cypress - End To End Testing Tool",
                    "link": "https://www.c-sharpcorner.com/article/getting-started-with-cypress-io/"
                  },
                  {
                    "name": "Overview of Cypress",
                    "link": "https://www.cypress.io/"
                  }
                ]
              }
            ]
          },
          {
            "name": "Unit Testing",
            "recommendation-type": "opinion",
            "description": "Unit testing is a software testing method in which individual units or components of a software application are tested in isolation from the rest of the application. The goal is to validate that each unit of the software application is working as intended and that the interactions between units are also working as intended. In the context of ASP.NET, unit testing can be used to test individual components of a web application. Unit testing is a good practice in software development, helping to catch bugs early, improve code quality, and make it more maintainable. Unit tests provide developers with a suite of automated tests that can be run against the application at any time. There are different Unit Testing frameworks available for .NET and many libraries for Mocking, Assertions, and fake objects.",
            "resources": [
              {
                "name": "Overview of .NET Unit Testing",
                "link": "https://www.toptal.com/dot-net/dotnet-unit-testing-tutorial"
              },
              {
                "name": "Unit Testing in ASP.NET - Complete Tutorial",
                "link": "https://www.guru99.com/asp-net-unit-testing-project.html"
              },
              {
                "name": "How to UnitTest ASP.Net MVC Controllers with XUnit ?",
                "link": "https://www.youtube.com/watch?v=VtPosbYAhD8"
              }
            ],
            "options": [
              {
                "Frameworks": {
                  "options": [
                    {
                      "name": "MSTest",
                      "recommendation-type": "opinion",
                      "description": "MSTest is a unit testing framework for the .NET framework. It’s one of the built-in test frameworks in Visual Studio and is widely used for unit testing in the .NET ecosystem. In the context of ASP.NET, MSTest can be used to write unit tests for web applications built using the ASP.NET framework. MSTest provides features such as data-driven testing, parallel test execution, and test discovery and execution. It also provides the ability to run tests on multiple frameworks.",
                      "resources": [
                        {
                          "name": ".NET Core testing with MSTest",
                          "link": "https://www.oreilly.com/library/view/c-and-net/9781788292481/aa08c601-f374-4e31-be8e-8eb69d63bd19.xhtml"
                        },
                        {
                          "name": "Unit testing with MSTest and .NET",
                          "link": "https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest"
                        },
                        {
                          "name": "Complete Guide of MSTest for Unit Testing in ASP.NET",
                          "link": "https://sweetcode.io/a-complete-guide-of-mstest-for-unit-testing-in-asp-net/"
                        }
                      ]
                    },
                    {
                      "name": "xUnit",
                      "recommendation-type": "opinion",
                      "description": "xUnit is a unit testing framework for the .NET framework. It’s an open-source testing framework that provides a set of attributes and classes for creating unit tests. In the context of ASP.NET, xUnit can be used to write unit tests for web applications built using the ASP.NET framework. xUnit provides features such as support for data-driven tests, parallel test execution, and test discovery and execution. It also provides support for test isolation, allowing developers to run tests independently. xUnit is a popular alternative to other testing frameworks like MSTest and does not rely on a test runner; instead, it relies on a console runner that can be run from the command line.",
                      "resources": [
                        {
                          "name": "Unit Testing with xUnit in ASP.NET Core",
                          "link": "https://code-maze.com/aspnetcore-unit-testing-xunit/"
                        },
                        {
                          "name": "Unit testing in .NET Core using xUnit",
                          "link": "https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test"
                        },
                        {
                          "name": "Getting Started With Unit Testing Using ASP.NET And xUnit",
                          "link": "https://www.c-sharpcorner.com/article/getting-started-with-unit-testing-using-c-sharp-and-xunit/"
                        }
                      ]
                    },
                    {
                      "name": "NUnit",
                      "recommendation-type": "opinion",
                      "description": "NUnit is a unit testing framework for the .NET framework. It’s an open-source testing framework that provides a set of attributes and classes for creating unit tests. In the context of ASP.NET, NUnit can be used to write unit tests for web applications built using the ASP.NET framework. NUnit provides features such as support for data-driven tests, parallel test execution, and test discovery and execution. It also provides support for test isolation, allowing developers to run tests independently. NUnit is a popular alternative to other testing frameworks like MSTest and xUnit. It has a similar syntax to JUnit and is considered one of the oldest testing frameworks for .NET.",
                      "resources": [
                        {
                          "name": "NUnit With C#",
                          "link": "https://www.c-sharpcorner.com/UploadFile/84c85b/nunit-with-C-Sharp/"
                        },
                        {
                          "name": "Unit testing C# with NUnit and .NET Core",
                          "link": "https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "Assertion": {
                  "options": [
                    {
                      "name": "Fluent Assertions",
                      "recommendation-type": "opinion",
                      "description": "Fluent Assertions is a fluent, readable, and extensible set of .NET extension methods that allow developers to write more natural and expressive assertions in their unit tests. It provides a fluent-like API that makes it easy to write assertions in a natural language-like syntax. In the context of ASP.NET, Fluent Assertions can be used with test frameworks such as MSTest, xUnit, and NUnit to write more expressive and readable unit tests. It provides advanced features such as support for collection-specific assertions, support for asynchronous code, and support for custom types. It’s a widely used and open-source library, useful for improving code readability and making test code more expressive.",
                      "resources": [
                        {
                          "name": "Introduction of Fluent Assertions",
                          "link": "https://fluentassertions.com/introduction"
                        },
                        {
                          "name": "Improving Unit Tests with Fluent Assertions",
                          "link": "https://code-maze.com/unit-tests-with-fluent-assertions/"
                        },
                        {
                          "name": "Exploring Fluent Assertions in Unit Testing",
                          "link": "https://www.meziantou.net/exploring-fluent-assertions.htm"
                        }
                      ]
                    },
                    {
                      "name": "Shouldly",
                      "recommendation-type": "opinion",
                      "description": "Shouldly is a .NET library that provides a set of extension methods for writing expressive and readable assertions in unit tests. It’s designed as an alternative to traditional assertion libraries. In the context of ASP.NET, Shouldly can be used with test frameworks such as MSTest, xUnit, and NUnit to write expressive and readable unit tests. It provides advanced features such as support for collection-specific assertions, support for asynchronous code, and support for custom types. Shouldly also includes options to customize error messages.",
                      "resources": [
                        {
                          "name": "How to Use Shouldly to Improve Unit Tests in .NET?",
                          "link": "https://code-maze.com/improve-unit-tests-shouldly-dotnet/"
                        },
                        {
                          "name": "Improve Test Asserts with Shouldly",
                          "link": "https://visualstudiomagazine.com/articles/2015/08/01/improve-test-asserts-with-shouldly.aspx?admgarea=ALM"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "mocking": {
                  "options": [
                    {
                      "name": "NSubstitute",
                      "recommendation-type": "opinion",
                      "description": "NSubstitute is a popular open-source .NET library that allows developers to create mock objects for use in unit testing. It is a powerful and flexible substitute for traditional mocking frameworks such as Moq and Rhino Mocks. In the context of ASP.NET, NSubstitute can be used to create mock objects for testing web applications built using the ASP.NET framework. It provides a simple and intuitive syntax for creating mock objects, setting up mock behavior, and making assertions on calls made to the mock objects. NSubstitute supports a wide range of testing frameworks and test runners, including MSTest, NUnit, and xUnit. It also supports various platforms, including .NET Framework, .NET Core, Xamarin, and Unity.",
                      "resources": [
                        {
                          "name": "Overview of NSubstitute",
                          "link": "https://github.com/nsubstitute/NSubstitute"
                        },
                        {
                          "name": "Getting started NSubstitute",
                          "link": "https://nsubstitute.github.io/help/getting-started/"
                        }
                      ]
                    },
                    {
                      "name": "Moq",
                      "recommendation-type": "opinion",
                      "description": "Moq is an open-source library for .NET that allows developers to create mock objects for use in unit testing. It is a popular mocking framework that provides a simple and intuitive syntax for creating mock objects and setting up mock behavior. In the context of ASP.NET, Moq can be used to create mock objects for testing web applications built using the ASP.NET framework. It provides a simple and expressive syntax for creating mock objects and setting up mock behavior. Moq supports a wide range of testing frameworks, including MSTest, NUnit, and xUnit. It also supports various platforms, including .NET Framework, .NET Core, and Xamarin. Moq is lightweight and easy to use, making it a good choice for developers who are new to mocking and unit testing. It also provides a rich set of features, such as support for setting up mock behavior, making assertions on calls made to the mock objects, and more.",
                      "resources": [
                        {
                          "name": "What is use of Moq?",
                          "link": "https://stackoverflow.com/questions/678878/what-is-use-of-moq"
                        },
                        {
                          "name": "Moq - Unit Test In .NET Core App",
                          "link": "https://www.c-sharpcorner.com/article/moq-unit-test-net-core-app-using-mock-object/"
                        },
                        {
                          "name": "Getting started with Mocking using Moq in .NET",
                          "link": "https://www.youtube.com/watch?v=9ZvDBSQa_so"
                        }
                      ]
                    },
                    {
                      "name": "FakeItEasy",
                      "recommendation-type": "opinion",
                      "description": "FakeItEasy is an open-source library for .NET that allows developers to create fake objects for use in unit testing. It is a powerful and easy-to-use mocking framework that provides a simple and intuitive syntax for creating fake objects and setting up fake behavior. In the context of ASP.NET, FakeItEasy can be used to create fake objects for testing web applications built using the ASP.NET framework. It provides a simple and expressive syntax for creating fake objects and setting up fake behavior. FakeItEasy supports a wide range of testing frameworks, including MSTest, NUnit, and xUnit. FakeItEasy is lightweight and easy to use, making it a good choice for developers who are new to mocking and unit testing. It also provides a rich set of features, such as support for setting up fake behavior, making assertions on calls made to the fake objects, and more. It also has a wide range of extension points for customizing the fakes to suit different needs.",
                      "resources": [
                        {
                          "name": "Easy mocking in C# code with FakeItEasy library",
                          "link": "https://devislandblog.wordpress.com/2018/05/09/easy-mocking-in-c-code-with-fakeiteasy-library/"
                        },
                        {
                          "name": "FakeItEasy when testing ASP.NET Core controllers",
                          "link": "https://stackoverflow.com/questions/56170818/how-to-fake-an-interface-method-dynamically-with-fakeiteasy-when-testing-asp-net"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          {
            "name": "Integration Testing",
            "recommendation-type": "opinion",
            "description": "Integration testing in ASP.NET refers to the process of testing how different components or modules of a web application interact with each other. This type of testing is done to ensure that the different parts of the application are working together correctly and that the application as a whole is functioning properly. Integration testing typically involves testing the interactions between different layers of the application, such as the data access layer, the business logic layer, and the presentation layer. It can also involve testing the interactions between the web application and external systems, such as databases, web services, and other external APIs. Integration testing can be done using a variety of testing frameworks and tools, such as xUnit, NUnit, MSTest, and others. These frameworks provide the ability to create test cases that simulate different scenarios and test the application’s behavior under different conditions.",
            "resources": [
              {
                "name": "Integration tests in ASP.NET Core",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0"
              },
              {
                "name": "Integration Testing ASP.NET Core WebAPI Applications",
                "link": "https://www.youtube.com/watch?v=xs8gNQjCXw0"
              },
              {
                "name": "A Sample Project Integration Test In ASP.NET",
                "link": "https://www.youtube.com/watch?v=ziSKkR2nvis"
              }
            ],
            "options": [
              {
                "name": "WebApplicationFactory",
                "recommendation-type": "opinion",
                "description": "Web Application Factory (WAF) is a built-in feature of the ASP.NET Core framework that allows developers to create and configure a web application in a programmatic way. It provides a simple and flexible way to set up a web application for testing, without the need for a web server or a browser. The WAF can be used to create a test server that can be used to run integration tests or end-to-end tests for an ASP.NET Core web application, allowing developers to test the web application in a realistic environment without the need for a physical web server or a browser. The WAF can be configured to use different services, middleware, and settings, depending on the needs of the application, enabling developers to easily set up a web application that is configured specifically for testing. The WAF also allows developers to test the web application against different configurations, such as different databases, authentication providers, and hosting environments.",
                "resources": [
                  {
                    "name": "Integration tests in ASP.NET Core",
                    "link": "https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0"
                  },
                  {
                    "name": "Integration Testing ASP.NET Core WebAPI Applications",
                    "link": "https://www.youtube.com/watch?v=xs8gNQjCXw0"
                  },
                  {
                    "name": "How to use WebApplicationFactory in .NET",
                    "link": "https://stackoverflow.com/questions/69058176/how-to-use-webapplicationfactory-in-net6-without-speakable-entry-point"
                  }
                ]
              },
              {
                "name": "TestServer",
                "recommendation-type": "opinion",
                "description": "TestServer in ASP.NET is a programmatic way to create a web server that can be used to run integration or end-to-end tests for a web application. The TestServer simulates the behavior of a real web server, allowing developers to test the web application in a realistic environment without the need for a physical web server or a browser. The TestServer can be created and configured using the built-in Web Application Factory (WAF) feature in ASP.NET Core. The WAF enables developers to configure the TestServer to use different services, middleware, and settings, depending on the needs of the application. The TestServer can also be used to test the web application against different configurations, such as different databases, authentication providers, and hosting environments.",
                "resources": [
                  {
                    "name": "Integration Tests with TestServer",
                    "link": "https://visualstudiomagazine.com/articles/2017/07/01/testserver.aspx"
                  },
                  {
                    "name": "ASP.NET Core Integration Tests With TestServer",
                    "link": "https://scotthannen.org/blog/2021/11/18/testserver-how-did-i-not-know.html"
                  },
                  {
                    "name": "How do you create a TestServer in .NET",
                    "link": "https://stackoverflow.com/questions/69897652/how-do-you-create-a-test-server-in-net-6"
                  }
                ]
              }
            ]
          },
          {
            "name": "Behavior Testing",
            "recommendation-type": "opinion",
            "description": "Behavior testing, also known as Behavioral-Driven Development (BDD), is a software development methodology that focuses on the behavior of the system being developed, rather than its implementation. BDD is a variation of Test-Driven Development (TDD), emphasizing the use of automated tests to drive the development of software. BDD frameworks such as SpecFlow, Cucumber, and LightBDD provide a set of tools for writing and executing BDD tests in the context of ASP.NET. These frameworks allow developers to write tests using a fluent API, describing the behavior of their application in a natural language format. They also provide extension methods for additional functionality, such as validating the output of a test, logging test results, or integrating with other testing tools.",
            "resources": [
              {
                "name": "A Complete Tutorial on ASP.NET Testing",
                "link": "https://www.lambdatest.com/blog/aspnet-testing/"
              },
              {
                "name": "Learn Behavior Testing in ASP.NET",
                "link": "https://public.vectorly.team/articles/learn_Behavior_Testing_for_Tech_Lead_role_ASP.NET_Developer"
              }
            ],
            "options": [
              {
                "name": "SpecFlow",
                "recommendation-type": "opinion",
                "description": "SpecFlow is an open-source tool that allows developers to create automated acceptance tests in a natural language format, such as Gherkin. SpecFlow is commonly used in the context of ASP.NET and other .NET technologies to write acceptance tests for web applications. With SpecFlow, developers can write test scenarios using plain text in the Gherkin syntax, which uses a Given-When-Then format to describe the steps of a test. These scenarios can be written by non-technical stakeholders, such as business analysts or product owners, and can be easily understood by anyone who reads them. SpecFlow then converts these Gherkin scenarios into executable tests, which can be run using a variety of test runners, such as NUnit, xUnit, or MSTest. The tool also provides a set of bindings that allow developers to map the steps in the Gherkin scenarios to code in their application, making it easy to test specific functionality. Additionally, SpecFlow provides a set of advanced features, such as support for parameterized tests, background steps, and hooks, which allows developers to create more complex and powerful tests.",
                "resources": [
                  {
                    "name": "SpecFlow’s documentation",
                    "link": "https://docs.specflow.org/_/downloads/specflow/en/latest/pdf/"
                  },
                  {
                    "name": "Getting Started with SpecFlow",
                    "link": "https://docs.specflow.org/projects/getting-started/en/latest/index.html"
                  },
                  {
                    "name": "What is SpecFlow?",
                    "link": "https://specflow.org/tools/specflow/"
                  }
                ]
              },
              {
                "name": "BDDfy",
                "recommendation-type": "opinion",
                "description": "BDDfy is an open-source, fluent, and extensible BDD (Behavior-Driven Development) framework for .NET, allowing developers to create automated acceptance tests in a readable and expressive format. BDDfy is commonly used in the context of ASP.NET and other .NET technologies to write acceptance tests for web applications. With BDDfy, developers can write test scenarios using a fluent API, describing the behavior of their application in a natural language format. The framework also provides a set of extension methods for additional functionality, such as validating test output, logging test results, or integrating with other testing tools. BDDfy comes with a built-in test runner for easy test execution and result viewing. The framework supports various test runners, such as NUnit, xUnit, and MSTest, and can be integrated with other BDD frameworks like SpecFlow and Cucumber.",
                "resources": [
                  {
                    "name": "Using BDDfy for Unit Tests",
                    "link": "https://www.michael-whelan.net/using-bddfy-for-unit-tests/"
                  },
                  {
                    "name": "Introducing BDDfy in ASP.NET",
                    "link": "https://codeproject.com/Articles/205381/Introducing-BDDfy-the-simplest-BDD-framework-for-N"
                  },
                  {
                    "name": "Implement BDD with .NET",
                    "link": "https://www.youtube.com/watch?v=GYN_srjAvyk"
                  }
                ]
              },
              {
                "name": "LightBDD",
                "recommendation-type": "opinion",
                "description": "LightBDD is an open-source, lightweight, and easy-to-use BDD (Behavior-Driven Development) framework for .NET, allowing developers to write automated acceptance tests in a simple and readable format. LightBDD is commonly used in the context of ASP.NET and other .NET technologies to write acceptance tests for web applications. LightBDD is designed to provide a simple, yet powerful, way to write BDD tests. It allows developers to write tests using a fluent API to describe the behavior of their application in a natural language format. The framework also provides a set of extension methods for additional functionality, such as validating test output, logging test results, or integrating with other testing tools. LightBDD comes with a built-in test runner for easy test execution and result viewing. The framework supports various test runners, such as NUnit, xUnit, and MSTest, and can be integrated with other BDD frameworks like SpecFlow and Cucumber.",
                "resources": [
                  {
                    "name": "Getting started with Behavior Driven Development (BDD) in .NET",
                    "link": "https://www.youtube.com/watch?v=EEeVU0z26u0"
                  },
                  {
                    "name": "Introduction To BDD using SpecFlow in ASP.NET",
                    "link": "https://www.youtube.com/watch?v=8KPrhBqZ-kk"
                  },
                  {
                    "name": "The Lightweight Behavior Driven Development test framework",
                    "link": "https://github.com/LightBDD/LightBDD"
                  }
                ]
              }
            ]
          }
        ]
      },
      "Microservices": {
        "description": "Microservices are a software architectural style in which a large application is built as a set of small, independent services that communicate with each other through APIs. These services are typically built using different technologies and run in their own processes, and can be deployed, scaled, and updated independently. In ASP.NET, microservices can be built using the .NET Core framework, which is a cross-platform, open-source version of the .NET framework that can run on Windows, Linux, and macOS. Each microservice can be built as a self-contained, small web application that handles a specific set of functionality, such as user management, product catalog, or order processing.",
        "resources": [
          {
            "name": "Intro to Microservices Using ASP.NET Core",
            "link": "https://www.c-sharpcorner.com/article/microservice-using-asp-net-core/"
          },
          {
            "name": "Advantages and Disadvantages of Microservices Architecture",
            "link": "https://www.dotnettricks.com/learn/microservices/architecture-example-advantages"
          }
        ],
        "order": 15,
        "options": [
          {
            "name": "Message Brokers",
            "recommendation-type": "opinion",
            "description": "Message Brokers are systems that provide a messaging infrastructure for applications and services to communicate with each other in a reliable, secure and scalable way. They act as a central hub for sending and receiving messages between different applications, services and devices. In the context of ASP.NET, message brokers can be used to send and receive messages between different parts of an application or between different applications or services, enabling them to communicate with each other in a decoupled and asynchronous manner.",
            "resources": [
              {
                "name": "What are message brokers?",
                "link": "https://www.ibm.com/topics/message-brokers"
              },
              {
                "name": "Building a messaging solution with .Net Core?",
                "link": "https://medium.com/c-sharp-progarmming/quick-start-how-could-you-build-a-messaging-solution-with-net-core-b5f8253f31ea"
              }
            ],
            "options": [
              {
                "name": "RabbitMQ",
                "recommendation-type": "opinion",
                "description": "RabbitMQ is an open-source message broker software that implements the Advanced Message Queuing Protocol (AMQP). It is written in Erlang and can be used to send and receive messages between different applications in a loosely coupled, asynchronous manner. RabbitMQ supports a variety of messaging patterns, including point-to-point, publish-subscribe, and request-response. In the context of an ASP.NET application, RabbitMQ can be used to send and receive messages to and from other systems. For example, it can be used to send messages from a web application to a background service or to send messages between different microservices.",
                "resources": [
                  {
                    "name": "How to Use RabbitMQ in ASP NET?",
                    "link": "https://www.freecodespot.com/blog/use-rabbitmq-in-asp-net-core/"
                  },
                  {
                    "name": "Introduction of RabbitMQ",
                    "link": "https://www.rabbitmq.com/tutorials/tutorial-one-dotnet.html"
                  },
                  {
                    "name": "ASP.NET and RabbitMQ",
                    "link": "https://referbruv.com/blog/integrating-rabbitmq-with-aspnet-core-quickstart-with-an-example/"
                  }
                ],
                "options": [
                  {
                    "name": "Apache Kafka",
                    "recommendation-type": "opinion",
                    "description": "Apache Kafka is an open-source, distributed event streaming platform that is used for building real-time data pipelines and streaming applications. It is designed to handle high volumes of data and to support real-time data processing. Kafka is based on a publish-subscribe model, where producers write data to topics, and consumers read data from those topics. Data is stored in topics in a log-based format, which allows for efficient storage and retrieval of data.",
                    "resources": [
                      {
                        "name": "Working with Apache Kafka in ASP.NET",
                        "link": "https://www.codemag.com/Article/2201061/Working-with-Apache-Kafka-in-ASP.NET-6-Core"
                      },
                      {
                        "name": "Kafka and .NET",
                        "link": "https://docs.confluent.io/kafka-clients/dotnet/current/overview.html"
                      }
                    ]
                  },
                  {
                    "name": "ActiveMQ",
                    "recommendation-type": "opinion",
                    "description": "ActiveMQ is an open-source message broker written in Java that implements the Java Message Service (JMS) API. It can be used to send and receive messages between different applications in a loosely coupled, asynchronous manner. ActiveMQ supports a variety of messaging protocols, including JMS, AMQP, STOMP, MQTT, and OpenWire. In the context of an ASP.NET application, ActiveMQ can be used to send and receive messages to and from other systems. For example, it can be used to send messages from a web application to a background service or to send messages between different microservices.",
                    "resources": [
                      {
                        "name": "What Is ActiveMQ And How Can You Use It?",
                        "link": "https://www.c-sharpcorner.com/article/what-is-activemq-and-how-can-you-use-it/"
                      },
                      {
                        "name": "Messaging with .NET and ActiveMQ",
                        "link": "https://remark.wordpress.com/articles/messaging-with-net-and-activemq/"
                      },
                      {
                        "name": "Messaging with ActiveMQ and ASP.NET",
                        "link": "https://roadmap.sh/aspnet-core#:~:text=Messaging%20with%20ActiveMQ,Cypress"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "NetMQ",
                "recommendation-type": "opinion",
                "description": "NetMQ is a lightweight, open-source messaging library for building distributed systems and real-time applications in .NET. It provides an API for sending and receiving messages using a variety of messaging patterns and protocols, including request-response, publish-subscribe, and push-pull. NetMQ is built on top of ZeroMQ, a high-performance, asynchronous messaging library that provides a minimalistic socket-based API for building distributed systems. NetMQ is designed to be easy to use and to abstract away the complexities of ZeroMQ, making it a good choice for developers who want to add messaging capabilities to their ASP.NET applications without having to learn a complex API.",
                "resources": [
                  {
                    "name": "Documentation of NetMQ",
                    "link": "https://netmq.readthedocs.io/en/latest/introduction/"
                  },
                  {
                    "name": "NetMQ and creating a Dynamic Worker in .NET",
                    "link": "https://mikaelkoskinen.net/post/netmq-and-creating-a-dynamic-worker-per-task"
                  }
                ],
                "options": [
                  {
                    "name": "Azure Service Bus",
                    "recommendation-type": "opinion",
                    "description": "Azure Service Bus is a scalable and reliable messaging platform that can handle a high volume of messages. It’s also easy to use, has features like subscription, Topics, Dead Letter, and is easy to integrate with other Azure services. It’s a managed service, which means Microsoft takes care of the infrastructure and scaling. However, it’s worth noting that Azure Service Bus is a paid service, and the cost will depend on the number of messages and the size of the data that you are sending and receiving.",
                    "resources": [
                      {
                        "name": "Getting Started With Azure Service Bus and ASP.NET Core",
                        "link": "https://www.c-sharpcorner.com/article/get-started-with-azure-service-bus-queues-asp-net-core-part-1/"
                      },
                      {
                        "name": "How to Send & receive messages from Azure Service Bus queue (.NET)?",
                        "link": "https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dotnet-get-started-with-queues?tabs=passwordless"
                      },
                      {
                        "name": "What is Azure Service Bus?",
                        "link": "https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "name": "Message Bus",
            "recommendation-type": "opinion",
            "description": "A message bus is a software architecture pattern that enables different parts of an application, or different systems, to communicate with each other asynchronously using a message-based protocol. The message bus acts as a central intermediary, routing messages from senders to receivers and providing features such as message persistence, message routing, and message acknowledgements. There are different types of message buses, such as event-driven message buses, command-driven message buses, and publish-subscribe message buses. Each type of message bus is designed to handle specific messaging patterns and use cases.",
            "resources": [
              {
                "name": "Implementation of Message Bus C# microservices",
                "link": "https://stackoverflow.com/questions/51330229/implementation-of-message-bus-c-sharp-microservices"
              },
              {
                "name": "Building a Message Bus with .NET Core",
                "link": "https://fatihdumanli.medium.com/build-a-message-bus-implementation-with-net-core-and-rabbitmq-9ba350b777f4"
              }
            ],
            "options": [
              {
                "name": "MassTransit",
                "recommendation-type": "opinion",
                "description": "MassTransit is an open-source, highly configurable service bus framework for building distributed systems using the .NET framework. It allows developers to easily create message-based, loosely-coupled applications by providing a simple and fluent API for defining message contracts, handling messages, and managing message routing. It supports multiple messaging transports such as RabbitMQ, Azure Service Bus, Amazon SQS, and others, automatic serialization and deserialization of messages, automatic retries and exception handling for failed message deliveries, and support for advanced messaging patterns like publish-subscribe, request-response, and event-driven architectures.",
                "resources": [
                  {
                    "name": "Using MassTransit with RabbitMQ in ASP.NET Core",
                    "link": "https://code-maze.com/masstransit-rabbitmq-aspnetcore/"
                  },
                  {
                    "name": "Complete guide to MassTransit",
                    "link": "https://github.com/MassTransit/MassTransit"
                  }
                ]
              },
              {
                "name": "NServiceBus",
                "recommendation-type": "opinion",
                "description": "NServiceBus (NSB) is a service bus framework for building distributed systems using the .NET framework. It provides a set of features for building message-based, loosely-coupled applications, including support for message routing, message handling, and message persistence. NSB supports multiple messaging transports, including MSMQ, RabbitMQ, and Azure Service Bus, and provides support for advanced messaging patterns such as publish-subscribe, request-response, and message-based sagas.",
                "resources": [
                  {
                    "name": "Using NServiceBus in an ASP.NET",
                    "link": "https://docs.particular.net/samples/web/send-from-aspnetcore-webapi/"
                  },
                  {
                    "name": "Learn NServiceBus from .NET Core",
                    "link": "https://www.codeproject.com/Articles/1224839/Learn-NServiceBus-from-NET-Core-WebAPI"
                  }
                ]
              },
              {
                "name": "EasyNetQ",
                "recommendation-type": "opinion",
                "description": "EasyNetQ is a simple and easy-to-use .NET client for RabbitMQ, a popular open-source message broker. It provides a simple and fluent API for connecting to RabbitMQ, publishing and consuming messages, and managing message queues. EasyNetQ supports a wide range of messaging patterns, such as publish-subscribe, request-response, and message-based sagas, and makes it easy to work with RabbitMQ’s advanced features, such as message routing, message persistence, and message acknowledgements.",
                "resources": [
                  {
                    "name": "Overview of EasyNetQ",
                    "link": "https://easynetq.com/"
                  },
                  {
                    "name": "RabbitMQ with EasyNetQ Tutorials",
                    "link": "https://www.youtube.com/watch?v=CqxV_Xn4PlI"
                  }
                ]
              },
              {
                "Api gateway": {
                  "options": [
                    {
                      "name": "Ocelot",
                      "recommendation-type": "opinion",
                      "description": "Ocelot is an open-source API gateway for ASP.NET Core. It is designed to work as a reverse proxy, routing incoming requests to the appropriate service and aggregating the responses to return to the client. Ocelot allows you to define routing rules, handle requests and responses, and perform other common API gateway tasks such as rate limiting, caching, and authentication. One of the key features of Ocelot is its flexibility, allowing routing to multiple services, aggregating responses, defining dynamic routes, and handling errors.",
                      "resources": [
                        {
                          "name": "Implement API Gateways with Ocelot",
                          "link": "https://learn.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/implement-api-gateways-with-ocelot"
                        },
                        {
                          "name": "Getting Started with Ocelot",
                          "link": "https://ocelot.readthedocs.io/en/latest/introduction/gettingstarted.html"
                        },
                        {
                          "name": "Building an API Gateway in ASP.NET using Ocelot",
                          "link": "https://www.youtube.com/watch?v=hlUGZ6Hmv6s"
                        }
                      ]
                    },
                    {
                      "other": {
                        "options": [
                          {
                            "name": "Orleans",
                            "recommendation-type": "opinion",
                            "description": "Orleans is an open-source virtual actor model framework for building distributed, high-scale, and low-latency applications in .NET. It is designed to make it easy to build and operate large-scale, distributed systems, such as cloud services, IoT applications, and gaming servers. One of the key features of Orleans is its use of the virtual actor model, allowing developers to write concurrent and parallel code in a way that is similar to writing single-threaded code.",
                            "resources": [
                              {
                                "name": "Microsoft Orleans",
                                "link": "https://learn.microsoft.com/en-us/dotnet/orleans/overview"
                              },
                              {
                                "name": "Building real applications with Orleans",
                                "link": "https://www.youtube.com/watch?v=8duFuggnj8o"
                              },
                              {
                                "name": "Introduction to Orleans",
                                "link": "https://dev.to/willvelida/introduction-to-microsoft-orleans-796"
                              }
                            ]
                          },
                          {
                            "name": "Steeltoe",
                            "recommendation-type": "opinion",
                            "description": "Steeltoe is an open-source project that provides a set of libraries for building cloud-native applications on the .NET platform. The libraries are designed to work with the .NET Core runtime and provide abstractions for common cloud-native patterns, such as service discovery, configuration management, and circuit breaking. Steeltoe aims to make it easy for developers to leverage the cloud-native capabilities of the .NET platform and build resilient and scalable applications.",
                            "resources": [
                              {
                                "name": ".NET Microservices with Steeltoe",
                                "link": "https://learn.microsoft.com/en-us/shows/on-net/net-microservices-with-steeltoe"
                              },
                              {
                                "name": "Steeltoe Documentation",
                                "link": "https://docs.steeltoe.io/api/v3/welcome/index.html"
                              },
                              {
                                "name": ".NET Microservices with Steeltoe",
                                "link": "https://www.youtube.com/watch?v=QLRi6iPapVg"
                              }
                            ]
                          },
                          {
                            "name": "Dapr",
                            "recommendation-type": "opinion",
                            "description": "Dapr (Distributed Application Runtime) is an open-source, portable runtime that makes it easy to build microservices-based applications running on the cloud and edge. It provides building blocks for microservices, including service discovery, state management, pub-sub messaging, and more. Dapr is designed to be language-agnostic, making it usable with any programming language, including .NET.",
                            "resources": [
                              {
                                "name": "Get started with Dapr",
                                "link": "https://learn.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/getting-started"
                              },
                              {
                                "name": "Building an event-driven .NET Core app with Dapr",
                                "link": "https://medium.com/polarsquad/building-an-event-driven-net-core-app-with-dapr-58cc83ab120b"
                              }
                            ]
                          },
                          {
                            "name": "Tye",
                            "recommendation-type": "opinion",
                            "description": "Tye (short for 'Try Everything') is a developer tool for .NET that makes it easy to develop, test, and deploy microservices and distributed applications. Built on top of the .NET Core CLI and Docker, Tye provides a simple and consistent way to run multiple services and components locally, facilitating testing and debugging of distributed applications. Tye allows defining application components in a single YAML file and automatically manages the required services and dependencies.",
                            "resources": [
                              {
                                "name": "Getting Started with Tye",
                                "link": "https://github.com/dotnet/tye"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Orchestration": {
                  "options": [
                    {
                      "name": "Kubernetes",
                      "recommendation-type": "opinion",
                      "description": "Kubernetes is an open-source container management platform, widely used for deploying images across multiple hosts. It allows teams to define availability, deployment logic, and scaling logic using YAML. Kubernetes is crucial for DevOps Engineers and has led to the creation of Platform teams focused on making Kubernetes usable. It's essential for managing containers in diverse environments.",
                      "resources": [
                        {
                          "name": "Kubernetes Website",
                          "link": "https://kubernetes.io/"
                        },
                        {
                          "name": "Kubernetes Documentation",
                          "link": "https://kubernetes.io/docs/home/"
                        },
                        {
                          "name": "Kubernetes Crash Course for Absolute Beginners",
                          "link": "https://www.youtube.com/watch?v=s_o8dwzRlu4"
                        },
                        {
                          "name": "Primer: How Kubernetes Came to Be, What It Is, and Why You Should Care",
                          "link": "https://thenewstack.io/primer-how-kubernetes-came-to-be-what-it-is-and-why-you-should-care/"
                        },
                        {
                          "name": "Kubernetes: An Overview",
                          "link": "https://thenewstack.io/kubernetes-an-overview/"
                        }
                      ]
                    },
                    {
                      "name": "Docker Swarm",
                      "recommendation-type": "opinion",
                      "description": "Docker Swarm is a container orchestration platform for managing and scheduling Docker containers across a server cluster. As a native clustering solution for Docker, Docker Swarm creates and manages a swarm of Docker nodes as a single virtual host. It enables easy deployment, scaling, and management of applications across multiple servers, ensuring high availability and fault tolerance.",
                      "resources": [
                        {
                          "name": "Introduction to Docker Swarm",
                          "link": "https://www.section.io/engineering-education/introduction-to-docker-swarm-in-container-orchestration/"
                        },
                        {
                          "name": "How - Deploy to Swarm?",
                          "link": "https://docs.docker.com/get-started/swarm-deploy/"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "containerization": {
                  "options": [
                    {
                      "name": "Docker",
                      "recommendation-type": "opinion",
                      "description": "Docker is a platform for developing, shipping, and running applications in containers. Containers are lightweight, standalone, and executable packages containing everything needed to run software, making them easily deployable across different environments. Docker allows developers to package applications and dependencies into containers, ensuring consistent deployment across various environments.",
                      "resources": [
                        {
                          "name": "ASP.NET and Docker",
                          "link": "https://www.tatvasoft.com/blog/asp-net-core-and-docker/"
                        },
                        {
                          "name": "Introduction to .NET and Docker",
                          "link": "https://learn.microsoft.com/en-us/dotnet/core/docker/introduction"
                        },
                        {
                          "name": "What is Docker, Why use it?",
                          "link": "https://www.youtube.com/watch?v=vmnvOITMoIg"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "Reverse Proxy": {
                  "options": [
                    {
                      "name": "YARP",
                      "recommendation-type": "opinion",
                      "description": "YARP (Yet Another Reverse Proxy) is a library for creating high-performance, production-ready, and highly customizable reverse proxy servers using .NET. Built on ASP.NET and .NET (version 6 and newer), YARP stands out for its easy customization and tweaking via .NET code to match specific deployment scenarios. It focuses on providing customi zability without requiring users to resort to scripts or rebuild the library from source.",
                      "resources": [
                        {
                          "name": "Getting Started with YARP",
                          "link": "https://microsoft.github.io/reverse-proxy/articles/getting-started.html"
                        },
                        {
                          "name": "YARP: The .NET Reverse proxy",
                          "link": "https://microsoft.github.io/reverse-proxy/articles/getting-started.html"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "CI / CD": {
        "description": "CI/CD (Continuous Integration/Continuous Deployment) is a software development practice that involves automating the process of building, testing, and deploying code changes. It is a popular practice among software development teams, as it helps to ensure that code changes are integrated, tested, and deployed quickly and reliably. In the context of ASP.NET, CI/CD can be used to automate various tasks related to the development, testing, and deployment of ASP.NET applications. For example, you can use CI/CD to automatically build, test, and deploy an ASP.NET application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.",
        "resources": [
          {
            "name": "How to create a CI/CD pipeline for ASP.NET?",
            "link": "https://www.azuredevopslabs.com/labs/vstsextend/azuredevopsprojectdotnet/"
          },
          {
            "name": "Building a CI/CD Pipeline in Azure DevOps for ASP.NET C",
            "link": "https://youtube.com/watch?v=eOQL0nXQlLs"
          }
        ],
        "order": 16,
        "options": [
          {
            "name": "GitHub Actions",
            "recommendation-type": "opinion",
            "description": "GitHub Actions is a powerful and flexible automation platform that enables developers to create custom workflows for their software development lifecycle (SDLC) directly in their GitHub repository. It allows developers to automate various tasks, such as building, testing, and deploying code, directly from their GitHub repository. In ASP.NET, GitHub Actions can be used to automate various tasks related to the development, testing, and deployment of ASP.NET applications. For example, you can use GitHub Actions to automatically build, test, and deploy an ASP.NET application to a hosting provider, such as Azure or AWS, every time you push code to your GitHub repository.",
            "resources": [
              {
                "name": "Intro to GitHub Actions for .NET",
                "link": "https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/"
              },
              {
                "name": "Tutorial: Create a GitHub Action with .NET",
                "link": "https://learn.microsoft.com/en-us/dotnet/devops/create-dotnet-github-action"
              },
              {
                "name": "Building and testing .NET",
                "link": "https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net"
              }
            ]
          },
          {
            "name": "Azure Pipelines",
            "recommendation-type": "opinion",
            "description": "Azure Pipelines is a continuous integration and continuous delivery (CI/CD) platform that allows developers to automate the process of building, testing, and deploying code. It is a part of the Azure DevOps suite of tools and can be used to automate the software development process for various languages and platforms, including ASP.NET. In ASP.NET, Azure Pipelines can be used to automate various tasks related to the development, testing, and deployment of ASP.NET applications. For example, you can use Azure Pipelines to automatically build, test, and deploy an ASP.NET application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.",
            "resources": [
              {
                "name": "Deploy ASP.NET Apps with Azure Pipelines",
                "link": "https://learn.microsoft.com/en-us/training/modules/deploy-aspnet-apps-azure-app-service-pipelines/"
              },
              {
                "name": "Build ASP.NET apps with .NET Framework",
                "link": "https://learn.microsoft.com/en-us/azure/devops/pipelines/apps/aspnet/build-aspnet-4?view=azure-devops"
              },
              {
                "name": "How to Build, test & deploy .NET Apps",
                "link": "https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops&tabs=dotnetfive"
              }
            ]
          },
          {
            "name": "Travis CI",
            "recommendation-type": "opinion",
            "description": "Travis CI is a cloud-based continuous integration and continuous delivery (CI/CD) platform that allows developers to automate the process of building, testing, and deploying code. It is a popular platform that supports a wide range of languages and frameworks, including ASP.NET. In ASP.NET, Travis CI can be used to automate various tasks related to the development, testing, and deployment of ASP.NET applications. For example, you can use Travis CI to automatically build, test, and deploy an ASP.NET application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.",
            "resources": [
              {
                "name": "How to use Travis CI to Deploy to Azure in ASP.NET",
                "link": "https://devblogs.microsoft.com/cse/2015/09/30/using-travis-ci-to-deploy-to-azure/"
              },
              {
                "name": "Concepts for Beginners of Travis CI in ASP.NET",
                "link": "https://docs.travis-ci.com/user/for-beginners/"
              }
            ]
          },
          {
            "name": "Jenkins",
            "recommendation-type": "opinion",
            "description": "Jenkins is an open-source automation server that can be used to automate various tasks related to software development, including building, testing, and deploying code. It is a popular platform that supports a wide range of languages and frameworks, including ASP.NET. In ASP.NET, Jenkins can be used to automate various tasks related to the development, testing, and deployment of ASP.NET applications. For example, you can use Jenkins to automatically build, test, and deploy an ASP.NET application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.",
            "resources": [
              {
                "name": "Continuous Deployment With Jenkins And .NET",
                "link": "https://docs.travis-ci.com/user/for-beginners/"
              },
              {
                "name": "How to build ASP.NET Core code with Jenkins",
                "link": "https://referbruv.com/blog/cicd-getting-started-automating-aspnet-core-build-using-jenkins/"
              },
              {
                "name": "How to publish ASP.NET Apps using Jenkins",
                "link": "https://www.ahmetkucukoglu.com/en/how-to-publish-asp-net-core-application-by-using-jenkins"
              }
            ]
          },
          {
            "name": "CircleCI",
            "recommendation-type": "opinion",
            "description": "CircleCI is a cloud-based continuous integration and continuous delivery (CI/CD) platform that allows developers to automate the process of building, testing, and deploying code. It is a popular platform that supports a wide range of languages and frameworks, including ASP.NET. In ASP.NET, CircleCI can be used to automate various tasks related to the development, testing, and deployment of ASP.NET applications. For example, you can use CircleCI to automatically build, test, and deploy an ASP.NET application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.",
            "resources": [
              {
                "name": "How to Setup CircleCI for ASP.NET project",
                "link": "https://discuss.circleci.com/t/setup-circleci-for-asp-net-project/33796s"
              },
              {
                "name": "Building and testing an ASP.NET apps with CircleCI",
                "link": "https://circleci.com/blog/building-and-testing-an-asp-net-core-application/"
              }
            ]
          },
          {
            "name": "TeamCity",
            "recommendation-type": "opinion",
            "description": "TeamCity is a Java-based continuous integration and continuous delivery (CI/CD) platform that allows developers to automate the process of building, testing, and deploying code. It is a popular platform that supports a wide range of languages and frameworks, including ASP.NET. In ASP.NET, TeamCity can be used to automate various tasks related to the development, testing, and deployment of ASP.NET applications. For example, you can use TeamCity to automatically build, test, and deploy an ASP.NET application to a hosting provider, such as Azure or AWS, every time you push code to your source control repository.",
            "resources": [
              {
                "name": "Tutorial on TeamCity with ASP.NET",
                "link": "https://www.jetbrains.com/help/teamcity/net.html"
              },
              {
                "name": "How to Build ASP.NET application with TeamCity?",
                "link": "https://www.youtube.com/watch?v=KNzxyhSWV-4"
              },
              {
                "name": "How to deploy ASP.NET Core sites using Teamcity?",
                "link": "https://medium.com/monkii/how-to-deploy-asp-net-core-sites-using-teamcity-or-just-command-line-cf05fdee58f5"
              }
            ]
          }
        ]
      },
      "Software Design and Architecture": {
        "order": 17,
        "link": "https://roadmap.sh/software-design-architecture"
      },
      "Client Side Libraries": {
        "recommendation-type": "opinion",
        "description": "Client-side libraries in ASP.NET are libraries that are used to add functionality and enhance the user experience of web applications on the client-side or the browser. Some popular client-side libraries in ASP.NET include jQuery, Bootstrap, React.js, Angular.js, and Vue.js, which can be easily integrated with ASP.NET applications by including them as a dependency in the project. They can be used to enhance the user interface, add interactive elements, and improve the user experience of your application.",
        "resources": [
          {
            "name": "How to use Client Side Library in ASP.NET Core",
            "link": "https://www.youtube.com/watch?v=VwqozSbQuec"
          }
        ],
        "order": 18,
        "options": [
          {
            "name": "Blazor",
            "recommendation-type": "opinion",
            "description": "Blazor is a framework for building web applications using C# and .NET that runs in the browser via WebAssembly. It allows developers to write C# code that runs directly in the browser, eliminating the need for JavaScript. Blazor comes in two flavors: Blazor WebAssembly, a client-side solution that allows you to run C# code directly in the browser using WebAssembly. The app is executed on the client-side and can work offline; it can also interact with JavaScript and access the browser’s DOM. Blazor Server, a server-side solution that allows you to run C# code on the server and update the UI in real-time. The app is executed on the server-side and requires an active connection to the server to function.",
            "resources": [
              {
                "name": "Guide to ASP.NET Core Blazor",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-7.0"
              },
              {
                "name": "What Is Blazor And How It Works?",
                "link": "https://www.c-sharpcorner.com/article/what-is-blazor-and-how-does-it-works/"
              },
              {
                "name": "Tutorial of ASP.NET Core Blazor",
                "link": "https://www.youtube.com/watch?v=LyO4zj6NRuc"
              }
            ]
          }
        ]
      },
      "Template Engines": {
        "description": "Template engines in ASP.NET are libraries that allow developers to embed dynamic data in HTML templates. These engines are used to separate the logic of the application from the presentation of the data, making it easy to change the appearance of the application without having to change the underlying code.",
        "resources": [
          {
            "name": "Template Engine in ASP.NET",
            "link": "https://ej2.syncfusion.com/aspnetmvc/documentation/common/template-engine"
          },
          {
            "name": "How to Create Custom Templates using the .Net Template Engine",
            "link": "https://www.infoq.com/articles/dotnet-core-template-engine/"
          }
        ],
        "order": 19,
        "options": [
          {
            "name": "Razor",
            "recommendation-type": "opinion",
            "description": "Razor is a markup syntax for embedding server-side code in web pages. It was introduced with ASP.NET MVC 3 and later became a part of ASP.NET Web Pages. It allows developers to write server-side code using C# or Visual Basic and embed it in HTML markup. Its syntax is designed to be compact and easy to read. It provides a rich set of features for building web applications, such as a component model for building reusable UI, a routing system for navigation, and support for dependency injection. It also allows you to use the same libraries, frameworks, and tools that you’re already familiar with from building traditional ASP.NET web applications.",
            "resources": [
              {
                "name": "Complete Guide to ASP.NET Razor",
                "link": "https://w3schools.com/asp/razor_intro.asp"
              },
              {
                "name": "Introduction to ASP.NET Web Programming Using Razor",
                "link": "https://learn.microsoft.com/en-us/aspnet/web-pages/overview/getting-started/introducing-razor-syntax-c"
              },
              {
                "name": "An Introduction To Razor",
                "link": "https://khalidabuhakmeh.com/what-is-razor-aspnet"
              }
            ]
          },
          {
            "name": "DotLiquid",
            "recommendation-type": "opinion",
            "description": "DotLiquid is an open-source templating engine for .NET that is based on the Liquid template language. It allows you to embed dynamic data in HTML templates and is commonly used for generating email templates, reports, and other types of documents. It is a .NET implementation of the Liquid template language, providing a simple and easy-to-use API for parsing and rendering Liquid templates. It can be easily integrated with ASP.NET and other .NET frameworks, often used in web applications to separate the logic of the application from the presentation of the data.",
            "resources": [
              {
                "name": "Guide to DotLiquid",
                "link": "https://discoverdot.net/projects/dotliquid"
              },
              {
                "name": "What is DotLiquid in ASP.NET Core?",
                "link": "https://grandnode.medium.com/dotliquid-in-asp-net-core-e-commerce-platform-how-to-handle-message-templates-a6865be3a612"
              }
            ]
          },
          {
            "name": "Scriban",
            "recommendation-type": "opinion",
            "description": "Scriban is an open-source, lightweight template engine for .NET that is based on the Lua programming language. It is designed to be simple and easy to use while providing a powerful set of features for creating and manipulating templates. Scriban offers a simple and easy-to-use API for parsing and rendering templates, supporting a wide range of features such as variables, loops, conditionals, and functions. It also provides a wide range of built-in functions for working with strings, numbers, dates, and other types of data, along with support for advanced features such as scripting and metaprogramming.",
            "resources": [
              {
                "name": "Guide to Scriban in ASP.NET",
                "link": "https://github.com/scriban/scriban"
              },
              {
                "name": "Introduction to Scriban",
                "link": "https://www.markvanaalst.com/blog/sxa/sxa-9-3-introducing-scriban/"
              }
            ]
          },
          {
            "name": "Fluid",
            "recommendation-type": "opinion",
            "description": "Fluid is a template engine for .NET that is based on the Fluid template language. It is similar to Liquid but is written in C#. Fluid provides a simple and easy-to-use API for parsing and rendering templates, supporting features such as variables, loops, conditionals, and functions. It also offers a wide range of built-in functions for working with strings, numbers, dates, and other types of data. Fluid supports advanced features such as scripting and metaprogramming and is often used in web applications to separate the logic of the application from the presentation of the data, making it easy to change the appearance of the application without having to change the underlying code.",
            "resources": [
              {
                "name": "Overview of Fluid",
                "link": "https://github.com/sebastienros/fluid"
              }
            ]
          }
        ]
      },
      "Good To Know Libraries": {
        "description": "There are many libraries available for .NET and ASP.NET that can help you with various tasks and improve your development workflow. Some of the libraries that are commonly used and considered to be 'good to know' include: Entity Framework, AutoMapper, MediatR, FluentValidation, Newtonsoft.Json.",
        "resources": [
          {
            "name": "Top ASP.NET Libraries - Every Developer Should Know",
            "link": "https://procodeguide.com/programming/top-12-aspnet-core-libraries/"
          },
          {
            "name": "Top 10 .NET Libraries Every Developer Should Know",
            "link": "https://www.syncfusion.com/blogs/post/top-10-net-core-libraries-every-web-developers-should-know.aspx"
          }
        ],
        "order": 20,
        "options": [
          {
            "name": "MediatR",
            "recommendation-type": "opinion",
            "description": "MediatR is an open-source library for .NET that is designed to simplify the process of handling messages and commands in a clean, decoupled manner. It’s particularly useful in applications that use the Command-Query Responsibility Segregation (CQRS) pattern and event-driven architecture. It provides a simple and easy-to-use API for handling messages and supports the concept of pipelines, allowing you to add additional behavior to message handling, such as logging, validation, and exception handling.",
            "resources": [
              {
                "name": "Use MediatR in ASP.NET or ASP.NET Core",
                "link": "https://medium.com/dotnet-hub/use-mediatr-in-asp-net-or-asp-net-core-cqrs-and-mediator-in-dotnet-how-to-use-mediatr-cqrs-aspnetcore-5076e2f2880c"
              },
              {
                "name": "How to implement CQRS using MediatR in an ASP.NET?",
                "link": "https://blog.christian-schou.dk/how-to-implement-cqrs-with-mediatr-in-asp-net/"
              }
            ]
          },
          {
            "name": "FluentValidation",
            "recommendation-type": "opinion",
            "description": "FluentValidation is an open-source library for .NET that provides a fluent, easy-to-use API for validating domain models. It allows developers to define validation rules using a fluent, chainable syntax. It separates validation rules into separate classes called validators, supports async validation, custom validation rules, and cascading validation. It makes it easy to read and understand the validation logic and returns a ValidationResult object containing information about any validation errors that were found.",
            "resources": [
              {
                "name": "Documentations of FluentValidation",
                "link": "https://docs.fluentvalidation.net/en/latest/"
              },
              {
                "name": "FluentValidation in ASP.NET Core",
                "link": "https://docs.fluentvalidation.net/en/latest/aspnet.html"
              },
              {
                "name": "Overview of FluentValidation in ASP.NET Core",
                "link": "https://code-maze.com/fluentvalidation-in-aspnet/"
              }
            ]
          },
          {
            "name": "Polly",
            "recommendation-type": "opinion",
            "description": "Polly is an open-source library for .NET that provides a simple and flexible API for handling transient faults and other types of errors that occur during the execution of a service. It allows developers to define a set of policies, such as retry, circuit breaker, and timeout, that can be used to handle specific types of errors and improve the resiliency of the service. It provides a fluent API that makes it easy to define and configure policies, supports advanced features such as async and sync execution, fallback policies, and policy wrapping. Additionally, it allows specifying the exception type that is thrown and would trigger the policy.",
            "resources": [
              {
                "name": "Using Polly for .NET Resilience",
                "link": "https://www.telerik.com/blogs/using-polly-for-net-resilience-and-transient-fault-handling-with-net-core"
              },
              {
                "name": "Build Resilient Microservices Using Polly In ASP.NET",
                "link": "https://procodeguide.com/programming/polly-in-aspnet-core/"
              }
            ]
          },
          {
            "name": "NUKE",
            "recommendation-type": "opinion",
            "description": "NUKE (Build Automation for .NET) is an open-source build automation tool for .NET projects. It is designed to be simple, flexible, and extensible, making it easy to automate the build, test, and deployment process of your .NET projects. NUKE allows you to define your build process using a simple, declarative syntax, making it easy to understand and maintain. It provides a set of built-in tasks for common build actions, such as compiling, testing, and publishing, as well as a powerful extensibility model that allows you to add custom tasks and scripts.",
            "resources": [
              {
                "name": "How to Build Automation with NUKE",
                "link": "https://learn.microsoft.com/en-us/shows/on-net/build-automation-with-nuke"
              },
              {
                "name": "Automate your .NET project builds with NUKE",
                "link": "https://laurentkempe.com/2022/02/02/automate-your-dotnet-project-builds-with-nuke-a-cross-platform-build-automation-solution/"
              }
            ]
          },
          {
            "name": "BenchmarkDotNet",
            "recommendation-type": "opinion",
            "description": "BenchmarkDotNet is an open-source library for .NET that provides a simple and easy-to-use API for benchmarking the performance of code. It allows you to measure the performance of methods, classes, and entire assemblies and provides a rich set of features for analyzing and comparing the results. It provides a wide range of performance metrics, such as CPU cycles, memory allocation, and garbage collection, and can generate detailed reports that include charts, tables, and source code highlighting. It has support for multithreading and built-in support for .NET Core.",
            "resources": [
              {
                "name": "Benchmarking .NET Using BenchmarkDotNet",
                "link": "https://www.codemag.com/Article/2209061/Benchmarking-.NET-6-Applications-Using-BenchmarkDotNet-A-Deep-Dive"
              },
              {
                "name": "Benchmarking ASP.NET Applications with .NET Crank",
                "link": "https://www.youtube.com/watch?v=2IgfrnG-128"
              },
              {
                "name": "Intro to BenchmarkDotNet",
                "link": "https://www.youtube.com/watch?v=mmza9x3QxYE"
              }
            ]
          },
          {
            "name": "Noda Time",
            "recommendation-type": "opinion",
            "description": "Noda Time is an open-source library for .NET that provides a more complete and accurate way of working with dates, times, and time zones. It addresses the limitations and inconsistencies of the built-in .NET DateTime and TimeZone classes and provides a number of features that are not present in the .NET framework. It provides a set of immutable and thread-safe value types, such as LocalDate, LocalTime, and Instant. It also provides a time zone abstraction, the DateTimeZone class, that allows you to work with time zones in a more accurate and consistent way, and a set of helper classes and extension methods that make it easy to perform common date and time-related operations.",
            "resources": [
              {
                "name": "Intro to Noda Time",
                "link": "https://nodatime.org/"
              },
              {
                "name": "What’s the use of Noda Time?",
                "link": "https://nodatime.org/3.1.x/userguide/rationale"
              }
            ]
          },
          {
            "name": "GenFu",
            "recommendation-type": "opinion",
            "description": "GenFu is an open-source library for .NET that provides a simple and flexible way to generate test data for use in automated testing and development. It uses a fluent API to define the types of data that should be generated and provides a set of built-in generators for common types, such as strings, numbers, and dates. It allows you to easily generate large quantities of test data quickly and is especially useful when working with complex object graphs and scenarios that require large amounts of data. It also has built-in support for some of the common libraries like AutoFixture, NBuilder, and more, so that you can use it seamlessly with those libraries.",
            "resources": [
              {
                "name": "Overview of GenFu in ASP.NET",
                "link": "https://github.com/MisterJames/GenFu"
              }
            ]
          },
          {
            "name": "Swashbuckle",
            "recommendation-type": "opinion",
            "description": "Swashbuckle is an open-source library for .NET that provides a simple and easy-to-use API for generating Swagger (OpenAPI) documentation for web APIs. It automatically generates a Swagger specification for your API based on your existing .NET code and provides a set of tools for customizing and displaying the documentation in a user-friendly format. It can be easily integrated into an ASP.NET Core web application and has a built-in web UI for developers and users to interact with the API and test its functionality. It also supports some of the advanced features like Authentication, Authorization, and more.",
            "resources": [
              {
                "name": "Get started with Swashbuckle and ASP.NET Core",
                "link": "https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-7.0&tabs=visual-studio"
              },
              {
                "name": "How to Setup Swagger in ASP.NET with Swashbuckle?",
                "link": "https://www.andrewhoefling.com/Blog/Post/web-api-swagger-swashbuckle"
              },
              {
                "name": "How to use Swagger/Swashbuckle in ASP.NET?",
                "link": "https://www.pragimtech.com/blog/azure/how-to-use-swagger-in-asp.net-core-web-api/"
              }
            ]
          }
        ]
      },
      "Identify what you missed": {
        "order": 21,
        "name": "Backend Developer ",
        "link": "https://roadmap.sh/backend"
      }
    }
  }
}